###############################################################
Utility Name: Data Management Utilities
Utility File: Data Management Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios to manage test data. The logic supports dynamic data processing for test inputs, pre and post test validations, and handling XML.

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Data Setup and Management

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: SQL, MOCA

Public Scenarios:
    * Process Dynamic Data Variables  - Evaluates all the test inputs to determine if dynamic data processing is configured. If so, the dynamic data logic is run for the variables.
    * Process Test Case Pre Validations  - Perform Pre Test Validations
    * Process Test Case Post Validations  - Perform Post Test Validations

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Data Management Utilities/Process Dynamic Data Variables
#########################################################################

Description:
    Evaluates all the test inputs to determine if dynamic data processing is configured. If so, the dynamic data logic is run for the variables.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * dynamic_data - flag to determine if dynamic data processing is enabled for the current test
    * test_case_examples - Name of CSV file containing the test case input examples

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Data Management Utilities/Process Test Case Pre Validations
#########################################################################

Description:
    This sets the validation type to "PRE" and calls the logic to perform pre validations

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * test_case_examples - name of examples file and of the validation file
    * pre_validations - Flag indicating if pre-validations should be performed

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Data Management Utilities/Process Test Case Post Validations
#########################################################################

Description:
    This sets the validation type to "POST" and calls the logic to perform post validations

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * test_case_examples - name of examples file and of the validation file
    * post_validations - Flag indicating if post-validations should be performed

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Data Management Utilities/Process Dynamic Data Lookup and Execute
#########################################################################

Description:
    For a variable requiring dynamic data processing, this scenario will search the dynamic data CSV files to find the configure instruction 
    and then execute and instruction.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * variable - The name of the test case input variable for with dynamic data is being used
    * value - The dynamic data value assigned to the variable (or the retry_value)
    * first_character_of_value - The first character of the contents in $value. If this is not ? then value is a Default value for the variable

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Data Management Utilities/Perform Dynamic Data Scenario Instruction
#########################################################################

Description:
    Run the Cycle scenario configured as a dynamic data instruction and handle assigning the values after the scenario call.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * variable - The name of the test case input variable for with dynamic data is being used
    * instruction - The scenario to be called
    * extra_fields - extra cycle variables that should get populated and stored by the scenario

Optional Inputs:
    * None

Outputs:
    * error_message - Filled in if the scenario fails

#########################################################################
Utility Scenario: Data Management Utilities/Perform Dynamic Data MSQL Instruction
#########################################################################

Description:
    Run the MSQL File configured as a dynamic data instruction and handle assigning the values after the scenario call.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * variable - The name of the test case input variable for with dynamic data is being used
    * instruction - The scenario to be called
    * return_fields - variables that should get populated and stored by the scenario

Optional Inputs:
    * None

Outputs:
    * error_message - Filled in if the scenario fails

#########################################################################
Utility Scenario: Data Management Utilities/Perform Dynamic Data SQL Instruction
#########################################################################

Description:
    Run the SQL File configured as a dynamic data instruction and handle assigning the values after the scenario call.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * variable - The name of the test case input variable for with dynamic data is being used
    * instruction - The scenario to be called
    * return_fields - variables that should get populated and stored by the scenario

Optional Inputs:
    * None

Outputs:
    * error_message - Filled in if the scenario fails

#########################################################################
Utility Scenario: Data Management Utilities/Perform Dynamic Data Prompt String Instruction
#########################################################################

Description:
    Prompt the user for a string value and store it in the variable

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * variable - The name of the test case input variable for with dynamic data is being used
    * instruction - The text prompt

Optional Inputs:
    * None

Outputs:
    * error_message - Filled in if the scenario fails

#########################################################################
Utility Scenario: Data Management Utilities/Perform Dynamic Data Prompt Integer Instruction
#########################################################################

Description:
    Prompt the user for an integer value and store it in the variable

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * variable - The name of the test case input variable for with dynamic data is being used
    * instruction - The text prompt

Optional Inputs:
    * None

Outputs:
    * error_message - Filled in if the scenario fails

#########################################################################
Utility Scenario: Data Management Utilities/Process Dynamic Data Return Fields
#########################################################################

Description:
    This scenario will use fill in the fields designated in the return_fields list from values populated from a scenario call and assign moca environment variables.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * returns_field - list of fields to be populated

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Data Management Utilities/Process Dynamic Data Return Fields for Datasets
#########################################################################

Description:
    This scenario will use fill in the fields designated in the return_fields list from values populated from a SQL or MSQL dataset and assign moca environment variables.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * returns_field - list of fields to be populated

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Data Management Utilities/Process Test Case Validations
#########################################################################

Description:
    This scenario locates the validation configuration file for the test and performs all the validations

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * test_case - Name of test case, maps to the name of file containing validations
    * validation_type - Indicates if Pre or Post validations should be performed

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Data Management Utilities/Map Test Case Validation Parameters
#########################################################################

Description:
    This scenario maps the input parameters for the validation instructions

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * validation_parameters - Comma seperated list of Cycle variables to be mapped to parameters
    * validation_type - Indicates if Pre or Post validations should be performed

Optional Inputs:
    * None

Outputs:
    * parameter_1 - Validation Parameter (also assigned to parameter_1)
    * parameter_2 - Validation Parameter (also assigned to parameter_2)
    * parameter_3 - Validation Parameter (also assigned to parameter_3)
    * parameter_x - Validation Parameter (also assigned to parameter_x)
    * parameter_count - The number of parameters assigned

#########################################################################
Utility Scenario: Data Management Utilities/Unmap Test Case Validation Parameters
#########################################################################

Description:
    This scenario unassigns the cycle variables used for input parameters

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * parameter_count - The number of varibles mapped to parameters

Optional Inputs:
    * parameter_1 - Validation Parameter (also assigned to parameter_1)
    * parameter_2 - Validation Parameter (also assigned to parameter_2)
    * parameter_3 - Validation Parameter (also assigned to parameter_3)
    * parameter_x - Validation Parameter (also assigned to parameter_x)

Outputs:
    * None

#########################################################################
Utility Scenario: Data Management Utilities/Perform Test Case Validation
#########################################################################

Description:
    This scenario peforms the validation instructions

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * instruction_type - Type of instruction to perform
    * instruction - Validation Instruction to be performed

Optional Inputs:
    * parameter_1 - Validation parameter
    * parameter_2 - Validation parameter
    * parameter_3 - Validation parameter
    * parameter_x - Validation parameter

Outputs:
    * None

#########################################################################
Utility Scenario: Data Management Utilities/Perform Variable Replacement in SQL String
#########################################################################

Description:
    This scenario accepts a SQL string and converts and cycle variables in the $ notation with the value contains within the cycle variable

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * sql_string - Source string for processing

Optional Inputs:
    * None

Outputs:
    * sql_string - With cycle variables replaces with data values


###############################################################
Utility Name: Dynamic Data Utilities
Utility File: Dynamic Data Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios for the dynamic data functionality

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Data Setup

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: None

Public Scenarios:
    * Get Value from CSV for Dynamic Data  - Get a value from a CSV
    * Get Value from Cycle Variable  - Return the value currently stored in a cycle variable (for reassignment)
    * Use Value from Where Clause  - Return the literal value from the DD's where clause

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Dynamic Data Utilities/Get Value from CSV for Dynamic Data
#########################################################################

Description:
    This function will pull the next value from a single column CSV file. The row taken is removed.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * where_clause - path and name of CSV file

Optional Inputs:
    * None

Outputs:
    * next_csv_value - value read from the csv

#########################################################################
Utility Scenario: Dynamic Data Utilities/Get Value from Cycle Variable
#########################################################################

Description:
    This function will return the value currently stored in a cycle variable. This will get used when earlier dynamic data calls returned the needed value but in a field name
    that is different than the current field being populated. For instance, an earlier call might return stoloc, but the test input field needed to be populated is dstloc. 
    In this example the dynamic data setup would specify stoloc in the where_clause.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * where_clause - Variable to be assigned. Passed from the dynamic data instructions.
    * variable - field being processed by dynamic data processing (automatically populated)

Optional Inputs:
    * None

Outputs:
    * value - Field to be assigned to dynamic data

#########################################################################
Utility Scenario: Dynamic Data Utilities/Use Value from Where Clause
#########################################################################

Description:
    This function will return the value currently stored in a cycle variable. matching the variable being processed. If the rare case in which a an input value starts with ?, 
    this function and be used pass the value to the test case.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * where_clause - Value to be assigned. Passed from the dynamic data instructions.

Optional Inputs:
    * None

Outputs:
    * value - Field to be assigned to dynamic data


###############################################################
Utility Name: Environment
Utility File: Environment.feature
###############################################################

Utility Description:
    Utilities for setting up cycle environment and moca environment variable needed to run tests. Includes logic to support Test specific overrides and environment specific overrides.

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Environment Setup

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Integrator

Public Scenarios:
    * Set Up Environment  - Setup environment variables for test
    * Perform File Import  - Import feature files supporting code customizations
    * Perform MSQL Execution  - Execute a MSQL script supporting code customizations
    * Perform SQL Execution  - Execute a SQL script supporting code customizations
    * Perform Groovy Execution  - Execute a groovy script supporting code customizations
    * Perform MOCA Cleanup Script  - Execute a MOCA cleanup supporting code customizations
    * Perform MOCA Dataset  - Execute a MOCA dataset supporting code customizations
    * Perform SQL Cleanup Script  - Execute a SQL cleanup supporting code customizations
    * Perform SQL Dataset  - Execute a SQL dataset supporting code customizations
    * Locate File on Path  - Find a file in the directory supporting code customizations
    * Test Completion  - Cleanup interface connections and hook for general test cleanup
    * Test Completion Triggers  - Hook for any future test completion activities
    * Perform Integration Load and Process Transaction File  - Load and process integrator file
    * Perform Load of Native App Locator CSV  - Load Native App Locator CSV file contents to variables
    * Perform Load of API Field Mappings - Determine the path to the CSV file used for DB-to - API field mappings, load mappings into memory
    * Get WMS Version  - Get the version of the instance the bundle is interacting with

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Environment/Set Up Environment
#########################################################################

Description:
    Utility for setting up cycle environment and moca environment variable needed to run tests. 
    Includes logic to support Test specific overrides and environment specific overrides. Values are only assigned if the variable is unassigned Call this scenario in test case Background: 
    Values can be overwritten by individual tests by assigning variables as test inputs 
    Basic Logic 
      1 - Determine Environment by either receiving $environment as test input, from Windows OS Environment variable, or reading value from Environments/Environment.csv 
      2 - Load any variable/value pairs from the environment override files This is intended for each tester to be able to set their own device and 
          users or other tester or test specific override settings -> Values override any previous value set! 2.a - Load variable/values pairs from Environments/<ENV>/<ENV>_Environment_Override_<WH_ID>.csv 
	2.b - Load variable/values pairs from Environments/<ENV>/<ENV>_Environment_Override.csv 
	2.c - Load variable/values pairs from Environments/Environment_Override_<WH_ID>.csv 
	2.d - Load variable/values pairs from Environments/Environment_Override.csv 
	2.e - Load variable/values pairs from Environments/<ENV>/<ENV>_Environment_Override_CI.csv 
     3 - Load the variable/values pairs from the csv file located at Environments/<ENV>/<ENV>_Environment_<WH_ID>.csv and create cycle variables Environments/<ENV>/<ENV>_Environment.csv 
         and create cycle variables -> Values are only assigned if the variable is unassigned 
     4 - Load "Timing" variables

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * environment - If set, this value is used as the environment setting

Outputs:
    * msql_directory_location - location of MSQL files directory
    * sql_directory_location - location of SQL files directory
    * groovy_directory_location - location of Groovy files directory
    * dataset_directory_location - location of Datasets directory
    * playlists_directory_location - location of Playlists directory
    * test_cases_directory_location - location of Test Cases directory
    * native_app_locators_directory_location - location of native app locators
    * api_data_directory_location - location of API data
    * serial_numbers_directory_location - location of serial numbers for serialization
    * interfaces_directory_location - location of Interfaces for integration testing
    * test_case_inputs_directory_location - location of Test Case Inputs
    * environments_directory_location - Location of Environments directory

#########################################################################
Utility Scenario: Environment/Perform File Import
#########################################################################

Description:
    Import a feature file following the directory load path.  Matching files are loaded from all the directories in reverse directory_load_path sequence so that the versions earlier
    in the load path overwrite the versions listed later in the load path

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * import_file - The relative path of the file being imported with /-/ denoting the directory substitution position
    * directory_load_path - path sequence that controls code precedence. This value is created in the environment setup.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Environment/Perform MSQL Execution
#########################################################################

Description:
    Execute a MSQL Script supporting code overriding.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * msql_file - The name of the MSQL file to be executed
    * directory_load_path - path sequence that controls code precedence. This value is created in the environment setup.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Environment/Perform SQL Execution
#########################################################################

Description:
    Execute a SQL Script supporting code overriding.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * sql_file - The name of the SQL file to be executed
    * directory_load_path - path sequence that controls code precedence. This value is created in the environment setup.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Environment/Perform Groovy Execution
#########################################################################

Description:
    Execute a Groovy Script supporting code overriding.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * groovy_file - The name of the groovy file to be executed
    * directory_load_path - path sequence that controls code precedence. This value is created in the environment setup.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Environment/Perform MOCA Cleanup Script
#########################################################################

Description:
    Execute a MOCA Cleanup Script supporting code overriding.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * cleanup_directory - The dataset directory to use for cleanup
    * directory_load_path - path sequence that controls code precedence. This value is created in the environment setup.
    * cleanup_data - environment variable controlling if data cleanup logic should be run by test (TRUE/FALSE)

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Environment/Perform MOCA Dataset
#########################################################################

Description:
    Execute a MOCA Dataset supporting code overriding.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * dataset_directory - The dataset directory to use for loading
    * directory_load_path - path sequence that controls code precedence. This value is created in the environment setup.
    * create_data - environment variable controlling if data creation logic should be run by test (TRUE/FALSE)

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Environment/Perform SQL Cleanup Script
#########################################################################

Description:
    Execute a SQL Cleanup Script supporting code overriding.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * cleanup_directory - The dataset directory to use for cleanup
    * directory_load_path - path sequence that controls code precedence. This value is created in the environment setup.
    * cleanup_data - environment variable controlling if data cleanup logic should be run by test (TRUE/FALSE)

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Environment/Perform SQL Dataset
#########################################################################

Description:
    Execute a SQL Dataset supporting code overriding.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * dataset_directory - The dataset directory to use for loading
    * directory_load_path - path sequence that controls code precedence. This value is created in the environment setup.
    * create_data - environment variable controlling if data creation logic should be run by test (TRUE/FALSE)

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Environment/Perform Load of Native App Locator CSV
#########################################################################

Description:
    For Native App Locators, load CSV into variables.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * locator_csv - The CSV file to use for variable load of Native App Locators

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Environment/Perform Load of API Field Mappings
#########################################################################

Description:
    Determine the path to the CSV file used for DB-to-API field mappings

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Environment/Locate File on Path
#########################################################################

Description:
    Find the first file matching file when the file system is searched in directory_load_path sequence.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * file - The relative path of the file being imported with /-/ denoting the directory substitution position
    * directory_load_path - path sequence that controls code precedence. This value is created in the environment setup.

Optional Inputs:
    * None

Outputs:
    * new_file - The relative path to the first matching file (unassigned of locator fails)

#########################################################################
Utility Scenario: Environment/Test Data Triggers
#########################################################################

Description:
    Execution of Dynamic Data call and future expansion of test data related tasks

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Environment/Test Completion
#########################################################################

Description:
    Execute a common utility that will be called by every test case and handle terminal, Mobile, and WEB logout and in the future other activities we want to perform.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Environment/Test Completion Triggers
#########################################################################

Description:
    Execute a last hook for test completion activities that are not terminal or Web focused. Empty for now, future capabilities. Example could be (but not implemented) a trigger to do post test case reporting

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Environment/End Post-Test Activities
#########################################################################

Description:
    Execute post test activities. These occur within the actual test and not the after scenarios.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * test_case - Short code of the test case
    * post_validations - determines if post validation logic should be executed

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Environment/Get WMS Version
#########################################################################

Description:
    Extract the version of the WMS

MSQL/Groovy Files or API Endpoints:
    get_wms_version.msql

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * wms_version - version number of the WMS

#########################################################################
Utility Scenario: Environment/Setup Wait Times
#########################################################################

Description:
    Load wait time variables

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Environment/Setup HTTP Status Codes
#########################################################################

Description:
    Load HTTP status code variables

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Environment/Load Environment File
#########################################################################

Description:
    Loads a CSV file containing Variable / Value pairs and assigns each value to an unassigned cycle variable

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * environment_file - full path and filename containing data

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Import Utilities
Utility File: Import Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios for importing sets of files by functional area

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Cycle Testing

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: None

Public Scenarios:
    *  Terminal Receiving Imports
    *  Mobile Receiving Imports
    *  Web Receiving Imports
    *  Terminal Picking Imports
    *  Mobile Picking Imports
    *  Integration Imports
    *  Work Order Imports
    *  Work Order Mobile Imports
    *  Inventory Inbound Putaway Imports
    *  Trailer Move Imports
    *  Mobile Trailer Move Imports
    *  Wave Imports
    *  Inventory Adjust Imports
    *  Inventory Count Imports
    *  Inventory Transfer Imports
    *  Replenishment Imports
    *  Mobile Replenishment Imports
    *  Web Inbound Trailer Imports
    *  Web Outbound Trailer Imports
    *  Web Outbound Audit Imports
    *  Terminal Count Near Zero Imports
    *  Mobile Count Near Zero Imports
    *  Mobile Inventory Imports
    *  Mobile Count Imports
    *  Terminal Yard Audit Imports
    *  Mobile Yard Audit Imports
    *  Web Yard Audit Imports
    *  Terminal Unloading Imports
    *  Mobile Unloading Imports
    *  Terminal Loading Imports
    *  Mobile Loading Imports
    *  Mobile Pallet Building Imports
    *  Terminal Pallet Building Imports
    *  API Imports

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Import Utilities/Terminal Receiving Imports
#########################################################################

Description:
    Imports Utilities to perform terminal receiving operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Mobile Receiving Imports
#########################################################################

Description:
    Imports Utilities to perform Mobile receiving operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Web Receiving Imports
#########################################################################

Description:
    Imports Utilities to perform web receiving operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Terminal Picking Imports
#########################################################################

Description:
    Imports Utilities to perform terminal picking operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Mobile Picking Imports
#########################################################################

Description:
    Imports Utilities to perform Mobile picking operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Integration Imports
#########################################################################

Description:
    Imports Utilities to perform integration operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Work Order Imports
#########################################################################

Description:
    Imports Utilities to perform work order operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Work Order Mobile Imports
#########################################################################

Description:
    Imports Utilities to perform work order operations for Mobile

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Inventory Adjust Imports
#########################################################################

Description:
    Imports Utilities to perform inventory adjustment operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Inventory Inbound Putaway Imports
#########################################################################

Description:
    Imports Utilities to perform an inbound putaway.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Inventory Count Imports
#########################################################################

Description:
    Imports Utilities to perform inventory count operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Inventory Transfer Imports
#########################################################################

Description:
    Imports Utilities to perform inventory transfer operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Trailer Move Imports
#########################################################################

Description:
    Imports Utilities to perform trailer move operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Mobile Trailer Move Imports
#########################################################################

Description:
    Imports Utilities to perform Mobile trailer move operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Wave Imports
#########################################################################

Description:
    Imports Utilities to perform waving operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Outbound Planner Imports
#########################################################################

Description:
    Imports Utilities to perform waving operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Terminal Pallet Building Imports
#########################################################################

Description:
    Imports Utilities to perform Pallet Building operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Mobile Pallet Building Imports
#########################################################################

Description:
    Imports Utilities to perform Mobile Pallet Building operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Terminal Loading Imports
#########################################################################

Description:
    Imports Utilities to perform trailer loading operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Mobile Loading Imports
#########################################################################

Description:
    Imports Utilities to perform Mobile trailer loading operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Terminal Unloading Imports
#########################################################################

Description:
    Imports Utilities to perform trailer unloading operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Mobile Unloading Imports
#########################################################################

Description:
    Imports Utilities to perform trailer unloading operations for Mobile

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Web Inbound Trailer Imports
#########################################################################

Description:
    Imports Utilities to perform web inbound trailer operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Replenishment Imports
#########################################################################

Description:
    Imports Utilities to perform outbound replenishment operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Mobile Replenishment Imports
#########################################################################

Description:
    Imports Utilities to perform Mobile outbound replenishment operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Web Outbound Trailer Imports
#########################################################################

Description:
    Imports Utilities to perform web inbound trailer operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Web Outbound Audit Imports
#########################################################################

Description:
    Imports Utilities to perform web outbound audit operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Verify Environment Imports
#########################################################################

Description:
    Imports Utilities to perform a verify environment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Dynamic Data Imports
#########################################################################

Description:
    Imports Utilities to perform a Dynamic Management

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Validation Imports
#########################################################################

Description:
    Imports Utilities to perform Pre and Post Validations

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Terminal Count Near Zero Imports
#########################################################################

Description:
    Imports Utilities to perform Terminal Pallet Picking and count near zero operation

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Mobile Count Near Zero Imports
#########################################################################

Description:
    Imports Utilities to perform Mobile Pallet Picking and count near zero operation

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Terminal Yard Audit Imports
#########################################################################

Description:
    Imports Utilities to perform Terminal Yard Audit operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Mobile Yard Audit Imports
#########################################################################

Description:
    Imports Utilities to perform Mobile Yard Audit operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Web Yard Audit Imports
#########################################################################

Description:
    Imports Utilities to perform Web Yard Audit operations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Mobile Inventory Imports
#########################################################################

Description:
    Imports Utilities to perform Mobile Inventory operations. Required: None Optional: None Outputs: None

MSQL/Groovy Files or API Endpoints:

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/Mobile Count Imports
#########################################################################

Description:
    Imports Utilities to perform Mobile Inventory operations. Required: None Optional: None Outputs: None

MSQL/Groovy Files or API Endpoints:

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Import Utilities/API Imports
#########################################################################

Description:
    Imports Utilities to perform API operations. Required: None Optional: None Outputs: None

MSQL/Groovy Files or API Endpoints:

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Integration Utilities
Utility File: Integration Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios for testing integrator transactions

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Host Integrations

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Integrator

Public Scenarios:
    * Process Integrator Add Transaction  - runs an Add transaction file and validates
    * Process Integrator Change Transaction  - runs a Change transaction file and validates
    * Process Integrator Delete Transaction  - runs a Delete transaction file and validates
    * Upload and Process Integrator Transaction File  - copies and processes an integrator transaction file to the WMS server

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Integration Utilities/Upload and Process Integrator Transaction File
#########################################################################

Description:
    Determine proper path to integration transaction file and copies the integrator transaction file from the cycle project directory to the WMS server and then processes that file.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * interface_path - path to directory in cycle that holds the transaction file
    * transaction_file_name - Name of the file to be uploaded and processed
    * tran_name - Transaction Name (must be valid WMS Integrator transaction for the system)
    * system - Integrator System (must be a valid WMS Integrator system)
    * wms_inbound_directory - directory on WMS system for processing host files (environment variable)

Optional Inputs:
    * destination_file_name - If provided, the transaction file will be renamed during upload

Outputs:
    * None

#########################################################################
Utility Scenario: Integration Utilities/Process Integration Add Transaction
#########################################################################

Description:
    This scenario copies an Add transaction file to the WMS system and processes the file. Pre and Post validation are run to validate the file was successfully downloaded.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * resource_path - Full path and file name to be downloaded
    * system - Integrator System (must be a valid WMS Integrator system)
    * wms_inbound_directory - directory on WMS system for processing host files
    * transaction_file_name - Name of the file to be uploaded and processed
    * tran_name - Transaction Name (must be valid integrator transaction for the system)
    * pre_validation - Cycle scenario that confirms data does not exist
    * post_validation - Cycle scenario that confirms data was added

Optional Inputs:
    * destination_file_name - If provided, the transaction file will be renamed during upload

Outputs:
    * None

#########################################################################
Utility Scenario: Integration Utilities/Process Integration Change Transaction
#########################################################################

Description:
    This scenario copies a Change transaction file to the WMS system and processes the file. Pre and Post validation are run to validate the file was successfully downloaded and data was changed.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * resource_path - Full path and file name to be downloaded
    * system - Integrator System (must be a valid WMS Integrator system)
    * wms_inbound_directory - directory on WMS system for processing host files
    * transaction_file_name - Name of the file to be uploaded and processed
    * tran_name - Transaction Name (must be valid integrator transaction for the system)
    * field_to_validate_change - Field value used to confirm download was processed
    * pre_validation - Cycle scenario that confirms data exists
    * post_validation - Cycle scenario that confirms data was changed

Optional Inputs:
    * destination_file_name - If provided, the transaction file will be renamed during upload

Outputs:
    * None

#########################################################################
Utility Scenario: Integration Utilities/Process Integration Delete Transaction
#########################################################################

Description:
    This scenario copies a Delete transaction file to the WMS system and processes the file. Pre and Post validation are run to validate the file was successfully downloaded.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * resource_path - Full path and file name to be downloaded
    * system - Integrator System (must be a valid WMS Integrator system)
    * wms_inbound_directory - directory on WMS system for processing host files
    * transaction_file_name - Name of the file to be uploaded and processed
    * tran_name - Transaction Name (must be valid integrator transaction for the system)
    * pre_validation - Cycle scenario that confirms data does not exist
    * post_validation - Cycle scenario that confirms data was added

Optional Inputs:
    * destination_file_name - If provided, the transaction file will be renamed during upload

Outputs:
    * None

#########################################################################
Utility Scenario: Integration Utilities/Wait for Outbound Event  
#########################################################################

Description:
    This scenario waits for an outbound integrator event to created (at least to IC status)

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * evt_id - Integrator Event
    * evt_arg_val - Integrator Event Argument Value

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Integration Utilities/List Outbound Event Data
#########################################################################

Description:
    This scenario returns data for an outbound integrator event An event can selected by evt_id & evt_arg_val or evt_data_seq

MSQL/Groovy Files or API Endpoints:
    list_outbound_event_data.msql

Required Inputs:
    * None

Optional Inputs:
    * evt_id - Integrator Event
    * evt_arg_val - Integrator Event Argument Value
    * evt_data_seq - Integrator Event Data Sequence Value
    * evt_dest_sys_id - Integrator system that an event is sent to

Outputs:
    * evt_stat_cd - Status code for the event
    * evt_xml - XML version of the outbound IFD
    * evt_data_seq - Event Data Sequence of event
    * ifd_data_seq - IFD Data Sequence of the outbound IFD

#########################################################################
Utility Scenario: Integration Utilities/Check Integrator ASN Download
#########################################################################

Description:
    This scenario runs a MSQL script to check for the existence of ASN data. If the Transaction Type is C (Change) then the logic also returns the value of a field

MSQL/Groovy Files or API Endpoints:
    check_integrator_asn_download.msql

Required Inputs:
    * trntyp - Transaction Type
    * invnum - Invoice Number
    * field_to_validate_change - Field to return
    * client_id - Client Id
    * wh_id - Warehouse Id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Integration Utilities/Check Integrator Customer Download
#########################################################################

Description:
    This scenario runs a MSQL script to check for the existence of Customer data. If the Transaction Type is C (Change) then the logic also returns the value of a field

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trntyp - Transaction Type
    * cstnum - Customer Number
    * field_to_validate_change - Field to return
    * client_id - Client Id
    * wh_id - Warehouse Id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Integration Utilities/Check Integrator Order Download 
#########################################################################

Description:
    This scenario runs a MSQL script to check for the existence of Order data. If the Transaction Type is C (Change) then the logic also returns the value of a field

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trntyp - Transaction Type
    * ordnum - Order Number
    * table_to_validate_change - Table to return
    * field_to_validate_change - Field to return
    * client_id - Client Id
    * wh_id - Warehouse Id

Optional Inputs:
    * clause - Must match file value when used

Outputs:
    * None

#########################################################################
Utility Scenario: Integration Utilities/Check Integrator Supplier Download
#########################################################################

Description:
    This scenario runs a MSQL script to check for the existence of Supplier data. If the Transaction Type is C (Change) then the logic also returns the value of a field

MSQL/Groovy Files or API Endpoints:
    check_integrator_supplier_download.msql

Required Inputs:
    * trntyp - Transaction Type
    * supnum - Supplier Number
    * table_to_validate_change - Table to return
    * field_to_validate_change - Field to return
    * client_id - Client Id
    * wh_id - Warehouse Id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Integration Utilities/Check Integrator Work Order Download
#########################################################################

Description:
    This scenario runs a MSQL script to check for the existence of Work Order data. If the Transaction Type is C (Change) then the logic also returns the value of a field

MSQL/Groovy Files or API Endpoints:
    check_integrator_work_order_download.msql

Required Inputs:
    * trntyp - Transaction Type
    * wkonum - Work Order Number
    * wkorev - Work Order Revision
    * wkolin - Work Order Line
    * table_to_validate_change - Table to return
    * field_to_validate_change - Field to return
    * client_id - Client Id
    * wh_id - Warehouse Id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Integration Utilities/Check Integrator PartFootprint Download
#########################################################################

Description:
    This scenario runs a MSQL script to check for the existence of PartFootprint data. 
    If the Transaction Type is C (Change) then the logic also returns the value of a field If the Transaction Type is D (Delete) then The WMS Transaction will not delete default footprint

MSQL/Groovy Files or API Endpoints:
    create_part.msql
    check_default_footprint.msql
    check_integrator_partfoot_download.msql

Required Inputs:
    * trntyp - Transaction Type
    * prtnum - Part to be created, used for validation and After Scenario purge
    * ftpcod - Footprint to be created
    * lngdsc - Part description to be created
    * short_dsc - Part description to be created
    * add_part - A flag to add a part for a Footprint Add transaction only and If add_part is Yes then the part and the footprint will be deleted in the cleanup dataset
    * table_to_validate_change - Table to return
    * field_to_validate_change - Field to return
    * client_id - Client Id
    * wh_id - Warehouse Id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Integration Utilities/Check Integrator BOM Download
#########################################################################

Description:
    This scenario runs a MSQL script to check for the existence of BOM data. If the Transaction Type is C (Change) then the logic also returns the value of a field

MSQL/Groovy Files or API Endpoints:
    check_integrator_bom_download.msql

Required Inputs:
    * trntyp - Transaction Type
    * bomnum - Bill of Material Number
    * table_to_validate_change - Table to return
    * field_to_validate_change - Field to return
    * client_id - Client Id
    * wh_id - Warehouse Id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Integration Utilities/Check Integrator Part Download
#########################################################################

Description:
    This scenario runs a MSQL script to check for the existence of Part data. If the Transaction Type is C (Change) then the logic also returns the value of a field

MSQL/Groovy Files or API Endpoints:
    check_integrator_part_download.msql

Required Inputs:
    * trntyp - Transaction Type
    * prtnum - Part Number
    * field_to_validate_change - Field to return
    * client_id - Client Id
    * wh_id - Warehouse Id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Integration Utilities/Check Integrator PO Download
#########################################################################

Description:
    This scenario runs a MSQL script to check for the existence of PO data. If the Transaction Type is C (Change) then the logic also returns the value of a field

MSQL/Groovy Files or API Endpoints:
    check_integrator_po_download.msql

Required Inputs:
    * trntyp - Transaction Type
    * invnum - Planned Inbound Order Number
    * table_to_validate_change - Table to return
    * field_to_validate_change - Field to return
    * client_id - Client Id
    * wh_id - Warehouse Id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Integration Utilities/Check Integrator Shipment Order Download
#########################################################################

Description:
    This scenario runs a MSQL script to check for the existence of Shipment Order data. If the Transaction Type is C (Change) then the logic also returns the value of a field

MSQL/Groovy Files or API Endpoints:
    check_integrator_order_download.msql

Required Inputs:
    * trntyp - Transaction Type
    * ordnum - Order Number
    * field_to_validate_change - Field to return
    * client_id - Client Id
    * wh_id - Warehouse Id

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Integrator Utilities
Utility File: Integrator Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios for working with transactions in the integrator layer of the Blue Yonder WMS

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Host Integrations

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Integrator

Public Scenarios:
    * Wait for Outbound Event  - Logic that waits for and event to be create or sent
    * List Outbound Event Data  - MSQL wrapper to get outbound event data

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Integrator Utilities/Wait for Outbound Integrator Event  
#########################################################################

Description:
    This scenario waits for an outbound integrator event to be created (at least to IC status)

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * evt_id - Integrator Event
    * evt_arg_val - Integrator Event Argument Value

Optional Inputs:
    * only_sent_flag - If TRUE, then only return success on a SC
    * loop_size - counter the controls how long we wait (default=20)

Outputs:
    * None

#########################################################################
Utility Scenario: Integrator Utilities/List Outbound Event Data
#########################################################################

Description:
    This scenario returns data for an outbound integrator event An event can selected by evt_id & evt_arg_val or evt_data_seq

MSQL/Groovy Files or API Endpoints:
    `list_outbound_event_data.msql

Required Inputs:
    * None

Optional Inputs:
    * evt_id - Integrator Event
    * evt_arg_val - Integrator Event Argument Value
    * evt_data_seq - Integrator Event Data Sequence Value
    * evt_dest_sys_id - Integrator system that an event is sent to

Outputs:
    * evt_stat_cd - Status code for the event
    * evt_xml - XML version of the outbound IFD
    * evt_data_seq - Event Data Sequence of event
    * ifd_data_seq - IFD Data Sequence of the outbound IFD


###############################################################
Utility Name: Native App Utilities
Utility File: Native App Utilities.feature
###############################################################

Utility Description:
    This Utility contains scenarios for interaction with the WMS Native App client

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Native App

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Native

Public Scenarios:
    * Native App Login  - Logs in to the WMS Native App client
    * Native App Logout  - Logs out of the WMS Native App client

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Native App Utilities/Native App Login
#########################################################################

Description:
    This scenario logs in to the WMS native app client

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ui_path - Path to native app executable. Set in environment file.
    * server - WMS instance URL. Set in environment file.
    * moca_credentials - Name of Cycle credentials for login. Set in environment file.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Native App Utilities/Native App Logout
#########################################################################

Description:
    This scenario logs out of the WMS native app client

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Native App Utilities/Native App Maximize App
#########################################################################

Description:
    This scenario maximizes the WMS native app client

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Native App Utilities/Native App Minimize App
#########################################################################

Description:
    This scenario minimizes the WMS native app client

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Native App Utilities/Native App Login Warehouse
#########################################################################

Description:
    This scenario logs in to the appropriate wh if multi-wh

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * multi - warehouse - Flag indicating instance is multi warehouse for input

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Post Validation Utilities
Utility File: Post Validation Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios to execute post validation checks

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Validation

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: SQL, MOCA

Public Scenarios:
    * Validate Variable Value  - Compare two values and fail if not equal
    * Validate String Variable Value  - Compare two string values and fail if not equal
    * Validate String Variable Value Ignoring Case  - Compare two string values ingnoring case and fail if not equal
    * Validate Number Variable Value  - Compare two numeric values and fail if not equal
    * Validate Number is Greater than Value  - Compare two numeric values and fail if first is not greater than second
    * Validate Number is Less than Value  - Compare two numeric values and fail if first is not less than second
    * Validate Transaction was Created  - Validate that an integrator transaction was created
    * Validate Transaction was Sent  - Validate that an integrator transaction was sent
    * Validate Transaction Field Value in XML  - Validate that a list of values for a given tag within an XML string matches an expected value

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Post Validation Utilities/Validate Variable Value
#########################################################################

Description:
    Compare two values and fail if not equal

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * parameter_1 - first value
    * parameter_2 - second value

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Post Validation Utilities/Validate String Variable Value
#########################################################################

Description:
    Compare two string values and fail if not equal

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * parameter_1 - first value
    * parameter_2 - second value

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Post Validation Utilities/Validate String Variable Value Ignoring Case
#########################################################################

Description:
    Compare two string values ingnoring case and fail if not equal

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * parameter_1 - first value
    * parameter_2 - second value

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Post Validation Utilities/Validate Number Variable Value
#########################################################################

Description:
    Compare two numeric values and fail if not equal

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * parameter_1 - first value
    * parameter_2 - second value

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Post Validation Utilities/Validate Number is Greater than Value
#########################################################################

Description:
    Compare two numeric values and fail if first is not greater than second

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * parameter_1 - first value
    * parameter_2 - second value

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Post Validation Utilities/Validate Number is Less than Value
#########################################################################

Description:
    Compare two numeric values and fail if first is not less than second

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * parameter_1 - first value
    * parameter_2 - second value

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Post Validation Utilities/Validate Transaction was Created
#########################################################################

Description:
    Validate that an integrator transaction was created

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * parameter_1 - Integrator Event Id
    * parameter_2 - Event Argument Value

Optional Inputs:
    * parameter_3 - Destination System Id

Outputs:
    * evt_xml - XML string of transaction

#########################################################################
Utility Scenario: Post Validation Utilities/Validate Transaction was Sent
#########################################################################

Description:
    Validate that an integrator transaction was sent

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * parameter_1 - Integrator Event Id
    * parameter_2 - Event Argument Value

Optional Inputs:
    * parameter_3 - Destination System Id

Outputs:
    * evt_xml - XML string of transaction

#########################################################################
Utility Scenario: Post Validation Utilities/Validate Transaction Field Value in XML
#########################################################################

Description:
    Validate that the value for a given tag within an XML string matches an expected value

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * evt_xml - XML string usually populated from earlier validation (Validate Transaction was Created)
    * parameter_1 - XML Tag
    * parameter_2 - Expected value

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Post Validation Utilities/Validate Transaction Field Value List in XML
#########################################################################

Description:
    Validate that a list of values for a given tag within an XML string matches an expected value

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * evt_xml - XML string usually populated from earlier validation (Validate Transaction was Created)
    * parameter_1 - XML Tag
    * parameter_2 - Expected value

Optional Inputs:
    * parameter_3 - 2nd XML Tag
    * parameter_4 - 2nd Expected value
    * parameter_5 - 3rd XML Tag
    * parameter_6 - 3rd Expected value
    * parameter_n - nth XML Tag parameter_n+1 - nth Expected value

Outputs:
    * None


###############################################################
Utility Name: Pre Validation Utilities
Utility File: Pre Validation Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios to execute pre validation checks

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Validation

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: SQL, MOCA

Public Scenarios:
    * None

Utility Assumptions:
    * None

Utility Notes:
    * None


###############################################################
Utility Name: Verify Environment
Utility File: Verify Environment.feature
###############################################################

Utility Description:
    This Utility/Test Case verifies connections to all WMS interfaces for an instance. These scenarios are executed within this file.

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Connections

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, WEB, MOCA, Native, Mobile

Public Scenarios:
    * Verify MOCA Connection  - Verifies MOCA connection
    * Verify Terminal Connection  - Verifies Terminal login/logout
    * Verify Web Connection  - Verifies Web login/logout
    * Verify WMS Native Connection  - Verifies WMS Native app login/logout
    * Verify Mobile Connection  - Verifies Mobile login/logout
    * Verify API Connection  - Verifies API login

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Verify Environment/Verify MOCA Connection
#########################################################################

Description:
    This scenario makes a MOCA connection and verifies a command can be executed with return status

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * moca_server_connection - MOCA instance URL set in environment settings
    * moca_credentials - Reference to Cycle credentials for MOCA instance

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Verify Environment/Verify Terminal Connection
#########################################################################

Description:
    This scenario verifies WMS Terminal log in and log out

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Verify Environment/Verify Web Connection
#########################################################################

Description:
    This scenario verifies WMS Web log in and log out

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Verify Environment/Verify WMS Native Connection
#########################################################################

Description:
    This scenario verifies WMS native app log in and log out

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Verify Environment/Verify Mobile Connection
#########################################################################

Description:
    This scenario verifies WMS Mobile App log in and log out

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Verify Environment/Verify API Connection
#########################################################################

Description:
    This scenario verifies API log in (log out not supported) and also ensures that the user has access to the warehouse

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Work Assignment Utilities
Utility File: Work Assignment Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios for assigning users and priorities to work in the WMS

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Work Management

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA

Public Scenarios:
    * Assign Work to User by Order and Operation  - Assigns a WMS user to all the picks for an order and operation code
    * Assign Work to User by Operation and Lodnum  - Assigns directed work to user based on oprcod and lodnum
    * Assign Transfer Directed Work  - Assign transfer operation work to current user
    * Assign Work to User by Count Batch and Count Type  - Assigns work to user with priority based on count type and batch
    * Assign Work Order Picks to User  - finds available work order picks
    * Assign User to Loading Work for Door  - assigns a user to the loading work associated with a dock door
    * Web Assign User to Work Queue  - assigns a User to Work in the Web

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Work Assignment Utilities/Assign Work to User by Order and Operation
#########################################################################

Description:
    This scenario assigns available order picks based on the Order number and Operation to the user and unassigns any other work

MSQL/Groovy Files or API Endpoints:
    assign_work_to_user_by_order_and_operation.msql

Required Inputs:
    * oprcod - Operation Code
    * username - User to assign work to
    * client_id - Client Id for Order

Optional Inputs:
    * ordnum - Work Order number

Outputs:
    * None

#########################################################################
Utility Scenario: Work Assignment Utilities/Assign Transfer Directed Work
#########################################################################

Description:
    Assign transfer work operation to current user

MSQL/Groovy Files or API Endpoints:
    assign_transfer_work.msql

Required Inputs:
    * srcloc - source location for the transfer
    * username - User to assign work to

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Work Assignment Utilities/Assign Work to User by Operation and Lodnum
#########################################################################

Description:
    This scenario assigns available inventory transfer work based on the lodnum assigned to the user and unassigns any other work

MSQL/Groovy Files or API Endpoints:
    assign_work_to_user_by_inv_transfer.msql

Required Inputs:
    * xfer_lodnum - load being transfered
    * username - User to assign work to

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Work Assignment Utilities/Assign Work to User by Count Batch and Count Type
#########################################################################

Description:
    This scenario assigns available count work based on the count type and count batch to the user and unassigns any other work

MSQL/Groovy Files or API Endpoints:
    assign_work_to_user_by_count_type_and_batch.msql

Required Inputs:
    * cnttyp - Count type
    * username - User to assign work to
    * cntbat - Batch for this count

Optional Inputs:
    * cnt_id - Count ID (Audit work)

Outputs:
    * None

#########################################################################
Utility Scenario: Work Assignment Utilities/Assign Work Order Picks to User
#########################################################################

Description:
    This scenario assigns available work order picks based on the Work Order number and revision to the user and unassigns any other work

MSQL/Groovy Files or API Endpoints:
    get_list_picking_directed_work_for_work_order.msql

Required Inputs:
    * oprcod - Operation Code
    * username - User to assign work to
    * wkonum - Work Order number
    * wkorev - Work Order revision

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Work Assignment Utilities/Assign User to Loading Work for Door
#########################################################################

Description:
    This scenario runs an MSQL script to assign a user to the loading work associated with a dock door.

MSQL/Groovy Files or API Endpoints:
    assign_loading_work.msql

Required Inputs:
    * wh_id - Warehouse Id
    * username - Username signed into terminal
    * dock_door - Dock Door

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Work Assignment Utilities/Web Assign User to Work Queue
#########################################################################

Description:
    This scenario will Assign User to Work Queue

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * yard_loc - yard location
    * username - Web username to assign work to

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: XML Utilities
Utility File: XML Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios for working with XML

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Data Management

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Integrator

Public Scenarios:
    * Replace All XML Tag Values  - Finds all the occurances of a TAG within an XML string and replaces the tag's value with a passed in value
    * Replace XML Tag Value  - Finds the first occurance of a TAG within an XML string and replaces the tag's value with a passed in value
    * Get XML Tag Value  - Finds the first occurance of a TAG within an XML string and returns the tag's value
    * Verify XML Values Are Equal  - Verifies that the tag values in two XML strings match based on a set of xml_tags
    * Verify List of XML Tags and Values  - Verify a comma seperated list of values match the a list of XML tags.
    * Replace List of XML Tags  - Alter an XML string by replacing a set of tag values with passed in values. First tag found is changed.
    * Replace List of All XML Tags  - Alter an XML string by replacing a set of tag values with passed in values. All tags found are changed.

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: XML Utilities/Replace All XML Tag Values
#########################################################################

Description:
    Finds all the occurances of a TAG within an XML string and replaces the tag's value with a passed in value

MSQL/Groovy Files or API Endpoints:
    assign_value_to_all_xml_tags.groovy

Required Inputs:
    * xml - XML String
    * tag - Tag to be searched
    * new_value - New value for Tag

Optional Inputs:
    * None

Outputs:
    * new_xml - xml with values replaced

#########################################################################
Utility Scenario: XML Utilities/Replace XML Tag Value
#########################################################################

Description:
    Finds the first occurance of a TAG within an XML string and replaces the tag's value with a passed in value

MSQL/Groovy Files or API Endpoints:
    Groovy File: get_value_for_first_xml_tag.groovy

Required Inputs:
    * xml - XML String
    * tag - Tag to be searched
    * new_value - New value for Tag

Optional Inputs:
    * None

Outputs:
    * new_xml - xml with values replaced

#########################################################################
Utility Scenario: XML Utilities/Get XML Tag Value
#########################################################################

Description:
    Finds the first occurance of a TAG within an XML string and returns the tag's value'

MSQL/Groovy Files or API Endpoints:
    get_value_for_first_xml_tag.groovy

Required Inputs:
    * xml - XML String
    * tag - Tag to be searched

Optional Inputs:
    * None

Outputs:
    * tag_value - Value from xml tag

#########################################################################
Utility Scenario: XML Utilities/Verify XML Values Are Equal
#########################################################################

Description:
    Verifies that the tag values in two XML strings match based on a set of xml_tags

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * xml_01 - First XML string being compared
    * xml_02 - Second XML string being compared
    * xml_tags - comma separated string of xml tags to be compared

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: XML Utilities/Verify List of XML Tags and Values
#########################################################################

Description:
    Verify a comma seperated list of values match the a list of XML tags.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * xml - XML string
    * xml_tag_list - Comma seperated list of tags to be replaced
    * xml_value_list - Comma seperate list of values for tags

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: XML Utilities/Replace List of XML Tags
#########################################################################

Description:
    Alter an XML string by replacing a set of tag values with passed in values. First tag found is changed.

MSQL/Groovy Files or API Endpoints:
    assign_value_to_first_xml_tag.groovy

Required Inputs:
    * xml - Original XML (warning - this value is altered)
    * xml_tag_list - Comma seperated list of tags to be replaced
    * xml_value_list - Comma seperate list of values for tags

Optional Inputs:
    * None

Outputs:
    * xml - XML with tag values updated Working variables that are altered tag, new_value, new_xml

#########################################################################
Utility Scenario: XML Utilities/Replace List of All XML Tags
#########################################################################

Description:
    Alter an XML string by replacing a set of tag values with passed in values. All tags are changed.

MSQL/Groovy Files or API Endpoints:
    assign_value_to_all_xml_tags.groovy

Required Inputs:
    * xml - Original XML (warning - this value is altered)
    * xml_tag_list - Comma seperated list of tags to be replaced
    * xml_value_list - Comma seperate list of values for tags

Optional Inputs:
    * None

Outputs:
    * xml - XML with tag values updated

#########################################################################
Utility Scenario: XML Utilities/Get First XML Value
#########################################################################

Description:
    Get the value from an XML tag from an XML string xml_01

MSQL/Groovy Files or API Endpoints:
    get_value_for_first_xml_tag.groovy

Required Inputs:
    * xml_01 - XML String

Optional Inputs:
    * None

Outputs:
    * tag_value_01 - Value of tag from xml_01

#########################################################################
Utility Scenario: XML Utilities/Get Second XML Value
#########################################################################

Description:
    Get the value from an XML tag from an XML string xml_01

MSQL/Groovy Files or API Endpoints:
    get_value_for_first_xml_tag.groovy

Required Inputs:
    * xml_01 - XML String

Optional Inputs:
    * None

Outputs:
    * tag_value_02 - Value of tag from xml_01


###############################################################
Utility Name: API Inventory Utilities
Utility File: API Inventory Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios to facilitate interaction with the Inventory endpoints in the Blue Yonder API

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: API

Public Scenarios:
    * API Create Inventory  - Creates inventory using the attributes specified by the parameters
    * API Remove Inventory  - Removes inventory by identifier

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: API Inventory Utilities/API Create Inventory
#########################################################################

Description:
    Creates inventory using the attributes specified by the parameters

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * wh_id - Warehouse ID
    * invtid - Inventory Identifier
    * prtnum - Item Number
    * ftpcod - Footprint Code
    * stoloc - Storage Location
    * untqty - Unit Quantity

Optional Inputs:
    * oprcod - Operation Code (for adjustment) - default is "INVADJ"
    * reacod - Reason Code (for adjustment) - default is "ADJ-ACCEPT"
    * invsts - Inventory Status Code - default is "A"
    * prt_client_id - Item Client ID - If not specified, uses the value of client_id

Outputs:
    * alt_prtnum - The Alternate Item Number

#########################################################################
Utility Scenario: API Inventory Utilities/Public API Create Inventory
#########################################################################

Description:
    Creates inventory using the public Inventory Adjustments endpoint

MSQL/Groovy Files or API Endpoints:
    /api/inventory/v1beta/adjustments

Required Inputs:
    * wh_id - Warehouse ID
    * invtid - Inventory Identifier
    * prtnum - Item Number
    * ftpcod - Footprint Code
    * stoloc - Storage Location
    * untqty - Unit Quantity

Optional Inputs:
    * oprcod - Operation Code (for adjustment) - default is "INVADJ"
    * reacod - Reason Code (for adjustment) - default is "ADJ-ACCEPT"
    * invsts - Inventory Status Code - default is "A"
    * prt_client_id - Item Client ID - If not specified, uses the value of client_id (this happens in Environment.feature)

Outputs:
    * alt_prtnum - The Alternate Item Number

#########################################################################
Utility Scenario: API Inventory Utilities/API Remove Inventory
#########################################################################

Description:
    This scenario removes an inventory identifier

MSQL/Groovy Files or API Endpoints:
    /api/inventory/v1beta/inventory/<invtid>

Required Inputs:
    * wh_id - Warehouse ID
    * invtid - Inventory Identifier

Optional Inputs:
    * reacod - Reason Code
    * adjref1 - Adjustment Reference 1
    * adjref2 - Adjustment Reference 2

Outputs:
    * None


###############################################################
Utility Name: API Item Utilities
Utility File: API Item Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios to facilitate interaction with the Item endpoints in the Blue Yonder API

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: API

Public Scenarios:
    * API Get Alternate Item Number  - Returns the alternate item number (UPC, GTIN, etc.) associated with an item

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: API Item Utilities/API Get Alternate Item Number
#########################################################################

Description:
    This scenario returns an alternate item number based on the provided item number. Both the private and public APIs support this operation, so both implementations are provided, 
    as the private implementation should run marginally faster.


MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * wh_id - Warehouse ID
    * prtnum - Item Number
    * prt_client_id - Item Client ID
    * alt_prt_typ - Alternate Item Type

Optional Inputs:
    * uomcod - UOM Code

Outputs:
    * alt_prtnum - The Alternate Item Number

#########################################################################
Utility Scenario: API Item Utilities/Public API Get Alternate Item Number
#########################################################################

Description:
    This scenario returns an alternate item number based on the provided item number, using the Blue Yonder Public API

MSQL/Groovy Files or API Endpoints:
    /api/item/v1beta/items/<ResourceID>/alternates

Required Inputs:
    * wh_id - Warehouse ID
    * prtnum - Item Number
    * prt_client_id - Item Client ID
    * alt_prt_typ - Alternate Item Type

Optional Inputs:
    * uomcod - UOM Code

Outputs:
    * alt_prtnum - The Alternate Item Number

#########################################################################
Utility Scenario: API Item Utilities/Private API Get Alternate Item Number
#########################################################################

Description:
    This scenario returns an alternate item number based on the provided item number, using the Blue Yonder Private API

MSQL/Groovy Files or API Endpoints:
    /ws/wm/alternateItems

Required Inputs:
    * wh_id - Warehouse ID
    * prtnum - Item Number
    * prt_client_id - Item Client ID
    * alt_prt_typ - Alternate Item Type

Optional Inputs:
    * uomcod - UOM Code

Outputs:
    * alt_prtnum - The Alternate Item Number


###############################################################
Utility Name: API Receiving Utilities
Utility File: API Receiving Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios to facilitate interaction with the Receiving endpoints in the Blue Yonder API

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: API

Public Scenarios:
    * API Create Inbound Shipment  - Creates an inbound shipment with the specified attributes

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: API Receiving Utilities/API Create Inbound Shipment
#########################################################################

Description:
    Creates an inbound shipment with the specified attributes

MSQL/Groovy Files or API Endpoints:
    /api/receiving/v1beta/inboundShipments

Required Inputs:
    * wh_id - Warehouse ID
    * trknum - Inbound Shipment Number

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: API User Utilities
Utility File: API User Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios to facilitate interaction with the User endpoints in the Blue Yonder API

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: System Administration

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: API

Public Scenarios:
    * API List Warehouses for Current User  - Returns a list of all the warehouses the current user is authorized to use
    * API Verify User Is Authorized for Warehouse  - Determines whether the current user is authorized for a specific warehouse

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: API User Utilities/API List Warehouses for Current User
#########################################################################

Description:
    This scenario returns a list of all the warehouses the current user is authorized to use

MSQL/Groovy Files or API Endpoints:
    /api/user/v1beta/currentUser/warehouses

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: API User Utilities/API Verify User Is Authorized for Warehouse
#########################################################################

Description:
    This scenario scans the list of warehouses where the current user is authorized and attempts to locate wh_id

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * wh_id - The warehouse ID

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: API Utilities
Utility File: API Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios to facilitate interaction with the Blue Yonder APIs

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: API

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: API

Public Scenarios:
    * API Request  - A generic helper scenario that handles all API requests to the BY API
    * API Build Simple JSON Object  - Build a simple, flat JSON object using the specified variable names
    * API Build Complex JSON Object  - Build a complex JSON object using variable replacement/expansion
    * API Generate Resource ID  - Generates a Blue Yonder Resource ID by converting a flat JSON object to Base64
    * API Generate Query String - Generates a properly-formatted and properly - escaped URL query string
    * API Find Value in JSON Array  - Searches a JSON array for a specific value
    * API Validate Required Arguments  - Validates that the specified variables are populated
    * API Translate Variable Names  - Translates DB field names to API field names
    * API Retrieve Values from JSON Path  - Retrieves values from a JSON object and translates API field names back to DB field names
    * API Process Optional Arguments - Scans a comma - separated list, validates the variables are populated, then translates them to API field names

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: API Utilities/API Request
#########################################################################

Description:
    This scenario performs the desired HTTP request after performing and/or validating authentication

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * api_method - HTTP method to use (GET, POST, PUT, PATCH, DELETE)
    * api_endpoint - Endpoint to query

Optional Inputs:
    * api_parameters - Comma-separated list of request parameters (for GET or DELETE)
    * request_json - JSON message to include in the request body (for POST, PUT, PATCH)

Outputs:
    * response_json - The JSON HTTP response

#########################################################################
Utility Scenario: API Utilities/API Authenticate
#########################################################################

Description:
    This scenario attempts to authenticate against the authentication endpoint using the supplied username and password. If authentication is successful, then the resulting session 
    cookie will be stored for subsequent API calls. If authentication fails, an error is thrown.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * api_username - Username
    * api_password - Password

Optional Inputs:
    * None

Outputs:
    * api_cookie - The session cookie

#########################################################################
Utility Scenario: API Utilities/API Build Simple JSON Object
#########################################################################

Description:
    Builds a simple JSON object using the variables specified in the "columns" parameter. It is not capable of producing arrays or nested JSON objects. Also, it treats all values as Strings

MSQL/Groovy Files or API Endpoints:
    build_simple_json_object.groovy

Required Inputs:
    * columns - Comma-separated list of column names

Optional Inputs:
    * None

Outputs:
    * json_string - JSON string

#########################################################################
Utility Scenario: API Utilities/API Build Complex JSON Object
#########################################################################

Description:
    Builds a complex JSON object using the structure specified in the "structure" parameter. Variables are prefixed by @ and will be interpolated automatically

MSQL/Groovy Files or API Endpoints:
    build_complex_json_object.groovy

Required Inputs:
    * structure - The structure of the JSON object. See Groovy script for a more detailed explanation

Optional Inputs:
    * None

Outputs:
    * json_string - JSON string

#########################################################################
Utility Scenario: API Utilities/API Generate Resource ID
#########################################################################

Description:
    Generates a Blue Yonder resource ID based on a list of variables and their values. Resulting value can be used to uniquely identify resources in the Public API.

MSQL/Groovy Files or API Endpoints:
    base64_encode.groovy

Required Inputs:
    * columns - Comma-separated list of column names

Optional Inputs:
    * None

Outputs:
    * resource_id - Resource ID

#########################################################################
Utility Scenario: API Utilities/API Generate Query String
#########################################################################

Description:
    Generates a properly-formatted, URL-encoded query string

MSQL/Groovy Files or API Endpoints:
    generate_query_string.groovy

Required Inputs:
    * columns - Comma-separated list of column names

Optional Inputs:
    * None

Outputs:
    * query_string - Query String

#########################################################################
Utility Scenario: API Utilities/API Find Value in JSON Array
#########################################################################

Description:
    Searches a JSON array for a specific value

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * json - The JSON object to search
    * array_path - The JSONPath of the array
    * validation_paths - Comma-separated list of JSONPaths (relative to the array) to validate
    * validation_values - Comma-separated list of values (relative to validation_paths) to match against

Optional Inputs:
    * None

Outputs:
    * result_path - The JSONPath of the value that matched the criteria

#########################################################################
Utility Scenario: API Utilities/API Validate Required Arguments
#########################################################################

Description:
    Validates that the specified variables are populated

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * required_args - Comma-separated list of variables that are required. Error will be thrown if one of the corresponding variables is unassigned or empty

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: API Utilities/API Translate Variable Names
#########################################################################

Description:
    Translates DB field names to API field names

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: API Utilities/API Retrieve Values from JSON Path
#########################################################################

Description:
    Retrieves values from a JSON object and translates API field names back to DB field names

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * json - the JSON object
    * json_path - the path within the JSON object
    * return_fields - comma-separated list of fields to retrieve

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: API Utilities/API Process Optional Arguments
#########################################################################

Description:
    Scans a list of optional arguments (using DB field names) to see which ones have values, then builds appends to $api_parameters (using API field names)

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * arg_list - Comma-separated list of optional arguments to scan

Optional Inputs:
    * None

Outputs:
    * api_parameters - Comma-separated list of API field names


###############################################################
Utility Name: API Yard Utilities
Utility File: API Yard Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios to facilitate interaction with the Yard endpoints in the Blue Yonder API

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: API

Public Scenarios:
    * API List Transport Equipment  - List Transport Equipment matching criteria
    * API Get Transport Equipment ID  - Returns the unique identifier of a Transport Equipment based on the criteria
    * API Check In Transport Equipment  - Check in transport equipment by ID
    * API Close Transport Equipment  - Close transport equipment by ID

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: API Yard Utilities/API List Transport Equipment
#########################################################################

Description:
    This scenario lists transport equipment matching the criteria

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * carcod - Carrier
    * trlr_id - Transport Equipment ID
    * trlr_num - Transport Equipment Number

Outputs:
    * None

#########################################################################
Utility Scenario: API Yard Utilities/API Get Transport Equipment ID
#########################################################################

Description:
    Returns the unique identifier of a Transport Equipment based on the criteria. If the criteria is too generic and multiple options are returned, an error is thrown

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * carcod - Carrier
    * trlr_id - Transport Equipment ID
    * trlr_num - Transport Equipment Number

Outputs:
    * trlr_id - Transport Equipment ID
    * trlr_num - Transport Equipment Number
    * carcod - Carrier Code
    * trlr_stat - Transport Equipment Status
    * trlr_cod - Transport Equipment Type (SHIPPING or RECEIVING_EQUIPMENT_TYPE)

#########################################################################
Utility Scenario: API Yard Utilities/API Check In Transport Equipment
#########################################################################

Description:
    This scenario checks in a transport equipment (referenced by the ID) using the specified dock door

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Transport Equipment ID
    * wh_id - Warehouse ID
    * yard_loc - Dock Door

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: API Yard Utilities/API Close Transport Equipment
#########################################################################

Description:
    This scenario closes transport equipment by ID

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Transport Equipment ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: API Yard Utilities/Public API List Transport Equipment
#########################################################################

Description:
    This scenario lists transport equipment using the Blue Yonder Public API

MSQL/Groovy Files or API Endpoints:
    /api/yard/v1beta/transportEquipment

Required Inputs:
    * None

Optional Inputs:
    * carcod - Carrier
    * trlr_id - Transport Equipment ID
    * trlr_num - Transport Equipment Number

Outputs:
    * None

#########################################################################
Utility Scenario: API Yard Utilities/Private API List Transport Equipment
#########################################################################

Description:
    This scenario lists transport equipment using the Blue Yonder Private API

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * carcod - Carrier
    * trlr_id - Transport Equipment ID
    * trlr_num - Transport Equipment Number

Outputs:
    * None

#########################################################################
Utility Scenario: API Yard Utilities/Public API Check In Transport Equipment
#########################################################################

Description:
    This scenario checks in transport equipment using the Blue Yonder Public API

MSQL/Groovy Files or API Endpoints:
    /api/yard/v1beta/transportEquipment/<trlr_id>/checkIn

Required Inputs:
    * trlr_id - Transport Equipment ID
    * wh_id - Warehouse ID
    * yard_loc - Dock Door

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: API Yard Utilities/Private API Check In Transport Equipment
#########################################################################

Description:
    This scenario checks in transport equipment using the Blue Yonder Private API

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Transport Equipment ID
    * wh_id - Warehouse ID
    * yard_loc - Dock Door

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: API Yard Utilities/Public API Close Transport Equipment
#########################################################################

Description:
    This scenario closes transport equipment using the Blue Yonder Public API

MSQL/Groovy Files or API Endpoints:
    /api/yard/v1beta/transportEquipment/<trlr_id>/close

Required Inputs:
    * trlr_id - Transport Equipment ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: API Yard Utilities/Private API Close Transport Equipment
#########################################################################

Description:
    This scenario closes transport equipment using the Blue Yonder Private API

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Transport Equipment ID

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Mobile Carton Picking Utilities
Utility File: Mobile Carton Picking Utilities.feature
###############################################################

Utility Description:
    Utilities to perform Carton Picking in the Mobile App

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Public Scenarios:
    * Mobile Perform Carton Picks for Order  - Given an Order Number, performs ever Carton Pick for it
    * Mobile Undirected Carton Picking  - Performs an entire batch of carton picking

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Mobile Carton Picking Utilities/Mobile Perform Carton Picks for Order
#########################################################################

Description:
    From the Build Batch screen, given an order number, performs the entirety of the associated carton picks.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ordnum - The order that will be carton picked

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Carton Picking Utilities/Mobile Undirected Carton Picking
#########################################################################

Description:
    This scenario performs Carton Picking to completion from the Order Pick screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * cancel_pick_flag - If "TRUE" then pick will be Cancel with no reallocation
    * cancel_code - Cancel code to enter. Default C-N-R (cancel no reallocation)
    * error_location_flag - If canceling pick, show location be errored (Default=FALSE)
    * short_pick_flag - should the pick be shorted (default=FALSE) (short pick is automatically followed with a cancel pick)
    * short_pick_qty - Amount to pick when short picking (default is 1)
    * single_pick_flag - Indicates the utility should exit after first pick is completed
    * override_srcloc - Overrides the valued enterd for source location (unassigned after entry)
    * override_src_id - Overrides the valued enterd for source Id (unassigned after entry)
    * override_prtnum - Overrides the valued enterd for part number (unassigned after entry)
    * override_pick_qty - Overrides the valued enterd for pick quantity (unassigned after entry)
    * override_uomcod - Overrides the valued enterd for the UOM code (unassigned after entry)
    * skip_deposit_flag - Indicates the scenario should return before performing deposit logic (unassigned after use)(default=FALSE)

Outputs:
    * picks_confirmed - The number of picks confirm by this call this scenario

#########################################################################
Utility Scenario: Mobile Carton Picking Utilities/Mobile Deposit After Carton Picking
#########################################################################

Description:
    Perform Post Carton Picking deposit.  This should be replaced by standard deposit scenario

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Carton Picking Utilities/Mobile Build Batch for Undirected Carton Picking
#########################################################################

Description:
    This scenario adds a single carton number to a batch.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ctnnum - The Carton Number to add to the batch

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Mobile Counting Utilities
Utility File: Mobile Counting Utilities.feature
###############################################################

Utility Description:
    These Utility Scenarios perform actions specific to Mobile Counting activities

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Public Scenarios:
    * Mobile Inventory Perform LPN Count  - Perform LPN Count process
    * Mobile Inventory Count Process Directed Work Screen  - process initial directed work screen for a count
    * Mobile Inventory Count Enter Batch and Location Undirected Work  - enter count batch and stoloc and process count screen
    * Mobile Inventory Count Complete Undirected Work  - Check for completion of undirected count
    * Mobile Inventory Audit Count Enter Batch and Location Undirected Work  - enter the count batch and the location in Undirected work mode
    * Mobile Inventory Audit Count Perform Count  - perform the audit count operation
    * Mobile Inventory Audit Count Complete Count  - complete the audit count operation
    * Mobile Inventory Audit Count Enter Location Directed Work  - Enter Location in Directed Mode work mode
    * Mobile Inventory Audit Count Add LPN  - Add LPN during an audit count by counting an item not in the audit's location
    * Mobile Inventory Perform Detail Count  - Perform Detail Count process
    * Mobile Inventory Perform Summary Count  - Perform Summary Count process
    * Mobile Manual Count Process  - Perform Manual Count

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Manual Count Process
#########################################################################

Description:
    Handles the logic for manual count process. Selects an LPN or stoloc based on input, and proceeds to perform a manual count

MSQL/Groovy Files or API Endpoints:
    get_inventory_details_for_manual_count.msql
    get_numUoms_by_part_and_footprint.msql

Required Inputs:
    * create_mismatch - Specifies whether to create a count mismatch (TRUE|FALSE)
    * stoloc - Storage location where count will occur
    * man_cnt_mode - Specifies whether the manual count should be performed at "LOAD", "SUB" or "DETAIL" level

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Inventory Perform Summary Count 
#########################################################################

Description:
    Logic to process a Summary Count from the Cycle Count Screen. Can handle case where a singular and specified prtnum and prt_client_id are specified and also case where just 
    the stoloc is specified and all items in the location are counted.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the count will take place and if this is the only input, will count all items in the location.
    * cntbat - Count Batch we are working on

Optional Inputs:
    * create_mismatch - (TRUE|FALSE) specifies if the quantity should be incremented to generate a mismatch.
    * blind_counting - (TRUE|FALSE) specifies if the prtnum and prt_client_id should be entered or just ENTER responses.
    * prtnum - part, if specified along with prt_client_id will count just this prtnum in this stoloc.
    * prt_client_id - client ID. if specified along with prtnum will count just this prtnum in this stoloc.

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Inventory Perform Detail Count 
#########################################################################

Description:
    Logic to process a Detail Count from the Detail Cycle Count Screen. Can handle case where a singular and specified lodnum, prtnum and prt_client_id are specified and 
    also case where just the stoloc is specified and all items in the location are counted.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the count will take place and if this is the only input, will count all items in the location.
    * cntbat - Count Batch we are working on

Optional Inputs:
    * lodnum - load number
    * create_mismatch - (TRUE|FALSE) specifies if the quantity should be incremented to generate a mismatch.
    * blind_counting - (TRUE|FALSE) specifies if the prtnum and prt_client_id should be entered or just ENTER responses.
    * prtnum - part, if specified along with prt_client_id will count just this prtnum in this stoloc.
    * prt_client_id - client ID. if specified along with prtnum will count just this prtnum in this stoloc.

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Inventory Audit Count Enter Location Directed Work
#########################################################################

Description:
    For Mobile Count Audit, on Count Audit Screen, enter the count location

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Storage location where audit will take place

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Inventory Audit Count Add LPN
#########################################################################

Description:
    For Mobile Count Audit, enter lodnum that does not exist in location and add new inventory relative to that lodnum/prtnum

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - lodnum to add to location during audit
    * prtnum - part number for new inventory
    * untqy - quantity of prtnum to add into inventory

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Inventory Audit Count Perform Count
#########################################################################

Description:
    For Mobile Count Audit, perform the audit count operation.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - load number
    * prtnum - part number
    * cnt_qty - inventory quantity entered in audit count

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Inventory Audit Count Enter Batch and Location Undirected Work
#########################################################################

Description:
    For Mobile Count Audit, on Count Audit Screen, enter the count batch and the location

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * cnt_id - Count batch for the audit
    * stoloc - Storage location where audit will take place

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Inventory Count Process Directed Work Screen
#########################################################################

Description:
    process initial directed work screen for a count

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Inventory Count Enter Batch and Location Undirected Work
#########################################################################

Description:
    From the Cycle Count Menu, enter the count batch and storage location infomation

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the count will take place
    * cntbat - Count Batch we are working on

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Inventory Count Complete Undirected Work
#########################################################################

Description:
    After count has completed, check screen to make sure count it complete and process.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Inventory Summary Count Enter Blind or Part Info
#########################################################################

Description:
    While on the Cycle Count screen, enter the prtnum and prt_client_id OR if blind_counting is set, just press ENTER for these values.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * blind_counting - (TRUE|FALSE) specifies if the prtnum and prt_client_id should be entered or just ENTER responses.

Optional Inputs:
    * prtnum - specified part
    * prt_client_id - specified client ID

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Inventory Detail Count Enter Blind or Part Info
#########################################################################

Description:
    While on the Count Adjustment screen, enter the prtnum and prt_client_id OR if blind_counting is set, just press ENTER for these values.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * blind_counting - (TRUE|FALSE) specifies if the prtnum and prt_client_id should be entered or just ENTER responses.
    * lodnum - the LPN to count relative to stoloc

Optional Inputs:
    * prtnum - specified part
    * prt_client_id - specified client ID

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Inventory Count Enter Blind or Part Info
#########################################################################

Description:
    While on the Cycle Count screen, enter the prtnum and prt_client_id OR if blind_counting is set, just press ENTER for these values.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * blind_counting - (TRUE|FALSE) specifies if the prtnum and prt_client_id should be entered or just ENTER responses.

Optional Inputs:
    * prtnum - specified part
    * prt_client_id - specified client ID

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Enter Count Quantity
#########################################################################

Description:
    Enters the quantity (correct or mismatched) in the quantity capture count screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * untqty - driven from the previous scenarios Inventory Count Get untqty and numUOMs and Calculate Quantity Mismatch Information for Count Zero.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Inventory Count Process Quantity Capture
#########################################################################

Description:
    While on the Quantity Capture screen, call scenario to get untqty and numUOMs relative to the stoloc/prtnum. 
    Use this data to enter for each UOM the current quantity. If the script is asked to generate mismatch on quantity (create_mismatch) increment the quantity by untqty_mismatch_increment setting.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * create_mismatch - (TRUE|FALSE) specifies if the quantity should be incremented to generate a mismatch.
    * numUOMs - number of unit of measures for this prtnum
    * untqty - the quantity of inventory relative to the prtnum
    * untqty_mismatch_increment - amount to increase quantity to create a mismatch

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Count Process Adjustment
#########################################################################

Description:
    Process Inventory adjustment rererences and serialization if needed

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Check for Count Near Zero Prompt
#########################################################################

Description:
    Checks to see if the count near zero prompt appears on the Mobile App Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Count Near Zero Cycle Count Process
#########################################################################

Description:
    This scenario handles the processing logic for count near zero for picking.

MSQL/Groovy Files or API Endpoints:
    validate_audit_work_generated.msql

Required Inputs:
    * prtnum - item number used for the test case
    * client_id - Client ID

Optional Inputs:
    * match_count - Determines if the count near zero should use the correct quantity, use the incorrect quantity in the first attempt
      and the correct quantity the next attempt, or do a mismatched count. The modes are MISMATCH and REMATCH.

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Process Rematched Count
#########################################################################

Description:
    Handles count near zero processing for an incorrect count in the first attempt and a correct count in the confirmation.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Process Mismatched Count
#########################################################################

Description:
    Handles creating a mismatched count for Count near Zero for picking.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Counting Utilities/Mobile Unexpected Entry during Count for Count Near Zero
#########################################################################

Description:
    Press Enter to go through the unexpected entry popup error during the counting process.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * untqty - driven from the previous scenarios Inventory Count Get untqty and numUOMs and Calculate Quantity Mismatch Information for Count Zero.

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Mobile Inventory Utilities
Utility File: Mobile Inventory Utilities.feature
###############################################################

Utility Description:
    These Utility Scenarios perform actions specific to Mobile Inventory activities

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile

Public Scenarios:
    * Mobile Inventory Adjustment Complete  - Confirm the Inventory Adjustment
    * Mobile Inventory Adjustment Add  - Performs an Inventory Adjustment Add
    * Mobile Inventory Adjustment Delete  - Performs an Inventory adjustment Delete
    * Mobile Inventory Adjustment Change  - Performs an Inventory Adjustment increase or decrease
    * Mobile Inventory Transfer Directed  - Performs an Inventory transfer in directed mode
    * Mobile Inventory Transfer Undirected  - Performs an Inventory transfer
    * Mobile Inventory Status Change  - Performs an Inventory Status Change
    * Mobile Inventory Putaway Directed Override  - Perform putaway. If specified, will override location with F4
    * Mobile Inventory Location Display  - Inventory Location Display relative to specified location
    * Mobile Inventory Display  - Inventory display relative to lodnum and prtnum
    * Mobile Partial Inventory Move  - performs a Partial Inventory Move
    * Mobile Inventory Transfer Invalid  - Performs an inventory move to a storage trailer not at dock door.

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Mobile Inventory Utilities/Mobile Partial Inventory Move
#########################################################################

Description:
    This scenario performs a Partial Inventory Move

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * srclod - LPN to be transferred
    * dstloc - Location where LPN will be deposited
    * move_qty - Quantity to be moved

Optional Inputs:
    * srclod_list - Comma separate list of LPNs to be transferred

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Inventory Utilities/Mobile Inventory Location Display
#########################################################################

Description:
    Enter storage location and process information on Inventory Location Display screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - storage location for display

Optional Inputs:
    * generate_screenshot - if requested generate Mobile App screen shot

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Inventory Utilities/Mobile Inventory Display
#########################################################################

Description:
    Perform an inventory display relative to lodnum and prtnum

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - storage location
    * lodnum - load number

Optional Inputs:
    * prtnum - part number
    * generate_screenshot - if requested generate Mobile App screen shot

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Inventory Utilities/Mobile Inventory Putaway Directed Override
#########################################################################

Description:
    Perform product putaway. If override is set then will override deposit location with F4, If allocate is set, will allocate with F3. If neither is set, will perform standard putaway.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - the LPN that was deposited

Optional Inputs:
    * override_f2 - use F2 to show overrtide code
    * allocate - TRUE|FALSE - will use F3 to allocate location
    * override - TRUE|FALSE - will use F4 to override location
    * over_code - override code
    * over_dep_loc - override deposit location

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Inventory Utilities/Mobile Inventory Status Change
#########################################################################

Description:
    Perform a status change on inventory in the Mobile App

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - Load number being adjusted in
    * reacod - System reason code for the change
    * new_sts - Status change value

Optional Inputs:
    * new_sts_use_f2 - lookup status change value with F2

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Inventory Utilities/Mobile Inventory Transfer Directed 
#########################################################################

Description:
    Perform an Inventory Transfer in Directed work mode

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * srcloc - source location for the transfer
    * dstloc - destination location for the transfer
    * xfer_lodnum - lodnum to transfer

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Inventory Utilities/Mobile Inventory Transfer Undirected
#########################################################################

Description:
    This scenario performs a Full Inv Move

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * xfer_lodnum - LPN to be transferred
    * dstloc - Location where LPN will be deposited

Optional Inputs:
    * xfer_lodnum_list - Comma separate list of LPNs to be transferred

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Inventory Utilities/Mobile Inventory Transfer Invalid
#########################################################################

Description:
    Perform an inventory transfer with an storage location not at dock door (should get message about Invalid location)

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * xfer_lodnum - LPN to be transferred
    * dstloc - Invalid location where deposit will first be attempted to (and fail)
    * valid_dstloc - Valid location where deposit will eventually be made to

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Inventory Utilities/Mobile Inventory Adjustment Change
#########################################################################

Description:
    Perform an Inventory Adjustment Change to increase or decrease the amount of inventory

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the adjustment will take place
    * lodnum - Load number that was added
    * reacod - System reason code for adjustment.
    * adjref1 - Adjustment reference 2 (defaults to prtnum value)
    * new_qty - The new quantity we want to adjust to (increase/decrease)

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Inventory Utilities/Mobile Inventory Adjustment Delete
#########################################################################

Description:
    Conduct a mobile inventory adjustment delete operation.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the adjustment will take place
    * lodnum - Load number that was added

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Inventory Utilities/Mobile Inventory Adjustment Complete
#########################################################################

Description:
    Complete and confirm an Inventory Adjustment relative to the Storage Location

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the adjustment will take place
    * dialog_message - message you anticipate seeing in dialog box

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Inventory Utilities/Mobile Inventory Adjustment Add
#########################################################################

Description:
    Perform an Inventory Adjustment to Add Inventory to a specified Location

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the adjustment will take place
    * lodnum - Load number that was added
    * prtnum - Valid part number that is assigned in your system
    * client_id - Client for the adjustment inventory
    * reacod - System reason code for adjustment/add
    * invsts - Inventory status
    * lotnum - Lot Number for item to be added
    * ftpcod - Footprint code for item to be added
    * uom - Unit of measure
    * adjref1 - Adjustment reference 2 (defaults to prtnum value)
    * untqty - The quantity of inventory we want to add

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Inventory Utilities/Mobile Inventory Adjustment References
#########################################################################

Description:
    Add Adjustment References and Reason for an adjustment operation

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * reacod - System reason code for adjustment.
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Inventory Utilities/Mobile Inventory Adjustment Menu
#########################################################################

Description:
    Traverse to the Mobile Inventory Adjustment Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Mobile List Picking Utilities
Utility File: Mobile List Picking Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios to perform List Picking in the Mobile App

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Public Scenarios:
    * Mobile Perform Directed List Pick for Order  - Performs Directed List Pick For a Given Order From Directed Work Menu
    * Mobile Perform Undirected List Pick for Order  - Performs Undirected List Pick For a Given Order From Undirected Menu
    * Mobile Work Assignment Menu  - Navigates From Undirected Menu To Work Assignment Menu
    * Mobile Perform Picks for Work Assignment  - Performs all the picks to complete a pick list

Utility Assumptions:
    * None

Utility Notes:
    * See Scenario Headers for required inputs.

#########################################################################
Utility Scenario: Mobile List Picking Utilities/Mobile Perform Directed List Pick for Order
#########################################################################

Description:
    From the Directed Work screen, given an order number/operation code/username, performs the entirety of the associated List Picks.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * oprcod - set to the List picking operation code
    * username - the user assigned to or user to assign to
    * ordnum - The order that will be List picked

Optional Inputs:
    * cancel_and_reallocate - Will cancel the List Pick and reallocate if set to "true"

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile List Picking Utilities/Mobile Perform Undirected List Pick for Order
#########################################################################

Description:
    Given an order number, performs the entirety of the associated Undirected List Picks.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * oprcod - set to the List picking operation code
    * ordnum - The order that will be List picked

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile List Picking Utilities/Mobile Perform Picks for Work Assignment
#########################################################################

Description:
    This scenario performs List Picking to completion from the Work Assignment screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * list_id - pick list to be picked

Optional Inputs:
    * cancel_pick_flag - If "TRUE" then pick will be Cancel with no reallocation
    * cancel_code - Cancel code to enter. Default C-N-R (cancel no reallocation)
    * error_location_flag - If canceling pick, show location be errored (Default=FALSE)
    * short_pick_flag - should the pick be shorted (default=FALSE) (short pick is automatically followed with a cancel pick)
    * short_pick_qty - Amount to pick when short picking (default is 1)
    * single_pick_flag - Indicates the utility should exit after first pick is completed
    * override_srclod - Overrides the value entered for source load (unassigned after entry)
    * override_srcloc - Overrides the value entered for the source location (unassigned after entry)
    * override_prtnum - Overrides the value entered for part number (unassigned after entry)
    * override_pick_qty - Overrides the value entered for pick quantity (unassigned after entry)
    * override_uomcod - Overrides the value entered for the UOM code (unassigned after entry)

Outputs:
    * picks_confirmed - The number of picks confirm by this call this scenario

#########################################################################
Utility Scenario: Mobile List Picking Utilities/Mobile Acknowledge Work Assignment  
#########################################################################

Description:
    This scenario Acknowledges the assigne work assignment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile List Picking Utilities/Mobile Sign on to Work Assignment
#########################################################################

Description:
    This scenario performs List Picking to completion from the Work Assignment screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * list_id - pick list to be picked

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile List Picking Utilities/Mobile List Pick Vehicle Full
#########################################################################

Description:
    Sets down the list to pallet LPN to the final staging location with Equipment Full option. Handles logic to perform the remaining picks using directed work.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile List Picking Utilities/Mobile List Pick Set Down
#########################################################################

Description:
    Sets down the list to pallet LPN to a PND location with Set Down option. Handles logic to resume the list through directed work.

MSQL/Groovy Files or API Endpoints:
    get_pndloc_for_lpck_set_down.msql

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Mobile Loading Utilities
Utility File: Mobile Loading Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios for loading trailers using Mobile App

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile

Public Scenarios:
    * Mobile Perform Undirected LTL Loading  - find the correct door for loading a trailer using Undirected LTL loading
    * Mobile Perform Undirected TL Loading  - find the correct door for loading a trailer using Undirected TL loading
    * Mobile Perform LTL Directed Loading of All LPNs for Truck  - performs Directed LTL of a dock door
    * Mobile Perform TL Directed Loading of All LPNs for Truck  - performs Directed TL of a dock door
    * Mobile Outbound Audit  - performs an outbound audit of a outbound staging location
    * Mobile Outbound Unload and Unpick Shipment  - unloads a shipping trailer and unpicks inventory.

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Mobile Loading Utilities/Mobile Outbound Audit
#########################################################################

Description:
    This scenario will conduct an Outbound audit in the Mobile App. It will also check to see if the audit completed with discrepancies or not. 
    If discrepancies were found it will call scenario to handle the discrepancies in terms of releasing a hold.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - outbound staging location
    * lodnum - load number
    * prtnum - part number
    * stkuom - unit of measure relative to prtnum
    * audqty - quantity to enter during audit (if not equal to untqty then this will generate a mismatch)
    * client_id - client ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Loading Utilities/Mobile Perform Undirected LTL Loading
#########################################################################

Description:
    This scenario will find the correct door for loading a trailer using Undirected LTL loading screen. Then Sign on to the trailer and perform a undirected LTL load of all the LPNs.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Trailer Id
    * trlr_num - Trailer Number
    * dock_door - Dock Door

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Loading Utilities/Mobile Perform Undirected TL Loading
#########################################################################

Description:
    This scenario will find the correct door for loading a trailer using Undirected TL loading screen. Then Sign on to the trailer and perform a undirected TL load of all the LPNs.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Trailer Id
    * trlr_num - Trailer Number
    * dock_door - Dock Door

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Loading Utilities/Mobile Sign onto Undirected TL Loading Door
#########################################################################

Description:
    This scenario will sign into a door for Undirected TL Loading. The logic will also complete a trailer workflow if necessary.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * carcod - Carrier Code for Trailer
    * yard_loc - Yard location of Dock Door

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Loading Utilities/Mobile Perform LTL Directed Loading of All LPNs for Truck 
#########################################################################

Description:
    This scenario performs Directed LTL of a dock door. It performs the loading of all the staged LPNS for a door.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * username - Username signed into Mobile App
    * dock_door - Dock Door being loaded
    * devcod - Device Code

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Loading Utilities/Mobile Perform TL Directed Loading of All LPNs for Truck 
#########################################################################

Description:
    This scenario performs Directed TL of a dock door. It assigns the user to the door, gets the directed work, then it performs the loading of all the staged LPNS for a door.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * username - Username signed into Mobile App
    * dock_door - Dock Door being loaded
    * devcod - Device Code

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Loading Utilities/Mobile Outbound Unload and Unpick Shipment
#########################################################################

Description:
    This scenario unloads picked inventory from a outbound trailer, and unpicks the inventory - depending on the decision variable in the input file.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * shpstg_loc - Ship staging location to unload to

Optional Inputs:
    * None

Outputs:
    * pck_lodnum - last unpicked lodnum

#########################################################################
Utility Scenario: Mobile Loading Utilities/Mobile Loading Sign On
#########################################################################

Description:
    This scenario signs the user into the door. Trailer Workflows are performed if prompted.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * username - Username signed into Mobile App
    * dock_door - Dock Door being loaded
    * devcod - Device Code

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Loading Utilities/Mobile Sign onto Undirected LTL Loading Door
#########################################################################

Description:
    This scenario will sign into a door for Undirected LTL Loading. The logic will also complete a trailer workflow if necessary.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * carcod - Carrier Code for Trailer
    * yard_loc - Yard location of Dock Door

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Loading Utilities/Mobile Outbound Undirected Load LPN to LTL Trailer 
#########################################################################

Description:
    This scenario will pick up and deposit a single LPN on Undirected LTL loading screen. It scans a passed in load number and scans the load to a dock door.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - Load being loaded
    * yard_loc - Dock Door being loaded

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Loading Utilities/Mobile Outbound Trailer Completion
#########################################################################

Description:
    This scenario will process the stop closing logic within the Mobile App. This scenario assumes the Mobile App has just completed trailer loading

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * bol_num - Bill of Lading number
    * pro_num - WMS Pro Num
    * seal_num - Seal number

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Loading Utilities/Mobile Outbound Load LPN to Trailer
#########################################################################

Description:
    This scenario will process the TL/LTL loading screen. It scans a passed in load number and scans the load to a dock door.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - Load being loaded
    * yard_loc - Dock Door being loaded

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Loading Utilities/Mobile Perform Outbound Audit
#########################################################################

Description:
    This scenario will assist in conducting an Outbound audit in the Mobile App. It will enter the needed outbound staging location and lodnum. 
    It will then enter the prtnum, auditted quantity (which can be used to generate a discrepancy), and UOM. It will then press F6 to generate the audit. 
    This routine can be called both in the initial audit and in a recount condition.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * skip_location_lpn - if set this is re-count condition and entering staging location and lodnum is not needed
    * stoloc - outbound staging location
    * lodnum - load number
    * prtnum - part number
    * stkuom - unit of measure relative to prtnum
    * audqty - quantity to enter during audit (if not equal to untqty then this will generate a mismatch)
    * client_id - client ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Loading Utilities/Mobile Initiate and Acknowledge Outbound Audit
#########################################################################

Description:
    Press F6 and complete outbound audit

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - load number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Loading Utilities/Mobile Handle Audit Discrepancies
#########################################################################

Description:
    During an outbound audit, if there were discrepancies found, either fail the test case or perform a re-count.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * discrepancy_action - either fail test (fail) or re-count (recount)

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Mobile Navigation Utilities
Utility File: Mobile Navigation Utilities.feature
###############################################################

Utility Description:
    Utility Scenarios that navigate to certain parts of the Mobile App

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Mobile

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile

Public Scenarios:
    * Mobile Putaway Menu  - Navigate to the Undirected Putwaway screen
    * Mobile Navigate to Directed Work Menu  - From the Undirected Menu, navigates to the Directed Work Menu
    * Mobile Exit Directed Work Mode  - From Directed Work, whatever state it is in, exit the mode.
    * Mobile Navigate to Cycle Count Menu  - From the Undirected Menu, navigates to the Cycle Count Entry screen
    * Mobile Inventory Status Change Menu  - Navigate to the Inventory Status Screen
    * Mobile Navigate to Inventory Transfer Menu  - Navigate to the Inventory Transfer/Move Screen
    * Mobile Inventory Display Menu  - Navigate to Inventory Display Screen
    * Mobile Inventory Location Display Menu  - Navigate to Inventory Location Display Screen
    * Mobile LPN Receiving Menu  - navigates to LPN Receiving menu
    * Mobile Navigate Quickly to Undirected Menu  - Navigate to Undirected Menu Quickly (no checks for deposit needs)
    * Mobile Complete Receiving Menu  - Navigate to the Receiving Complete Rcv Screen
    * Mobile LPN Reverse Receipt Menu  - navigates to the Reverse Order screen
    * Mobile Receiving Without Order Menu  - navigates to the Receive Without Order screen
    * Mobile Receiving Unload Shipment Menu  - Navigate to the Receiving Unload Shipment Screen
    * Mobile Navigate to Audit Count Menu  - From the Undirected Menu, navigates to the Audit Count Entry screen
    * Mobile Navigate to Partial Inventory Move Menu  - Navigate to the Mobile App Partial Inventory Move Screen
    * Mobile Navigate to Select Yard Menu  - Navigate to the Mobile Select Yard Screen
    * Mobile Navigate to Shipment Pickup Equipment Menu  - Navigate to the Mobile Shipment Pickup Equipment Screen
    * Mobile Navigate to Manual Count Menu  - Navigate to the Mobile Manual Count Menu
    * Mobile Navigate to Unload Equipment Menu  - Navigate to the Mobile App Unload Equipment Menu
    * Mobile Navigate to Reopen Equipment Menu  - Navigate to the Mobile App Reopen Equipment Menu
    * Mobile Navigate to LTL Load Menu  - From the Undirected Menu, navigates to the LTL Load Menu
    * Mobile Navigate to Load Equipment Menu  - From the Undirected Menu, navigates to the Load Equipment Menu
    * Mobile Shipping Manual Outbound Audit Menu  - Navigate to Manual Outbound Audit Screen
    * Mobile Navigate to Unpick Menu  - Navigate to the Mobile App unpick menu
    * Mobile Open Pallet Building Menu Option  - From the Undirected Menu, go to the Pallet Build screen
    * Mobile Navigate to Carton Pick Menu  - From the Undirected Menu, goes to the Carton Pick screen
    * Mobile Work Assignment Menu  - Navigates to the Work Assignment screen
    * Mobile Navigate to Pick Product Screen  - Navigate to the Pick Product screen
    * Mobile Navigate to Dispatch Equipment Menu  - Navigate to the Shipping, Dispatch screen
    * Mobile Navigate to Close Equipment Menu  - Navigate to the Shipping, Close screen

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to Pick Product Screen
#########################################################################

Description:
    This scenario Navigates to Pick Product screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Work Assignment Menu
#########################################################################

Description:
    This scenario navigates to the Work Assignment screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to Carton Pick Menu
#########################################################################

Description:
    This scenario navigates to the Carton Pick screen from the Undirected Menu. None Optional: None Outputs: None

MSQL/Groovy Files or API Endpoints:

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Open Pallet Building Menu Option
#########################################################################

Description:
    From the Mobile App's undirected menu screen, open the pallet building menu.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to Unpick Menu
#########################################################################

Description:
    Navigates to the Unpick screen from the Undirected Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Shipping Manual Outbound Audit Menu
#########################################################################

Description:
    Traverse to the Manual Outbound Audit screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to Load Equipment Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Load Equipment Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to LTL Load Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the LTL Load Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to Close Equipment Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Close Equipment Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to Dispatch Equipment Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Dispatch Equipment Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to Reopen Equipment Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Reopen Equipment Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to Unload Equipment Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Unload Equipment Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to Manual Count Menu
#########################################################################

Description:
    Navigate to the Mobile Manual Count Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to Shipment Pickup Equipment Menu
#########################################################################

Description:
    Navigate to the Mobile Shipment Pickup Equipment Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to Select Yard Menu
#########################################################################

Description:
    Navigate to the Mobile Select Yard Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to Partial Inventory Move Menu
#########################################################################

Description:
    Navigate to the Mobile Partial Inventory Move Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to Audit Count Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Audit Count Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Receiving Unload Shipment Menu 
#########################################################################

Description:
    Traverse to the Receiving Upload Ship Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Receiving Without Order Menu 
#########################################################################

Description:
    This scenario navigates to the Receive Without Order Menu from the Undirected Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile LPN Reverse Receipt Menu
#########################################################################

Description:
    This scenario navigates to the Reverse Order Menu from the Undirected Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Putaway Menu
#########################################################################

Description:
    This scenario will navigate to the Undirected Putaway Screen (from the top-level undirected menu)

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Complete Receiving Menu 
#########################################################################

Description:
    Traverse to the Receiving Complete Rcv Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile LPN Receiving Menu
#########################################################################

Description:
    This scenario navigates to the LPN Receiving Menu from the Undirected Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Exit Directed Work Mode
#########################################################################

Description:
    From Directed Work, exit to the Undirected Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to Directed Work Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Directed Work Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to Cycle Count Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Cycle Count Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate to Inventory Transfer Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Inventory Transfer/Move screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Inventory Display Menu
#########################################################################

Description:
    Traverse to the Mobile Inventory Display Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Inventory Location Display Menu
#########################################################################

Description:
    Traverse to the Mobile Inventory Location Display Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Navigation Utilities/Mobile Navigate Quickly to Undirected Menu
#########################################################################

Description:
    Traverse to the top-level Undirected Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Mobile Pallet Building Utilities
Utility File: Mobile Pallet Building Utilities.feature
###############################################################

Utility Description:
    Utilities to perform Pallet Building with the Mobile App.

Utility Author: Tryon Solutions
Utility Type: Regression
Functional Area: Pallet Building

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile

Public Scenarios:
    * Mobile Pallet Building  - Handles the overall flow and logic of Pallet Building functionality

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Mobile Pallet Building Utilities/Mobile Pallet Building
#########################################################################

Description:
    From the Mobile App undirected menu screen, given the pallet building staging location, performs the entirety of the pallet building functionality.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * pb_stage_loc - pallet building staging location

Optional Inputs:
    * pb_max_carton_count - maximum number of cartons that can be built into one pallet

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Pallet Building Utilities/Mobile Process Carton Pallet Build
#########################################################################

Description:
    Handles the looping logic of performing pallet building after the location from which to pallet build is selected

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * carton - Carton number in pallet build staging location

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Pallet Building Utilities/Mobile Complete Pallet
#########################################################################

Description:
    Nests logic to see if the current pallet that is being built has been completed or if it should be completed based off maximum number of cartons to a pallet (pb_max_carton_count)

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * pb_max_carton_count - Maximum number of cartons to a pallet

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Pallet Building Utilities/Mobile Determine Pallet Build Mode
#########################################################################

Description:
    Determines the pallet build mode - new or adding to a pallet based on screen data

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * mode - Determine whether we are using a new pallet or adding to an existing pallet build pallet


###############################################################
Utility Name: Mobile Pallet Picking Utilities
Utility File: Mobile Pallet Picking Utilities.feature
###############################################################

Utility Description:
    Utilities to perform Pallet Picking in the Mobile App

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Public Scenarios:
    * Mobile Perform Pallet Pick for Order  - Performs all Pallet Picks associated with an Order
    * Mobile Perform Undirected Pallet Pick for Order  - Performs all Pallet Picks via Undirected associated with an Order

Utility Assumptions:
    * None

Utility Notes:
    * See Scenario Headers for required inputs.

#########################################################################
Utility Scenario: Mobile Pallet Picking Utilities/Mobile Perform Pallet Pick for Order
#########################################################################

Description:
    From the Directed Work screen, given an order number/operation code/username, performs the entirety of the associated pallet picks.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * oprcod - set to the pallet picking operation code
    * username - the user assigned to or user to assign to
    * ordnum - The order that will be pallet picked

Optional Inputs:
    * cancel_and_reallocate - Will cancel the Carton Pick and reallocate if set to "true"

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Pallet Picking Utilities/Mobile Perform Undirected Pallet Pick for Order
#########################################################################

Description:
    From the Directed Work screen, given an order number/operation code/username, performs the entirety of the associated pallet picks.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * oprcod - set to the pallet picking operation code
    * username - the user assigned to or user to assign to
    * ordnum - The order that will be pallet picked

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Pallet Picking Utilities/Mobile Pallet Picking Process Detail
#########################################################################

Description:
    This scenario performs Pallet Picking to completion from the Directed Work screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Pallet Picking Utilities/Mobile Pallet Picking Undirected Process Detail
#########################################################################

Description:
    This scenario performs List Picking to completion from the Product Pickup screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * wrkref - the Work Reference Number

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Mobile Picking Utilities
Utility File: Mobile Picking Utilities.feature
###############################################################

Utility Description:
    Utilities that are common across all Mobile picking operations

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile

Public Scenarios:
    * Mobile Cancel Pick from Tools Menu  - From the Tools Menu, cancel a pick

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Mobile Picking Utilities/Mobile Cancel Pick from Tools Menu
#########################################################################

Description:
    From the Tools Menu, cancel a pick

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * cancel_code - cancel code - defaults to "C-N-R" if not specified
    * error_location_flag - error location on cancel of pick (TRUE|FALSE)

Optional Inputs:
    * None

Outputs:
    * work_assignment_loop_done - set to TRUE on list pick completion


###############################################################
Utility Name: Mobile Receiving Utilities
Utility File: Mobile Receiving Utilities.feature
###############################################################

Utility Description:
    This Utility contains common scenarios for Mobile Receiving Features

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Public Scenarios:
    * Mobile Undirected Putaway  - performs undirected inbound mobile putaway
    * Mobile Reverse Receipt  - Reverses an order
    * Mobile Process Product Putaway  - Once on Putaway Screen enter putaway method and process
    * Mobile ASN Receiving  - From an opened receipt, performs ASN Receiving
    * Mobile Non-ASN Receiving - From an opened receipt, performs non - ASN Receiving
    * Mobile Receiving Without Order  - receives without order
    * Mobile Unload Shipment  - Process the Unload Shipment Screen
    * Mobile Dispatch Equipment  - Process the dispatch equipment receiving screen
    * Mobile Confirm Dispatch Equipment  - condfirm dispatch of equipment
    * Mobile Complete Receiving  - complete the receiving process from the Complete Rcv screen.
    * Mobile Trigger Product Putaway  - Press F6 and move to Putaway screen
    * Mobile ASN Receiving Non-Trusted Supplier - performs ASN Receiving for a non - trusted supplier
    * Mobile Enter Receive ID  - This scenario enters the receive ID on the Receive Product Screen
    * Mobile Receiving Product Pickup Directed Work  - Process Product Pickup via Directed Work after directed putaway

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Receiving Product Pickup Directed Work
#########################################################################

Description:
    Process Product Pickup via Directed Work after directed putaway

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lpn - LPN of inventory being picked up and deposited after directed putaway

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Enter Receive ID	
#########################################################################

Description:
    This scenario enters the receive ID on the Receive Product Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trknum - receiving truck/ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Complete Receiving
#########################################################################

Description:
    This scenario completes the receiving process from the Complete Rcv screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * yard_loc - yard location, receiving dock door
    * trlr_num - trailer number

Optional Inputs:
    * expect_discrepancies - should we expect descepancies when completing receive
    * complete_rcv_close_equipment - close equipment on complete receiving (default)
    * complete_rcv_close_shipment - close shipment on complete receiving

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Undirected Putaway
#########################################################################

Description:
    This scenario executes an inbound putaway through the Mobile App Assumes you are on the undirected Putaway Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - the LPN that was deposited

Optional Inputs:
    * dep_loc - the deposit location

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Reverse Receipt
#########################################################################

Description:
    This scenario reverses an order given a load number.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - the load to reverse

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile ASN Receiving
#########################################################################

Description:
    From an opened receipt, performs ASN Receiving.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * asn_lodnum - The ASN Load to receive
    * prtnum - The part being received

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Non-ASN Receiving
#########################################################################

Description:
    From an opened receipt, performs non-ASN Receiving.

MSQL/Groovy Files or API Endpoints:
    check_3pl.msql
    check_confirm_create.msql
    check_lodlvl.msql

Required Inputs:
    * rcv_qty - the number to receive
    * prtnum - the part to receive

Optional Inputs:
    * lpn - the load to associate the received goods with, if not populated, will be auto-generated
    * rcv_prtnum - a prtnum to test blind receiving
    * lotnum - a Lot Number to associate with the received prtnum if lot enabled
    * receive_more_flag - TRUE/FALSE determine if screen press Y/N to possible "Receive More" prompts (Def:FALSE)
    * revlvl - Revision Level

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile ASN Receiving Non-Trusted Supplier
#########################################################################

Description:
    From an opened receipt, performs ASN Receiving for a non-trusted supplier

MSQL/Groovy Files or API Endpoints:
    check_3pl.msql

Required Inputs:
    * rcv_qty - the number to receive
    * prtnum - the part to receive
    * asn_lodnum - the load number associated to the ASN

Optional Inputs:
    * rcv_prtnum - the prtnum to be changed on the ASN LPN.
    * rcv_chg_sts - Valid Inv Status, if the inventory status needs to be changed on receipt
    * rcv_qty - quantity to receive, if quantity needs to be changed on receipt
    * rcv_uom - receieve unit of measure
    * chg_qty - flag that prompts recieve quantity to be overriden, if receive quantity needs to be changed upon receipt
    * chg_uom - flag that prompts uom to be overriden, if unit of measure needs to be changed on receipt
    * chg_sts - flag that prompts invsts to be overriden, if the inventory status needs to be changed on receipt
    * lotnum - a Lot Number to associate with the received prtnum if lot enabled
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * expqty - The number expected- to be inputted as receive quantity

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Unload Shipment
#########################################################################

Description:
    Process the Unload shipment screen for reveiving. On completion transition to confirmation of trailer workflow.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * yard_loc - Receiving door
    * rec_loc - Location to receive shipment to

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Dispatch Equipment
#########################################################################

Description:
    Process the dispatch equipment screen. On completion confirm the dispatch operation.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * trac_ref - tracking reference information
    * driver_lic - drivers license information
    * driver_nam - drivers name information

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Confirm Dispatch Equipment
#########################################################################

Description:
    Answer Y to dispatch question.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Trigger Product Putaway
#########################################################################

Description:
    Press F6 and move to the Product Putaway Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Receiving Without Order
#########################################################################

Description:
    Scenario to perform Receiving without order n Mobile App.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * rec_quantity - the quantity to be receive
    * lodnum - the load to associate the received goods with
    * prtnum - the part to receive
    * reason - reason for receiveing
    * status - a valid inventory status
    * putaway_method - 1 is Directed, 2 is Sorted, 3 is Undirected.
    * deposit_loc - If it is Storage location provide:storage_loc - Else for Receive Stage location provide:rec_loc

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Process Product Putaway
#########################################################################

Description:
    From Product Putaway Screen, input the putaway method and process responses

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * putaway_method - 1 is Directed, 2 is Sorted, 3 is Undirected

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Receiving Input Load
#########################################################################

Description:
    Input asn load number in the receiving screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * asn_lodnum - load number to be input in the receiving screen None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Receiving Process Lot
#########################################################################

Description:
    Input lot number if required during Mobile receiving

MSQL/Groovy Files or API Endpoints:
    check_lot.msql

Required Inputs:
    * lotnum - lot number to be inputted if part is lot enabled.
    * prtnum - part number to check lot on

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Receiving Process Over Receipt
#########################################################################

Description:
    Process Mobile over-receipt error message

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Receiving Process Manufacturing Date
#########################################################################

Description:
    Check to see if the part has an aging profile defined, and handle manufacturing date and default status accordingly.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * age_profile - age profile

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Receiving Process Aging Profile
#########################################################################

Description:
    Check to see if the part has an aging profile defined, and handle accordingly.

MSQL/Groovy Files or API Endpoints:
    check_aging.msql

Required Inputs:
    * prtnum - part number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Process Subload Receiving
#########################################################################

Description:
    Process the capture of sub lpns TODO - need to trigger condition and determin xPath to copy of web screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Mobile Process Detail Receiving
#########################################################################

Description:
    Process the capture of detail lpns TODO - Need to reproduce and get XPaths and wait sequence

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Receiving Utilities/Generate Subload LPN for Receiving
#########################################################################

Description:
    Generate a subload LPN for receiving functions

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * subload_lpn - detail lpn for receiving


###############################################################
Utility Name: Mobile Replenishment Utilities
Utility File: Mobile Replenishment Utilities.feature
###############################################################

Utility Description:
    Utilities that are common across all replenishment operations - including getting and validating data in the Mobile App

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Replenishment

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Public Scenarios:
    * Mobile Replenishment  - performs Case or Pallet Replenishment

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Mobile Replenishment Utilities/Mobile Replenishment
#########################################################################

Description:
    This scenario performs top-level work for a case or pallet replenishment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * palloc - pallet location where replenishment should occur
    * casloc - case location where replenishment should occur

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Replenishment Utilities/Mobile Process Replenishment Pick
#########################################################################

Description:
    From directed work, once you are on the Replenish Pick Screen, process the screen inputs. These inputs are slightly different for case versus pallet replenishments.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * replen_type - either case or pallet

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Mobile Serialization Utilities
Utility File: Mobile Serialization Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios with mobile steps performing serial number capture and confirmation actions both for Picking, Receiving, and Adjustment scenarios

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Serialization

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile

Public Scenarios:
    * Mobile Scan Serial Number Outbound Capture Picking  - perform OUTCAP_ONLY serial number processing for picking
    * Mobile Scan Serial Number Cradle to Grave Picking  - perform CRDL_TO_GRAVE serial number processing for picking
    * Mobile Scan Serial Number Cradle to Grave Receiving  - perform CRDL_TO_GRAVE receiving serial number processing
    * Mobile Validate ASN Serial Number Cradle to Grave Receiving - If ASN receiving serialization, lookup and validate assigned serial numbers

Utility Assumptions:
    * The MOCA and NON User Interface Utility Scenarios are in the Terminal version of this Utility (Terminal Serilization Utilities.feature)
    * There are several prerequisites in order to test items with serialization enabled. The data required for testing serialized items is dependent upon the 
      serialization type assigned to the item (seq_typ) as well as the serial number types assigned to those items.
    * Picking for Outbound Capture items
    * A list of valid serial numbers needs to be available for cycle to support picking with outbound capture serial capture
    * The serial numbers in this file must conform to the serial mask set up for the serial number type
    * The serial number files need to be stored the top-level sub-directory Data/Serial Numbers
    * The file should be named as follows: Serial_List_Outcap_(Serial Number Type).txt where (Serial Number Type) is replaced by a valid serial number type 
      Examples: Serial List Outcap CYCCS01.txt Serial List Outcap CYCCS02.txt
    * Each file should include unique serial number ranges for the serial number type to ensure proper function of the picking scenarios
    * Picking for Cradle to Grave items
    * Cradle to grave serialized items require serial numbers to be assigned to the inventory being picked
    * The cradle to grave scenarios retrieve the serial numbers from the pick source location and use those values for confirmation
    * Receiving for Cradle to Grave items
    * If ASN, the serial numbers need to be assigned to the ASN (or for CNT inventory). This can be done with "Add Serial Numbers for Cradle to Grave" scenario (in this Utility) after the dataset has been loaded.
    * If non-ASN, serial numbers will be captured after inventory has been created.
    * Serial number files for EACH and CASE (for Receiving) are in the Data/Serial Numbers directory. Each file has a max of 100 serial numbers. 
      More can be added if needed. Serial numbers used in Picking and Receiving have different starting numbers (00 for Picking and 99 for Receiving)
    * When inventory is cleaned up the associated serial numbers should also be cleaned up by the test

Utility Notes:
    * None

#########################################################################
Utility Scenario: Mobile Serialization Utilities/Mobile Scan Serial Number Outbound Capture Picking
#########################################################################

Description:
    For OUTCAP_ONLY serialization, for each part extract the serial number type from the screen. Then from serial number file, extract the next serial number and use 
    as input on for screen. Check for errors from that output.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * serial_num_type - serial number type (i.e CYCEA01)
    * serialization_phase - set to PCK

#########################################################################
Utility Scenario: Mobile Serialization Utilities/Mobile Scan Serial Number Cradle to Grave Receiving
#########################################################################

Description:
    For CRDL_TO_GRAVE receiving serialization, for each part extract the serial number type from the screen. Then from serial number file, 
    extract the next serial number and use as input. Check for errors from that output.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * serial_num_type - serial number type (i.e CYCEA01)
    * serialization_phase - set to RCV

#########################################################################
Utility Scenario: Mobile Serialization Utilities/Mobile Scan Serial Number Cradle to Grave Picking
#########################################################################

Description:
    For CRDL_TO_GRAVE serialization, call utility scenario Get Serial Number List for Cradle to Grave who's results will have information about the srcloc/prtnum's 
    lookup of inv_ser_num table results. Use that data and the serial number from the query to enter into the Mobile App screens serial number input and look for errors.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * serialization_phase - set to PCK

#########################################################################
Utility Scenario: Mobile Serialization Utilities/Mobile Validate ASN Serial Number Cradle to Grave Receiving
#########################################################################

Description:
    For CRDL_TO_GRAVE serialization, call utility scenario Get Serial Number List for Cradle to Grave for ASN Receiving who's results will have information about 
    the srcloc/prtnum's lookup of inv_ser_num table results. Use that data and the serial number from the query to enter into the Mobile App screens serial number input and look for errors.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * serialization_phase - set to RCV

#########################################################################
Utility Scenario: Mobile Serialization Utilities/Mobile Check for Serial Capture Errors
#########################################################################

Description:
    Scenario will look for strings in the mobile and detect error conditions for a serialization input/action and fail the step.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Mobile Trailer Move Utilities
Utility File: Mobile Trailer Move Utilities.feature
###############################################################

Utility Description:
    This Utility contains scenarios to perform actions specific to trailer moves in the Mobile App

Utility Author: Tryon Solutions
Utility Type: Regression
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Public Scenarios:
    * Mobile Trailer Move - top - level move scenario in Mobile App
    * Mobile Verify and Escalate Directed Work  - verifies if it is directed work and escalates if appropriate

Utility Assumptions:
    * None

Utility Notes:
    * MOCA scenarios in support of this Utility are in Terminal Trailer Move Utilities.feature

#########################################################################
Utility Scenario: Mobile Trailer Move Utilities/Mobile Trailer Move
#########################################################################

Description:
    This scenario moves a trailer using the Mobile App

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - Trailer Number
    * carcod - Carrier Code
    * move_to_dock_loc - Location trailer will be moved to
    * check_in_dock_loc - Location trailer will be checked in to
    * work_queue_or_immediate - Variable that indicates when the move is performed

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Trailer Move Utilities/Mobile Verify and Escalate Directed Work
#########################################################################

Description:
    This scenario verifies directed work is required and escalates it if so

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - Trailer Number
    * carcod - Carrier Code
    * username - User performing the work
    * move_to_dock_loc - Location trailer will be moved to
    * check_in_dock_loc - Location trailer will be checked in to
    * work_queue_or_immediate - Variable that indicates when the move is performed

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Trailer Move Utilities/Mobile Increase Trailer Move Directed Work Priority
#########################################################################

Description:
    This scenario escalates trailer move directed work Simply call Terminal version given it it's MOCA only.

MSQL/Groovy Files or API Endpoints:
    escalate_trailer_move_directed_work_priority.msql

Required Inputs:
    * trlr_num - Trailer Number
    * carcod - Carrier Code
    * username - User performing the work
    * move_to_dock_loc - Location trailer will be moved to
    * check_in_dock_loc - Location trailer will be check in to

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Mobile Trailer Utilities
Utility File: Mobile Trailer Utilities.feature
###############################################################

Utility Description:
    This Utility stores Trailer Utility functions for the Mobile App

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Outbound Trailer

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile

Public Scenarios:
    * Mobile Outbound Trailer Close  - Closes a trailer using the Mobile App
    * Mobile Outbound Trailer Dispatch  - Dispatches a trailer using the Mobile App
    * Mobile Outbound Trailer Reopen  - This scenario will reopen closed transport equipment

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Mobile Trailer Utilities/Mobile Outbound Trailer Dispatch
#########################################################################

Description:
    This scenario dispatches an outbound trailer using the Mobile App

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * dock_door - Dock Door where tailier is being dispatch

Optional Inputs:
    * trac_ref - tracking reference for dispatch information
    * driver_lic - drivers license for dispatch information
    * driver_nam - drivers name for dispatch information

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Trailer Utilities/Mobile Outbound Trailer Close
#########################################################################

Description:
    This scenario closes a trailer using the Mobile App

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * dock_door - Dock Door being closed

Optional Inputs:
    * seal_num1 - Seal Number 1
    * seal_num2 - Seal Number 2
    * seal_num3 - Seal Number 3
    * seal_num4 - Seal Number 3

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Trailer Utilities/Mobile Outbound Trailer Reopen 
#########################################################################

Description:
    This scenario will reopen the closed Transport Equipment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Trailer ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Trailer Utilities/Mobile Outbound Trailer Document Entry
#########################################################################

Description:
    This scenario enters document numbers

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * bol_num - Bill of Lading number
    * pro_num - WMS Pro Num

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Trailer Utilities/Mobile Outbound Trailer Complete Stop
#########################################################################

Description:
    This scenario completes an outbound stop

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * seal_num - Seal number

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Mobile Unpick Utilities
Utility File: Mobile Unpick Utilities.feature
###############################################################

Utility Description:
    This Utility contains utility scenarios to perform unpick functionality in the Mobile App

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile

Public Scenarios:
    * Mobile Perform Unpick  - Performs a Mobile App unpick operation

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Mobile Unpick Utilities/Mobile Perform Unpick
#########################################################################

Description:
    Performs a Mobile App Unpick operation in Mobile App

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * pck_lodnum - Pick load to be unpicked
    * unpick_partial - Flag indicating partial or full unpick
    * cancod - Cancel Code
    * putaway_method - Type of putaway for unpicked inventory

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Unpick Utilities/Mobile Perform Unpick Partial
#########################################################################

Description:
    Performs a partial Mobile App Unpick.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * client_id - Client
    * prtnum - Part Number
    * unpick_qty - Partial qty to unpick
    * unpick_to_lodnum - LPN to put partial unpicked inventory

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Mobile Utilities
Utility File: Mobile Utilities.feature
###############################################################

Utility Description:
    This Utility contains general Mobile scenarios for the Web

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: General Mobile

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Public Scenarios:
    * Mobile Login  - Login to the Mobile App and process Work Information
    * Mobile Logout  - Will log out from the Mobile App
    * Mobile Set Dialog xPath  - construct xPath to Mobile dialog with expected message
    * Mobile Clear Field  - Uses a shortcut to empty a mobile field
    * Mobile Deposit  - Performs either an Inventory, Load, or Product Deposit.
    * Mobile Start Server Trace  - Starts a Server Trace
    * Mobile Start Device Trace  - Starts a Device Trace
    * Mobile Generate Screenshot  - Generate a a mobile/web screenshot
    * Mobile Check for Input Focus Field  - Check for label of input field with input focus (top of screen)
    * Mobile Wait for Processing  - Waits until the Mobile App is done processing
    * Mobile Set Work Area  - Use F7 and User Options to set Work Area

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Login
#########################################################################

Description:
    This scenario will Navigate to WMS's Mobile App screen and login to the Mobile App. It will also processes work information.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * browser - Browser name (set in Environment by default)
    * mobile_ui - Mobile App URL (set in Environment by default)
    * USERNAME - Username (This value comes from MOCA credentials)
    * PASSWORD - Password (This value comes from MOCA credentials)
    * mobile_credentials - Cycle Credential relative to Mobile testing

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Logout
#########################################################################

Description:
    This scenario will log out of the WMS Mobile App

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Check for Input Focus Field
#########################################################################

Description:
    Given passed in label of Input Field in Mobile App, generate xPath and check to make sure that is visible on Mobile App screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * input_field_with_focus - label of input field which has focus (top of screen) in Mobile App

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Set Dialog xPath
#########################################################################

Description:
    This scenario will set an xPath to the Dialog used for confirmations and messages by Mobile (relative to passed in expected message displayed in the dialog)

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * mobile_dialog_message - message anticipated in dialog

Optional Inputs:
    * None

Outputs:
    * mobile_dialog_elt - constructed xPath to the dialog

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Generate Screenshot
#########################################################################

Description:
    Generate a mobile screen shot. Will call standard web browser sreenshot step.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Clear Field
#########################################################################

Description:
    If the cursor is in a field, uses a shortcut to clear it NOTE: This shortcut sometimes takes you to the Tools Menu, consider using I clear all text step in web browser

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Deposit
#########################################################################

Description:
    Performs either an Inventory, Load, or Product Deposit.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Start Server Trace
#########################################################################

Description:
    Starts a Server Trace in Mobile. Scenario will stop trace if running, and the restart.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Start Device Trace
#########################################################################

Description:
    Starts a Device Trace in Mobile. Scenario will stop trace if running, and the restart.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Set Work Area
#########################################################################

Description:
    From F7 and Tools Menu and User Options, set Work Area

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * wrkarea - work area to be set

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Wait for Processing
#########################################################################

Description:
    Waits until the Mobile App is done processing TODO - NEED to INVESTIGATE if needed (do not see this message in Mobile, just rotating cicle)

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Attempt to Cleanup State
#########################################################################

Description:
    This scenario will attempt to cleanup from prior test runs and mobile application state. Nothing is guaranteed to cleanup depending on state (for instance if screen was left entering serial numbers).

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Process Login Screen
#########################################################################

Description:
    This scenario will perform the initial login on the Mobile App (username/password collection)

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * USERNAME - Username (This value comes from MOCA credentials)
    * PASSWORD - Password (This value comes from MOCA credentials)
    * mobile_credentials - Cycle Credential relative to Mobile testing

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Process Device Code
#########################################################################

Description:
    Enter the Device Code into the Mobile UI and handle any error conditions.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * mobile_devcod - mobile device code (try first)
    * devcod - standard device code (fall back if mobile_devcod is not set)

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Adjust Size and Orientation
#########################################################################

Description:
    Check to see and set Mobile screen orientation and Mobile screen size if using the /demo URL for the Mobile Application.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * mobile_screen_size_setting - set to Tablet, or any other setting (or blank) for HandHeld mode
    * mobile_screen_orientation_setting - set to Landscape, or any other setting (or blank) for Portrait mode

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Check for Deposit
#########################################################################

Description:
    Check to see if there is inventory on device and deposit

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Putaway Override
#########################################################################

Description:
    Override the Putaway Location

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * over_code - the override code to be input
    * override_f2 - use F2 to select override code

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Copy Deposit Location
#########################################################################

Description:
    Copies the suggested Deposit Location from the Mobile App

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * dep_loc - the deposit location suggested in the Mobile App

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Load Deposit
#########################################################################

Description:
    Performs a Load Deposit

MSQL/Groovy Files or API Endpoints:
    check_confirm_lodnum.msql

Required Inputs:
    * None

Optional Inputs:
    * dep_loc - the location to deposit to
    * recovery_mode - if set to TRUE, will deposit to the recovery deposit location
    * recovery_deploc - the recovery deposit location
    * allocate - if set to TRUE, will use the location allocated by WMS
    * override - if set to TRUE, will override the deposit location
    * validate_loc - if set to a location, will check to ensure the deposit location matches

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Allocate Location
#########################################################################

Description:
    During a deposit, allocates the location for deposit.

MSQL/Groovy Files or API Endpoints:
    check_confirm_lodnum.msql

Required Inputs:
    * None

Optional Inputs:
    * dep_loc - deposit location will be used for allocation location if set

Outputs:
    * dep_loc - the shown allocated locations

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Confirm Lodnum
#########################################################################

Description:
    Check to see if the system is configured to confirm lodnum

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Product Deposit
#########################################################################

Description:
    Performs the product deposit for a given pick, load, or move.

MSQL/Groovy Files or API Endpoints:
    validate_shipment_is_staged.msql

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * dep_lpn - the (last if multiples) LPN deposited
    * dep_lpn_list - list of LPNs deposited (will be set to dep_lpn if only one was deposited)
    * dep_loc - the location where load was deposited

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Inventory Deposit
#########################################################################

Description:
    From the Mobile Inventory Deposit screen, deposits all inventory on the device.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * dep_lpn - the LPN deposited

#########################################################################
Utility Scenario: Mobile Utilities/Mobile Copy Deposit LPN
#########################################################################

Description:
    Copies the Deposit LPN from the Mobile App

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * dep_lpn - the lodnum (LPN) to deposit shown in Mobile App


###############################################################
Utility Name: Mobile Work Order Utilities
Utility File: Mobile Work Order Utilities.feature
###############################################################

Utility Description:
    This Utility contains scenarios that perform actions specific to work order processing in the Mobile App

Utility Author: Tryon Solutions
Utility Type: Regression
Functional Area: Production

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Public Scenarios:
    * Mobile Move Inventory to Workstation  - moves picked work order inventory to workstation
    * Mobile Pick Work Order  - Uses Directed Work to pick Work Order and deposit
    * Mobile Directed Work Order Case Picking  - performs Directed Work picking
    * Mobile Receive Finished Goods  - receives work order finished goods

Utility Assumptions:
    * Supporting MOCA scenarios are in Terminal Work Order Utilities.feature

Utility Notes:
    * None

#########################################################################
Utility Scenario: Mobile Work Order Utilities/Mobile Move Inventory to Workstation
#########################################################################

Description:
    This scenario moves picked work order inventory to Workstation.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Work Order Utilities/Mobile Pick Work Order
#########################################################################

Description:
    This scenario uses directed work to pick work order inventory and deposit

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Work Order Utilities/Mobile Receive Finished Goods
#########################################################################

Description:
    This scenario receives the work order finished goods

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * prdlin - Production Line
    * client_id - Client ID
    * wkonum - Work Order number
    * wkorev - Work Order revision
    * rcvqty - Receive Qty

Optional Inputs:
    * over_consumption - Over Consumption allowed flag TRUE/FALSE

Outputs:
    * None


###############################################################
Utility Name: Mobile Workflow Utilities
Utility File: Mobile Workflow Utilities.feature
###############################################################

Utility Description:
    This utility performs Workflows functions within the Mobile App

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Workflows

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile

Public Scenarios:
    * Mobile Process Workflow  - Checks whether a workflow is being prompted, and process the workflow if so.

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Mobile Workflow Utilities/Mobile Process Workflow
#########################################################################

Description:
    This scenario checks whether the Mobile App is prompting the user to perform a Trailer Safety Check and performs such if so.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Workflow Utilities/Mobile Perform Trailer Safety Check Pass
#########################################################################

Description:
    This scenario answers 'Y' to all questions to pass a Trailer Safety Check if prompted in Mobile App.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Mobile Yard Utilities
Utility File: Mobile Yard Utilities.feature
###############################################################

Utility Description:
    This Utility contains common scenarios for Mobile Yard features

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile

Public Scenarios:
    * Mobile Yard Audit  - This Scenario will perform yard audit relative to yard audit type requested

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Mobile Yard Utilities/Mobile Yard Audit
#########################################################################

Description:
    This Scenario will perform yard audit relative to yard audit type requested

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * yard_audit_type - type of yard audit scenario to run

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Yard Utilities/Mobile Yard Audit With Trailer
#########################################################################

Description:
    This Scenario will Perform Audit by passing Trailer

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Trailer Number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Yard Utilities/Mobile Accept And Exit Yard Audit
#########################################################################

Description:
    This will Accept the Audit and Exit the Audit

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Yard Utilities/Mobile Yard Audit WithOut Trailer
#########################################################################

Description:
    This Scenario will Perform Audit without providing any fields

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * yard_loc - Yard Location

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Mobile Yard Utilities/Mobile Yard Audit With Missing Trailer
#########################################################################

Description:
    This Scenario will Perform Yard Audit To Location missing Equipment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Trailer Number

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Terminal Carton Picking Utilities
Utility File: Terminal Carton Picking Utilities.feature
###############################################################

Utility Description:
    Utilities to perform Carton Picking in the terminal

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Public Scenarios:
    * Terminal Navigate to Carton Pick Menu  - From the Undirected Menu, goes to the Carton Pick screen
    * Terminal Perform Carton Picks for Order  - Given an Order Number, performs ever Carton Pick for it
    * Terminal Undirected Carton Picking  - Performs an entire batch of carton picking

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Terminal Carton Picking Utilities/Terminal Navigate to Carton Pick Menu
#########################################################################

Description:
    This scenario navigates to the Carton Pick screen from the Undirected Menu.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Carton Picking Utilities/Terminal Perform Carton Picks for Order
#########################################################################

Description:
    From the Build Batch screen, given an order number, performs the entirety of the associated carton picks.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ordnum - The order that will be carton picked

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Carton Picking Utilities/Terminal Undirected Carton Picking
#########################################################################

Description:
    This scenario performs Carton Picking to completion from the Order Pick screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * cancel_pick_flag - If "TRUE" then pick will be Cancel with no reallocation
    * cancel_code - Cancel code to enter. Default C-N-R (cancel no reallocation)
    * error_location_flag - If canceling pick, show location be errored (Default=FALSE)
    * short_pick_flag - should the pick be shorted (default=FALSE) (short pick is automatically followed with a cancel pick)
    * short_pick_qty - Amount to pick when short picking (default is 1)
    * single_pick_flag - Indicates the utility should exit after first pick is completed
    * override_srcloc - Overrides the valued enterd for source location (unassigned after entry)
    * override_src_id - Overrides the valued enterd for source Id (unassigned after entry)
    * override_prtnum - Overrides the valued enterd for part number (unassigned after entry)
    * override_pick_qty - Overrides the valued enterd for pick quantity (unassigned after entry)
    * override_uomcod - Overrides the valued enterd for the UOM code (unassigned after entry)
    * skip_deposit_flag - Indicates the scenario should return before performing deposit logic (unassigned after use)(default=FALSE)

Outputs:
    * picks_confirmed - The number of picks confirm by this call this scenario

#########################################################################
Utility Scenario: Terminal Carton Picking Utilities/Deposit After Carton Picking
#########################################################################

Description:
    Perform Post Carton Picking deposit. This should be replaced by standard deposit scenario

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Carton Picking Utilities/Get Carton Number by Order for Undirected Carton Picking
#########################################################################

Description:
    Returns MOCA status of 0 when there are Carton Picks found in MOCA for this order.

MSQL/Groovy Files or API Endpoints:
    get_carton_number_by_order_for_undirected_carton_pick.msql

Required Inputs:
    * ordnum - Order Number associated with this pick.

Optional Inputs:
    * None

Outputs:
    * crtnum - Carton Number associated with this order

#########################################################################
Utility Scenario: Terminal Carton Picking Utilities/Terminal Build Batch for Undirected Carton Picking
#########################################################################

Description:
    This scenario adds a single carton number to a batch.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ctnnum - The Carton Number to add to the batch

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Carton Picking Utilities/Get Source ID for Carton Pick  
#########################################################################

Description:
    Determine that correct source inventory Id, Prtnum, Srcloc for a carton pick 

MSQL/Groovy Files or API Endpoints:
    get_source_id_for_carton_pick.msql

Required Inputs:
    * srcloc - Source Location of the carton pick
    * ctnnum - Carton being picked into

Optional Inputs:
    * None

Outputs:
    * src_id - Source Inventory Id
    * prtnum - Part Number


###############################################################
Utility Name: Terminal Counting Utilities
Utility File: Terminal Counting Utilities.feature
###############################################################

Utility Description:
    These Utility Scenarios perform actions specific to Terminal Counting activities

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Public Scenarios:
    * Terminal Inventory Perform LPN Count  - Perform LPN Count process
    * Terminal Inventory Perform Summary Count  - Perform Summary Count process
    * Terminal Inventory Perform Detail Count  - Perform Detail Count process
    * Terminal Inventory Perform Audit Count  - Perform Audit Count process
    * Terminal Inventory Count Process Directed Work Screen  - process initial directed work screen for a count
    * Terminal Inventory Count Enter Batch and Location Undirected Work  - enter count batch and stoloc and process count screen
    * Terminal Inventory Count Complete Undirected Work  - Check for completion of undirected count
    * Terminal Inventory Audit Count Enter Batch and Location Undirected Work  - enter the count batch and the location in Undirected work mode
    * Terminal Inventory Audit Count Enter Location Directed Work  - Enter Location in Directed Mode work mode
    * Terminal Inventory Audit Count Perform Count  - perform the audit count operation
    * Terminal Inventory Audit Count Complete Count  - complete the audit count operation
    * Inventory Audit Count Check Inventory  - validating that the audit count value was accepted
    * Inventory Audit Count Check Tables  - validating the count history and the count work tables
    * Validate Count Audit Generated  - validate that a audit count was generated
    * Terminal Manual Count Process  - Perform Manual Count
    * Validate Audit Count Generated  - validate that a audit count was generated (by location; this scenario follows manual count)
    * Terminal Inventory Audit Count Add LPN  - Add LPN during an audit count by counting an item not in the audit's location

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Inventory Audit Count Add LPN
#########################################################################

Description:
    For Terminal Count Audit, enter lodnum that does not exist in location and add new inventory relative to that lodnum/prtnum

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - lodnum to add to location during audit
    * prtnum - part number for new inventory
    * untqy - quantity of prtnum to add into inventory
    * invsts - inventory status

Optional Inputs:
    * lotnum - lot number

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Inventory Perform LPN Count 
#########################################################################

Description:
    Logic to process a count on LPN Count Screen. Can handle case where a singular and specified lodnum is used or where the instance is queried and all 
    LPNs relative to the storage location (stoloc) are included.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the count will take place
    * cntbat - Count Batch we are working on
    * committe_inventory_in_count_loc - contunue if comiitted inventory exists

Optional Inputs:
    * lodnum - The LPN to count in a location. Logic will get all LPNs in the location (stoloc) if not defined

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Inventory Perform Summary Count 
#########################################################################

Description:
    Logic to process a Summary Count from the Cycle Count Screen. Can handle case where a singular and specified prtnum and prt_client_id are specified and also case where just 
    the stoloc is specified and all items in the location are counted.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the count will take place and if this is the only input, will count all items in the location.
    * cntbat - Count Batch we are working on

Optional Inputs:
    * create_mismatch - (TRUE|FALSE) specifies if the quantity should be incremented to generate a mismatch.
    * blind_counting - (TRUE|FALSE) specifies if the prtnum and prt_client_id should be entered or just ENTER responses.
    * prtnum - part, if specified along with prt_client_id will count just this prtnum in this stoloc.
    * prt_client_id - client ID. if specified along with prtnum will count just this prtnum in this stoloc.

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Inventory Perform Detail Count 
#########################################################################

Description:
    Logic to process a Detail Count from the Detail Cycle Count Screen. Can handle case where a singular and specified lodnum, prtnum and prt_client_id are specified 
    and also case where just the stoloc is specified and all items in the location are counted.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the count will take place and if this is the only input, will count all items in the location.
    * cntbat - Count Batch we are working on

Optional Inputs:
    * lodnum - load number
    * create_mismatch - (TRUE|FALSE) specifies if the quantity should be incremented to generate a mismatch.
    * blind_counting - (TRUE|FALSE) specifies if the prtnum and prt_client_id should be entered or just ENTER responses.
    * prtnum - part, if specified along with prt_client_id will count just this prtnum in this stoloc.
    * prt_client_id - client ID. if specified along with prtnum will count just this prtnum in this stoloc.

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Inventory Count Process Directed Work Screen
#########################################################################

Description:
    process initial directed work screen for a count

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Inventory Count Enter Batch and Location Undirected Work
#########################################################################

Description:
    From the Cycle Count Menu, enter the count batch and storage location infomation

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the count will take place
    * cntbat - Count Batch we are working on

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Inventory Count Complete Undirected Work
#########################################################################

Description:
    After count has completed, check screen to make sure count it complete and process.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Inventory Audit Count Enter Batch and Location Undirected Work
#########################################################################

Description:
    For Terminal Count Audit, on Count Audit Screen, enter the count batch and the location

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * cnt_id - Count batch for the audit
    * stoloc - Storage location where audit will take place

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Inventory Audit Count Perform Count
#########################################################################

Description:
    For Terminal Count Audit, perform the audit count operation.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - load number
    * prtnum - part number
    * cnt_qty - inventory quantity entered in audit count

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Inventory Audit Count Complete Count
#########################################################################

Description:
    For Terminal Count Audit, complete the audit count operation by answering screen question and validating operation completed

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Inventory Audit Count Check Inventory
#########################################################################

Description:
    Validate that the count value was accepted and matches what was passed in to the of the start count.

MSQL/Groovy Files or API Endpoints:
    check_inventory_after_count.msql

Required Inputs:
    * stoloc - storage location where audit is being done from
    * cnt_qty - inventory quantity entered in audit count

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Inventory Audit Count Check Tables
#########################################################################

Description:
    Validating the count history (cnthst) and the count work (cntwrk) tables have been properly updated.

MSQL/Groovy Files or API Endpoints:
    check_count_work_after_count.msql
    check_count_history_after_count.msql

Required Inputs:
    * stoloc - storage location where audit is being done from
    * cntbat - Count batch for the audit

Optional Inputs:
    * cnt_id - used for cntbat for audit counts

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Validate Count Audit Generated
#########################################################################

Description:
    Check to see if an audit count has been generated realtive to the cntbat, stoloc, and the prtnum

MSQL/Groovy Files or API Endpoints:
    check_count_audit_generated.msql

Required Inputs:
    * stoloc - Location where the count will take place
    * cntbat - Count Batch we are working on
    * prtnum - part number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Manual Count Process
#########################################################################

Description:
    Handles the logic for manual count process. Selects an LPN or stoloc based on input, and proceeds to perform a manual count

MSQL/Groovy Files or API Endpoints:
    get_inventory_details_for_manual_count.msql
    get_numUoms_by_part_and_footprint.msql

Required Inputs:
    * create_mismatch - Specifies whether to create a count mismatch (TRUE|FALSE)
    * stoloc - Storage location where count will occur
    * man_cnt_mode - Specifies whether the manual count should be performed at "LOAD", "SUB" or "DETAIL" level

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Validate Audit Count Generated
#########################################################################

Description:
    Validates whether audit count was generated after a mismatched count

MSQL/Groovy Files or API Endpoints:
    validate_audit_work_generated.msql

Required Inputs:
    * stoloc - Location at which the mismatched count was performed

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Count Process Adjustment
#########################################################################

Description:
    Process Inventory adjustment rererences and serialization if needed

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Inventory LPN Count Get Next LPN to Count
#########################################################################

Description:
    Relative to the stoloc and cntbat select the next LPN to count.

MSQL/Groovy Files or API Endpoints:
    get_cycle_count_lpn_for_matching_count.msql

Required Inputs:
    * stoloc - Location where the count will take place
    * cntbat - Count Batch we are working on

Optional Inputs:
    * None

Outputs:
    * lodnum - The LPN to count relative to stoloc

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Inventory Summary Count Enter Blind or Part Info
#########################################################################

Description:
    While on the Cycle Count screen, enter the prtnum and prt_client_id OR if blind_counting is set, just press ENTER for these values.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * blind_counting - (TRUE|FALSE) specifies if the prtnum and prt_client_id should be entered or just ENTER responses.

Optional Inputs:
    * prtnum - specified part
    * prt_client_id - specified client ID

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Inventory Detail Count Enter Blind or Part Info
#########################################################################

Description:
    While on the Count Adjustment screen, enter the prtnum and prt_client_id OR if blind_counting is set, just press ENTER for these values.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * blind_counting - (TRUE|FALSE) specifies if the prtnum and prt_client_id should be entered or just ENTER responses.
    * lodnum - the LPN to count relative to stoloc

Optional Inputs:
    * prtnum - specified part
    * prt_client_id - specified client ID

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Inventory Count Enter Blind or Part Info
#########################################################################

Description:
    While on the Cycle Count screen, enter the prtnum and prt_client_id OR if blind_counting is set, just press ENTER for these values.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * blind_counting - (TRUE|FALSE) specifies if the prtnum and prt_client_id should be entered or just ENTER responses.

Optional Inputs:
    * prtnum - specified part
    * prt_client_id - specified client ID

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Inventory Count Process Quantity Capture
#########################################################################

Description:
    While on the Quantity Capture screen, call scenario to get untqty and numUOMs relative to the stoloc/prtnum. Use this data to enter for each UOM the current quantity. 
    If the script is asked to generate mismatch on quantity (create_mismatch) increment the quantity by untqty_mismatch_increment setting.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * create_mismatch - (TRUE|FALSE) specifies if the quantity should be incremented to generate a mismatch.
    * numUOMs - number of unit of measures for this prtnum
    * untqty - the quantity of inventory relative to the prtnum
    * untqty_mismatch_increment - amount to increase quantity to create a mismatch

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Calculate Quantity Mismatch Information
#########################################################################

Description:
    Look to see if mismatch was requested, if so add untqty_mismatch_increment to current untqty for use.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * create_mismatch - (TRUE|FALSE) specifies if the quantity should be incremented to generate a mismatch.
    * untqty - the quantity of inventory relative to the prtnum

Optional Inputs:
    * untqty_mismatch_increment - amount to add to current untqty

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Inventory Summary Count Get Next Item to Count
#########################################################################

Description:
    Given a cntbat and stoloc, find the next item number to count. Use the same or similar logic as the RF screen does in determining the next item (like it does when doing non-blind counting)

MSQL/Groovy Files or API Endpoints:
    get_cycle_count_next_item_and_client_from_location.msql

Required Inputs:
    * stoloc - specified storage location
    * cntbat - specified Count Batch

Optional Inputs:
    * None

Outputs:
    * prtnum - next part to count
    * prt_client_id - next client ID relative to part

#########################################################################
Utility Scenario: Terminal Counting Utilities/Inventory Count Get untqty and numUOMs
#########################################################################

Description:
    Given a stoloc, prtnum, and prt_client_id, get number of UOMs and the quantity in this location in terms of the lowest level quantity.

MSQL/Groovy Files or API Endpoints:
    get_cycle_count_qty_and_uom_from_count_location.msql

Required Inputs:
    * stoloc - specified storage location
    * prtnum - specified part to count
    * prt_client_id - specified client ID relative to part

Optional Inputs:
    * None

Outputs:
    * numUOMs - number of unit of measures for this prtnum
    * untqty - the quantity of inventory relative to the prtnum

#########################################################################
Utility Scenario: Terminal Counting Utilities/Inventory Detail Count Get LPNs to Count
#########################################################################

Description:
    Relative to the stoloc and cntbat select the detail of the next LPN to process.

MSQL/Groovy Files or API Endpoints:
    get_cycle_count_lpn_list_for_detail_count.msql

Required Inputs:
    * stoloc - Location where the count will take place
    * cntbat - Count Batch we are working on

Optional Inputs:
    * None

Outputs:
    * lodnum - the LPN to count relative to stoloc
    * prtnum - the part to count
    * prt_client_id - the client ID relative to the part
    * untqty - the part quantity
    * numUOMs - the number of UOMs for the part

#########################################################################
Utility Scenario: Terminal Counting Utilities/Check for Count Near Zero Prompt
#########################################################################

Description:
    Checks to see if the count near zero prompt appears on the terminal screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Count Near Zero Cycle Count Process
#########################################################################

Description:
    This scenario handles the processing logic for count near zero for picking.

MSQL/Groovy Files or API Endpoints:
    validate_audit_work_generated.msql

Required Inputs:
    * prtnum - item number used for the test case
    * client_id - Client ID

Optional Inputs:
    * match_count - Determines if the count near zero should use the correct quantity, use the incorrect quantity in the first attempt and the correct quantity the next attempt, 
      or do a mismatched count. The modes are MISMATCH and REMATCH.

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Process Rematched Count
#########################################################################

Description:
    Handles count near zero processing for an incorrect count in the first attempt and a correct count in the confirmation.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Process Mismatched Count
#########################################################################

Description:
    Handles creating a mismatched count for Count near Zero for picking.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Enter Count Quantity
#########################################################################

Description:
    Enters the quantity (correct or mismatched) in the quantity capture count screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * untqty - driven from the previous scenarios Inventory Count Get untqty and numUOMs and Calculate Quantity Mismatch Information for Count Zero.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Terminal Unexpected Entry during Count for Count Near Zero
#########################################################################

Description:
    Press Enter to go through the unexpected entry popup error during the counting process.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * untqty - driven from the previous scenarios Inventory Count Get untqty and numUOMs and Calculate Quantity Mismatch Information for Count Zero.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Counting Utilities/Calculate Quantity Mismatch Information for Count Zero
#########################################################################

Description:
    Calculates the mismatch quantity.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * untqty - driven from the previous scenario Inventory Count Get untqty and numUOMs.

Optional Inputs:
    * None

Outputs:
    * untqty - added 1 to existing untqty to create a mismatch


###############################################################
Utility Name: Terminal Inventory Utilities
Utility File: Terminal Inventory Utilities.feature
###############################################################

Utility Description:
    These Utility Scenarios perform actions specific to Terminal Inventory activities

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Public Scenarios:
    * Terminal Inventory Status Change  - Performs an Inventory Status Change
    * Terminal Inventory Transfer Directed  - Performs an Inventory transfer in directed mode
    * Terminal Inventory Transfer Undirected  - Performs an Inventory transfer
    * Terminal Inventory Adjustment Add  - Performs an Inventory Adjustment Add
    * Terminal Inventory Adjustment Delete  - Performs an Inventory adjustment Delete
    * Terminal Inventory Adjustment Change  - Performs an Inventory Adjustment increase or decrease
    * Terminal Inventory Adjustment References  - On Adjustment, add references and reason
    * Terminal Inventory Adjustment Complete  - Confirm the Inventory Adjustment
    * Inventory Transfer Validate Location  - Validates lodnum is at a specified location
    * Get Location Status from Location  - Get locsts relative to a given stoloc
    * Terminal Inventory Putaway Directed Override  - Perform putaway. If specified, will override location with F4
    * Terminal Inventory Display  - Inventory display relative to lodnum and prtnum
    * Terminal Inventory Location Display  - Inventory Location Display relative to specified location
    * Validate Partial Move Was Successful  - validate that the partial move was successfull by checking inventory by prtnum and quantity
    * Terminal Partial Inventory Move  - performs a Partial Inventory Move
    * Terminal Inventory Transfer Invalid  - Performs an inventory move to a storage trailer not at dock door.

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Terminal Inventory Utilities/Terminal Inventory Transfer Invalid
#########################################################################

Description:
    Perform an inventory transfer with an storage location not at dock door (should get message about Invalid location)

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * xfer_lodnum - LPN to be transferred
    * dstloc - Invalid location where deposit will first be attempted to (and fail)
    * valid_dstloc - Valid location where deposit will eventually be made to

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Inventory Utilities/Terminal Inventory Location Display
#########################################################################

Description:
    Enter sorage location and process information on Inventory Location Display screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - storage location for display

Optional Inputs:
    * generate_screenshot - if requested generate terminal screen shot

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Inventory Utilities/Terminal Inventory Display
#########################################################################

Description:
    Perform an inventory display relative to lodnum and prtnum

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - storage location
    * lodnum - load number

Optional Inputs:
    * prtnum - part number
    * generate_screenshot - if requested generate terminal screen shot

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Inventory Utilities/Terminal Inventory Putaway Directed Override
#########################################################################

Description:
    Perform product putaway. If override is set then will override deposit location with F4, If allocate is set, will allocate with F3. If neither is set, will perform standard putaway.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - the LPN that was deposited

Optional Inputs:
    * override_f2 - use F2 to show overrtide code
    * allocate - TRUE|FALSE - will use F3 to allocate location
    * override - TRUE|FALSE - will use F4 to override location
    * over_code - override code
    * over_dep_loc - override deposit location

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Inventory Utilities/Get Location Status from Location
#########################################################################

Description:
    This scenario returns locsts relative to a stoloc

MSQL/Groovy Files or API Endpoints:
    check_location_status.msql

Required Inputs:
    * loc_to_check - location to check status
    * wh_id - warehouse ID

Optional Inputs:
    * None

Outputs:
    * location_status - location status

#########################################################################
Utility Scenario: Terminal Inventory Utilities/Terminal Inventory Transfer Undirected
#########################################################################

Description:
    This scenario performs a Full Inv Move

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * xfer_lodnum - LPN to be transferred
    * dstloc - Location where LPN will be deposited

Optional Inputs:
    * xfer_lodnum_list - Comma separate list of LPNs to be transferred

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Inventory Utilities/Terminal Partial Inventory Move
#########################################################################

Description:
    This scenario performs a Partial Inventory Move

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * srclod - LPN to be transferred
    * dstloc - Location where LPN will be deposited
    * move_qty - Quantity to be moved

Optional Inputs:
    * srclod_list - Comma separate list of LPNs to be transferred

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Inventory Utilities/Validate Partial Move Was Successful
#########################################################################

Description:
    This scenario validate that the partial move was successfull by checking inventory by prtnum and quantity

MSQL/Groovy Files or API Endpoints:
    validate_inventory_location_by_prtnum_untqty.msql

Required Inputs:
    * dstloc - Location where LPN will be deposited
    * move_qty - Quantity to be moved

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Inventory Utilities/Terminal Inventory Transfer Directed 
#########################################################################

Description:
    Perform an Inventory Transfer in Directed work mode

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * srcloc - source location for the transfer
    * dstloc - destination location for the transfer
    * xfer_lodnum - lodnum to transfer

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Inventory Utilities/Terminal Inventory Adjustment Add
#########################################################################

Description:
    Perform an Inventory Adjustment to Add Inventory to a specified Location

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the adjustment will take place
    * lodnum - Load number that was added
    * prtnum - Valid part number that is assigned in your system
    * client_id - Client for the adjustment inventory
    * reacod - System reason code for adjustment/add
    * invsts - Inventory status
    * lotnum - Lot Number for item to be added
    * ftpcod - Footprint code for item to be added
    * uom - Unit of measure
    * adjref1 - Adjustment reference 2 (defaults to prtnum value)
    * untqty - The quantity of inventory we want to add

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Inventory Utilities/Terminal Inventory Adjustment Delete
#########################################################################

Description:
    Conduct a terminal inventory adjustment delete operation.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the adjustment will take place
    * lodnum - Load number that was added

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Inventory Utilities/Terminal Inventory Adjustment Change
#########################################################################

Description:
    Perform an Inventory Adjustment Change to increase or decrease the amount of inventory

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the adjustment will take place
    * lodnum - Load number that was added
    * reacod - System reason code for adjustment.
    * adjref1 - Adjustment reference 2 (defaults to prtnum value)
    * new_qty - The new quantity we want to adjust to (increase/decrease)

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Inventory Utilities/Terminal Inventory Adjustment References
#########################################################################

Description:
    Add Adjustment References and Reason for an adjustment operation

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * reacod - System reason code for adjustment.
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Inventory Utilities/Terminal Inventory Adjustment Complete
#########################################################################

Description:
    Complete and confirm an Inventory Adjustment relative to the Storage Location

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the adjustment will take place

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Inventory Utilities/Inventory Transfer Validate Location
#########################################################################

Description:
    Ensure a given lodnum (LPN) is now in the expected location (such as after an inventory move).

MSQL/Groovy Files or API Endpoints:
    validate_inventory_location_by_lodnum.msql

Required Inputs:
    * dstloc - Location where the load should be
    * xfer_lodnum - the lodnum to validate, either this or lodnum should be set
    * lodnum - the lodnum to validate, either this or xfer_lodnum should be set

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Inventory Utilities/Terminal Inventory Status Change
#########################################################################

Description:
    Perform a status change on inventory in the terminal

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - Load number being adjusted in
    * reacod - System reason code for the change
    * new_sts - Status change value

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Terminal List Picking Utilities
Utility File: Terminal List Picking Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios to perform List Picking

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Public Scenarios:
    * Terminal Perform Directed List Pick for Order - Performs Directed List Pick For a Given Order From Directed Work Menu
    * Terminal Perform Undirected List Pick for Order - Performs Undirected List Pick For a Given Order From Undirected Menu
    * Terminal Work Assignment Menu  - Navigates From Undirected Menu To Work Assignment Menu
    * Terminal Perform Picks for Work Assignment  - Performs all the picks to complete a pick list

Utility Assumptions:
    * None

Utility Notes:
    * See Scenario Headers for required inputs.

#########################################################################
Utility Scenario: Terminal List Picking Utilities/Terminal Perform Directed List Pick for Order
#########################################################################

Description:
    From the Directed Work screen, given an order number/operation code/username, performs the entirety of the associated List Picks.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * oprcod - set to the List picking operation code
    * username - the user assigned to or user to assign to
    * ordnum - The order that will be List picked

Optional Inputs:
    * cancel_and_reallocate - Will cancel the List Pick and reallocate if set to "true"

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal List Picking Utilities/Terminal Perform Undirected List Pick for Order
#########################################################################

Description:
    Given an order number, performs the entirety of the associated Undirected List Picks.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * oprcod - set to the List picking operation code
    * ordnum - The order that will be List picked

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal List Picking Utilities/Terminal Work Assignment Menu
#########################################################################

Description:
    This scenario navigates to the Work Assignment screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal List Picking Utilities/Terminal Perform Picks for Work Assignment
#########################################################################

Description:
    This scenario performs List Picking to completion from the Work Assignment screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * list_id - pick list to be picked

Optional Inputs:
    * cancel_pick_flag - If "TRUE" then pick will be Cancel with no reallocation
    * cancel_code - Cancel code to enter. Default C-N-R (cancel no reallocation)
    * error_location_flag - If canceling pick, show location be errored (Default=FALSE)
    * short_pick_flag - should the pick be shorted (default=FALSE) (short pick is automatically followed with a cancel pick)
    * short_pick_qty - Amount to pick when short picking (default is 1)
    * single_pick_flag - Indicates the utility should exit after first pick is completed
    * override_srclod - Overrides the value entered for source load (unassigned after entry)
    * override_srcloc - Overrides the value entered for the source location (unassigned after entry)
    * override_prtnum - Overrides the value entered for part number (unassigned after entry)
    * override_pick_qty - Overrides the value entered for pick quantity (unassigned after entry)
    * override_uomcod - Overrides the value entered for the UOM code (unassigned after entry)

Outputs:
    * picks_confirmed - The number of picks confirm by this call this scenario

#########################################################################
Utility Scenario: Terminal List Picking Utilities/Terminal Acknowledge Work Assignment  
#########################################################################

Description:
    This scenario Acknowledges the assigne work assignment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal List Picking Utilities/Get Load Id for Work Assignment
#########################################################################

Description:
    This scenario generates the pick-to load id for a work assignment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * to_id - Pick-to load id

#########################################################################
Utility Scenario: Terminal List Picking Utilities/Terminal Sign on to Work Assignment
#########################################################################

Description:
    This scenario performs List Picking to completion from the Work Assignment screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * list_id - pick list to be picked

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal List Picking Utilities/Get Source Subload ID for Terminal List Pick
#########################################################################

Description:
    This scenario performs Get Source Subload ID for Terminal List Pick.

MSQL/Groovy Files or API Endpoints:
    get_source_subload_for_terminal_list_pick.msql

Required Inputs:
    * srcloc - the Source Location
    * prtnum - the Part Number
    * list_id - the List Pick ID

Optional Inputs:
    * None

Outputs:
    * prtnum - Part Number to be entered for pick
    * srclod - Source Load to be entered on pick

#########################################################################
Utility Scenario: Terminal List Picking Utilities/Get List Pick Directed Work by Order Number
#########################################################################

Description:
    Returns MOCA status of 0 when there are List Picks found in MOCA for this order.

MSQL/Groovy Files or API Endpoints:
    get_list_picking_directed_work_by_order_and_operation_code.msql

Required Inputs:
    * oprcod - Operation Code.
    * ordnum - Order Number associated with this pick.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal List Picking Utilities/Get Pick List ID by Order Number for Undirected Pick
#########################################################################

Description:
    Returns MOCA status of 0 when there are List Id values for this order's pick.

MSQL/Groovy Files or API Endpoints:
    get_undirected_case_pick_list_id_by_order.msql

Required Inputs:
    * ordnum - Order Number

Optional Inputs:
    * None

Outputs:
    * list_id - List Id for this Pick

#########################################################################
Utility Scenario: Terminal List Picking Utilities/Check List Pick Directed Work Assignment
#########################################################################

Description:
    Returns MOCA status of 0 when there are List Picks remaining given this List Id.

MSQL/Groovy Files or API Endpoints:
    check_list_pick_directed_work_assigned_to_user.msql

Required Inputs:
    * oprcod - Operation Code
    * list_id - List Id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal List Picking Utilities/Terminal List Pick Vehicle Full
#########################################################################

Description:
    Sets down the list to pallet LPN to the final staging location with Equipment Full option. Handles logic to perform the remaining picks using directed work.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal List Picking Utilities/Terminal List Pick Set Down
#########################################################################

Description:
    Sets down the list to pallet LPN to a PND location with Set Down option. Handles logic to resume the list through directed work.

MSQL/Groovy Files or API Endpoints:
    get_pndloc_for_lpck_set_down.msql

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Terminal Loading Utilities
Utility File: Terminal Loading Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios for loading trailers using terminals

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Public Scenarios:
    * Terminal Perform Undirected LTL Loading  - find the correct door for loading a trailer using Undirected LTL loading
    * Terminal Perform Undirected TL Loading  - find the correct door for loading a trailer using Undirected TL loading
    * Terminal Perform LTL Directed Loading of All LPNs for Truck  - performs Directed LTL of a dock door
    * Terminal Perform TL Directed Loading of All LPNs for Truck  - performs Directed TL of a dock door
    * Terminal Outbound Audit  - performs an outbound audit of a outbound staging location
    * Terminal Outbound Unload and Unpick Shipment  - unloads a shipping trailer and unpicks inventory

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Terminal Loading Utilities/Terminal Outbound Audit
#########################################################################

Description:
    This scenario will conduct an Outbound audit in the terminal. It will also check to see if the audit comnpleted with discrepancies or not. 
    If discrepancies were found it will call scenario to handle the discrepancies in terms of releasing a hold.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - outbound staging location
    * lodnum - load number
    * prtnum - part number
    * stkuom - unit of measure relative to prtnum
    * audqty - quantity to enter during audit (if not equal to untqty then this will generate a mismatch)
    * client_id - client ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Loading Utilities/Terminal Perform Undirected LTL Loading
#########################################################################

Description:
    This scenario will find the correct door for loading a trailer using Undirected LTL loading screen. Then Sign on to the trailer and 
    perform a undirected LTL load of all the LPNs.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Trailer Id
    * trlr_num - Trailer Number
    * dock_door - Dock Door

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Loading Utilities/Terminal Perform Undirected TL Loading
#########################################################################

Description:
    This scenario will find the correct door for loading a trailer using Undirected TL loading screen. Then Sign on to the trailer and perform a undirected TL load of all the LPNs.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Trailer Id
    * trlr_num - Trailer Number
    * dock_door - Dock Door

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Loading Utilities/Terminal Sign onto Undirected TL Loading Door
#########################################################################

Description:
    This scenario will sign into a door for Undirected TL Loading. The logic will also complete a trailer workflow if necessary.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * carcod - Carrier Code for Trailer
    * yard_loc - Yard location of Dock Door

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Loading Utilities/Terminal Perform LTL Directed Loading of All LPNs for Truck 
#########################################################################

Description:
    This scenario performs Directed LTL of a dock door. It performs the loading of all the staged LPNS for a door.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * username - Username signed into terminal
    * dock_door - Dock Door being loaded
    * devcod - Device Code

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Loading Utilities/Terminal Perform TL Directed Loading of All LPNs for Truck 
#########################################################################

Description:
    This scenario performs Directed TL of a dock door. It assigns the user to the door, gets the directed work, then it performs the loading of all the staged LPNS for a door.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * username - Username signed into terminal
    * dock_door - Dock Door being loaded
    * devcod - Device Code

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Loading Utilities/Terminal Outbound Unload and Unpick Shipment
#########################################################################

Description:
    This scenario unloads picked inventory from a outbound trailer, and unpicks the inventory - depending on the decision variable in the input file.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * shpstg_loc - Ship staging location to unload to

Optional Inputs:
    * None

Outputs:
    * pck_lodnum - last unpicked lodnum

#########################################################################
Utility Scenario: Terminal Loading Utilities/Validate Unload and Unpick Equipment
#########################################################################

Description:
    This scenario uses an MSQL to validate successful unload and unpick.

MSQL/Groovy Files or API Endpoints:
    validate_unload_equipment.msql
    validate_unpick_inventory.msql

Required Inputs:
    * pck_lodnum - LPN
    * ok_to_unpick - If we want to unpick inventory after unloading trailer. Can take only 'Y' or 'N'
    * trknum - transport equipment identifier
    * shpstg_loc - location the equipment is being unloaded to

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Loading Utilities/Get Inventory Details for Shipment
#########################################################################

Description:
    This scenario uses an MSQL to look up inventory details for a shipment.

MSQL/Groovy Files or API Endpoints:
    get_inventory_details_for_shipment.msql

Required Inputs:
    * ship_id - shipment ID

Optional Inputs:
    * None

Outputs:
    * number_of_loads - number of loads associated with the shipment
    * lodnum - load associated with the shipment

#########################################################################
Utility Scenario: Terminal Loading Utilities/Terminal Loading Sign On
#########################################################################

Description:
    This scenario signs the user into the door. Trailer Workflows are performed if prompted.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * username - Username signed into terminal
    * dock_door - Dock Door being loaded
    * devcod - Device Code

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Loading Utilities/Get Next LPN for Directed TL Trailer Loading
#########################################################################

Description:
    This scenario runs a SQL to get the next LPN needing for directed TL loading

MSQL/Groovy Files or API Endpoints:
    get_TL_ack_work.msql

Required Inputs:
    * wh_id - Warehouse Id
    * username - Username signed into terminal
    * dock_door - Dock Door being loaded
    * devcod - Device Code

Optional Inputs:
    * None

Outputs:
    * lodnum - LPN to be loaded
    * dock_door - Dock Door to be loaded

#########################################################################
Utility Scenario: Terminal Loading Utilities/Get Next LPN for Directed LTL Trailer Loading
#########################################################################

Description:
    This scenario runs a SQL to get the next LPN needing for directed LTL loading based on the user assigned work

MSQL/Groovy Files or API Endpoints:
    get_next_lpn_trlr_dir_load.msql

Required Inputs:
    * wh_id - Warehouse Id
    * username - Username signed into terminal
    * devcod - Device Code

Optional Inputs:
    * None

Outputs:
    * lodnum - LPN to be loaded
    * yard_loc - Dock Door to be loaded

#########################################################################
Utility Scenario: Terminal Loading Utilities/Get Next LPN for Undirected LTL Trailer Loading
#########################################################################

Description:
    This scenario runs an MSQL to get the yard location, Carrier Code, and gets the next LPN needed for undirected LTL loading

MSQL/Groovy Files or API Endpoints:
    get_LTL_inv_and_trlr.msql

Required Inputs:
    * wh_id - Warehouse Id

Optional Inputs:
    * trlr_id - Trailer Id
    * trlr_num - Trailer Number
    * dock_door - Dock Door
    * ship_id - Ship Id
    * car_move_id - Carrier Move Id

Outputs:
    * lodnum - LPN to be loaded
    * carcod - Carrier Code
    * yard_loc - Dock Door to be loaded

#########################################################################
Utility Scenario: Terminal Loading Utilities/Get Next LPN for Undirected TL Trailer Loading
#########################################################################

Description:
    This scenario runs an MSQL to get the yard location, Carrier Code, and the next LPN needed for undirected LTL loading

MSQL/Groovy Files or API Endpoints:
    get_TL_inv_and_trlr.msql

Required Inputs:
    * wh_id - Warehouse Id

Optional Inputs:
    * trlr_id - Trailer Id
    * trlr_num - Trailer Number
    * dock_door - Dock Door
    * ship_id - Ship Id
    * car_move_id - Carrier Move Id

Outputs:
    * lodnum - LPN to be loaded
    * yard_loc - Dock Door to be loaded

#########################################################################
Utility Scenario: Terminal Loading Utilities/Terminal Outbound Undirected Load LPN to LTL Trailer 
#########################################################################

Description:
    This scenario will pick up and deposit a single LPN on Undirected LTL loading screen. It scans a passed in load number and scans the load to a dock door.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - Load being loaded
    * yard_loc - Dock Door being loaded

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Loading Utilities/Terminal Outbound Trailer Completion
#########################################################################

Description:
    This scenario will process the stop closing logic within the terminal. This scenario assumes the terminal has just completed trailer loading

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * bol_num - Bill of Lading number
    * pro_num - WMS Pro Num
    * seal_num - Seal number

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Loading Utilities/Terminal Outbound Load LPN to Trailer
#########################################################################

Description:
    This scenario will process the TL/LTL loading screen. It scans a passed in load number and scans the load to a dock door.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - Load being loaded
    * yard_loc - Dock Door being loaded

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Loading Utilities/Get Lodnum and Location from Ship ID
#########################################################################

Description:
    This scenario runs a MSQL call to extract the Lodnum and stoloc from the Ship ID.

MSQL/Groovy Files or API Endpoints:
    get_details_from_ship_id.msql

Required Inputs:
    * ship_id - Shipment ID

Optional Inputs:
    * None

Outputs:
    * lodnum - LPN of load in staging location
    * stoloc - outbound staging location relative to ship

#########################################################################
Utility Scenario: Terminal Loading Utilities/Get UOM from Prtnum
#########################################################################

Description:
    This scenario runs a MSQL call to get stkuom from prtnum

MSQL/Groovy Files or API Endpoints:
    get_uom_from_prtnum.msql

Required Inputs:
    * prtnum - Part Number

Optional Inputs:
    * None

Outputs:
    * stkuom - UOM for the provide prtnum

#########################################################################
Utility Scenario: Terminal Loading Utilities/Terminal Perform Outbound Audit
#########################################################################

Description:
    This scenario will assist in conducting an Outbound audit in the terminal. It will enter the needed outbound staging location and lodnum. 
    It will then enter the prtnum, auditted quantity (which can be used to generate a discrepancy), and UOM. It will then press F6 to generate the audit. 
    This routine can be called both in the initial audit and in a recount condition.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * skip_location_lpn - if set this is re-count condition and entering staging location and lodnum is not needed
    * stoloc - outbound staging location
    * lodnum - load number
    * prtnum - part number
    * stkuom - unit of measure relative to prtnum
    * audqty - quantity to enter during audit (if not equal to untqty then this will generate a mismatch)
    * client_id - client ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Loading Utilities/Terminal Initiate and Acknowledge Outbound Audit
#########################################################################

Description:
    Press F6 and complete outbound audit

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - load number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Loading Utilities/Terminal Handle Audit Discrepancies
#########################################################################

Description:
    During an outbound audit, if there were discrepancies found, either fail the test case or perform a re-count.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * discrepancy_action - either fail test (fail) or re-count (recount)

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Terminal Navigation Utilities
Utility File: Terminal Navigation Utilities.feature
###############################################################

Utility Description:
    Utility Scenarios that navigate to certain parts of the Terminal

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Terminal

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal

Public Scenarios:
    * Terminal Navigate to Undirected Menu  - From most screens, navigate to the Undirected Menu
    * Terminal Navigate Quickly to Undirected Menu  - Will navigate to Undirected Menu, not checking for deposit steps
    * Terminal Navigate to Directed Work Menu  - From the Undirected Menu, navigates to the Directed Work Menu
    * Terminal Navigate to Load Equipment Menu  - From the Undirected Menu, navigates to the Load Equipment Menu
    * Terminal Navigate to Close Equipment Menu  - From the Undirected Menu, navigates to the Close Equipment Menu
    * Terminal Navigate to Dispatch Equipment Menu  - From the Undirected Menu, navigates to the Dispatch Equipment Menu
    * Terminal Navigate to LTL Load Menu  - From the Undirected Menu, navigates to the LTL Load Menu
    * Terminal Exit Directed Work Mode  - From Directed Work, whatever state it is in, exit the mode.
    * Terminal Navigate to Cycle Count Menu  - From the Undirected Menu, navigates to the Cycle Count Entry screen
    * Terminal Navigate to Audit Count Menu  - From the Undirected Menu, navigates to the Audit Count Entry screen
    * Terminal Inventory Status Change Menu  - Navigate to the Inventory Status Screen
    * Terminal Inventory Adjustment Menu  - Navigate to the Innventory Adjustment Screen
    * Terminal Receiving Unload Shipment Menu  - Navigate to the Receiving Unload Shipment Screen
    * Terminal Navigate to Inventory Transfer Menu  - Navigate to the Inventory Transfer/Move Screen
    * Terminal Receiving Complete Receiving Menu  - Navigate to the Receiving Complete Rcv Screen
    * Terminal Inventory Display Menu  - Navigate to Inventory Display Screen
    * Terminal Inventory Location Display Menu  - Navigate to Inventory Location Display Screen
    * Terminal Shipping Manual Outbound Audit Menu  - Navigate to Manual Outbound Audit Screen
    * Terminal Navigate to Partial Inventory Move Menu  - Navigate to the Terminal Partial Inventory Move Screen
    * Terminal Navigate to Reopen Equipment Menu  - Navigate to the Terminal Reopen Equipment Menu
    * Terminal Navigate to Unload Equipment Menu  - Navigate to the Terminal Unload Equipment Menu
    * Terminal Navigate to Manual Count Menu  - Navigate to the Terminal Manual Count Menu

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Navigate Quickly to Undirected Menu
#########################################################################

Description:
    This will navigate to the Undirected Menu from most Terminal screens. If will bypass deposit and other checks and simply do the traversal home.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Navigate to Undirected Menu
#########################################################################

Description:
    This will navigate to the Undirected Menu from most Terminal screens.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Exit Directed Work Mode
#########################################################################

Description:
    From Directed Work, exit to the Undirected Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Navigate to Directed Work Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Directed Work Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Navigate to Load Equipment Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Load Equipment Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Navigate to Close Equipment Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Close Equipment Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Navigate to Dispatch Equipment Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Close Equipment Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Navigate to LTL Load Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the LTL Load Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Navigate to Cycle Count Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Cycle Count Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Navigate to Audit Count Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Audit Count Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Navigate to Inventory Transfer Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Inventory Transfer/Move screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Inventory Adjustment Menu
#########################################################################

Description:
    Traverse to the Terminal Inventory Adjustment Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Inventory Display Menu
#########################################################################

Description:
    Traverse to the Terminal Inventory Display Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Receiving Unload Shipment Menu 
#########################################################################

Description:
    Traverse to the Terminal Receiving Upload Ship Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Receiving Complete Receiving Menu 
#########################################################################

Description:
    Traverse to the Terminal Receiving Complete Rcv Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Inventory Location Display Menu
#########################################################################

Description:
    Traverse to the Terminal Inventory Location Display Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Shipping Manual Outbound Audit Menu
#########################################################################

Description:
    Traverse to the Manual Outbound Audit screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Navigate to Partial Inventory Move Menu
#########################################################################

Description:
    Navigate to the Terminal Partial Inventory Move Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Navigate to Manual Count Menu
#########################################################################

Description:
    Navigate to the Terminal Manual Count Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Navigate to Reopen Equipment Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Reopen Equipment Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Navigation Utilities/Terminal Navigate to Unload Equipment Menu
#########################################################################

Description:
    From the Undirected Menu, navigate to the Unload Equipment Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Terminal Pallet Building Utilities
Utility File: Terminal Pallet Building Utilities.feature
###############################################################

Utility Description:
    Utilities to perform Pallet Building

Utility Author: Tryon Solutions
Utility Type: Regression
Functional Area: Undirected Pallet Building

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Public Scenarios:
    * Terminal Pallet Building  - Handles the overall flow and logic of Pallet Building functionality
    * Open Pallet Building Menu Option  - From the Undirected Menu, goes to the Pallet Build screen

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Terminal Pallet Building Utilities/Terminal Pallet Building
#########################################################################

Description:
    From the terminal undirected menu screen, given the pallet building staging location, performs the entirety of the pallet building functionality.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * pb_stage_loc - pallet building staging location

Optional Inputs:
    * pb_max_carton_count - maximum number of cartons that can be built into one pallet

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Pallet Building Utilities/Open Pallet Building Menu Option
#########################################################################

Description:
    From the terminal undirected menu screen, opens the pallet building menu.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Pallet Building Utilities/Process Carton Pallet Build
#########################################################################

Description:
    Handles the looping logic of performing pallet building after the location from which to pallet build is selected

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * carton - Carton number in pallet build staging location

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Pallet Building Utilities/Complete Pallet
#########################################################################

Description:
    Nests logic to see if the current pallet that is being built has been completed or if it should be completed based off maximum number of cartons to a pallet (pb_max_carton_count)

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * pb_max_carton_count - Maximum number of cartons to a pallet

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Pallet Building Utilities/Determine Pallet Build Mode
#########################################################################

Description:
    Determines the pallet build mode - new or adding to a pallet based on cursor position in the terminal screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * mode - Determine whether we are using a new pallet or adding to an existing pallet build pallet

#########################################################################
Utility Scenario: Terminal Pallet Building Utilities/Get Next Carton for Pallet Building
#########################################################################

Description:
    Get the next carton for pallet building from the pallet build staging locations

MSQL/Groovy Files or API Endpoints:
    get_next_pallet_build_carton_in_staging_location.msql

Required Inputs:
    * pb_stage_loc - pallet build staging location

Optional Inputs:
    * None

Outputs:
    * carton_found - binary variable. YES or NO
    * carton - sub load number (identifier) of the carton to be pallet built
    * pallet_loc - The pallet build location
    * consolidate_val - pallet build consolidation by (if applicable)

#########################################################################
Utility Scenario: Terminal Pallet Building Utilities/Check Pallet Build Stage for Cartons
#########################################################################

Description:
    Checks pallet build staging location for cartons available

MSQL/Groovy Files or API Endpoints:
    get_carton_count_in_pallet_build_stage.msql

Required Inputs:
    * pb_stage_loc - Pallet Building staging location

Optional Inputs:
    * None

Outputs:
    * staged_carton_count - Number of cartons available in the specified pallet build stage location

#########################################################################
Utility Scenario: Terminal Pallet Building Utilities/Get Carton Count on Pallet Build Pallet
#########################################################################

Description:
    Get the carton count on a pallet that is currently being built

MSQL/Groovy Files or API Endpoints:
    get_carton_count_on_pallet_for_pallet_build.msql

Required Inputs:
    * pallet - lodnum of pallet being built currently

Optional Inputs:
    * None

Outputs:
    * carton_count - Number of cartons that have been built into the current pallet building pallet

#########################################################################
Utility Scenario: Terminal Pallet Building Utilities/Get Pallet Position for New Pallet
#########################################################################

Description:
    Runs a MSQL to determine pallet position for new pallet.

MSQL/Groovy Files or API Endpoints:
    get_pallet_build_position_for_new_pallet.msql

Required Inputs:
    * pallet_loc - Pallet Build location

Optional Inputs:
    * None

Outputs:
    * palpos - the pallet position for the new pallet

#########################################################################
Utility Scenario: Terminal Pallet Building Utilities/Get Pallet Number in Pallet Position
#########################################################################

Description:
    Runs a MSQL to determine pallet number (lodnum) in a pallet position (palpos).

MSQL/Groovy Files or API Endpoints:
    get_pallet_in_pallet_build_position.msql

Required Inputs:
    * pallet_loc - Pallet Build location
    * palpos - the pallet position to check

Optional Inputs:
    * None

Outputs:
    * pallet - load number of pallet being built currently


###############################################################
Utility Name: Terminal Pallet Picking Utilities
Utility File: Terminal Pallet Picking Utilities.feature
###############################################################

Utility Description:
    Utilities to perform Pallet Picking

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Public Scenarios:
    * Perform Pallet Pick for Order  - Performs all Pallet Picks associated with an Order
    * Perform Undirected Pallet Pick for Order  - Performs all Pallet Picks via Undirected associated with an Order
    * Navigate to Pick Product Screen  - Navigate to the Pick Product screen.

Utility Assumptions:
    * None

Utility Notes:
    * See Scenario Headers for required inputs.

#########################################################################
Utility Scenario: Terminal Pallet Picking Utilities/Perform Pallet Pick for Order
#########################################################################

Description:
    From the Directed Work screen, given an order number/operation code/username, performs the entirety of the associated pallet picks.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * oprcod - set to the pallet picking operation code
    * username - the user assigned to or user to assign to
    * ordnum - The order that will be pallet picked

Optional Inputs:
    * cancel_and_reallocate - Will cancel the Carton Pick and reallocate if set to "true"

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Pallet Picking Utilities/Perform Undirected Pallet Pick for Order
#########################################################################

Description:
    From the Directed Work screen, given an order number/operation code/username, performs the entirety of the associated pallet picks.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * oprcod - set to the pallet picking operation code
    * username - the user assigned to or user to assign to
    * ordnum - The order that will be pallet picked

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Pallet Picking Utilities/Navigate to Pick Product Screen
#########################################################################

Description:
    This scenario Navigates to Pick Product screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Pallet Picking Utilities/Pallet Picking Process Detail
#########################################################################

Description:
    This scenario performs Pallet Picking to completion from the Directed Work screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Pallet Picking Utilities/Pallet Picking Directed Cancel and Reallocate Process Detail
#########################################################################

Description:
    This scenario cancels each Pallet Pick in a batch and sends it to Reallocation

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Pallet Picking Utilities/Pallet Picking Undirected Process Detail
#########################################################################

Description:
    This scenario performs List Picking to completion from the Product Pickup screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * wrkref - the Work Reference Number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Pallet Picking Utilities/Get Pallet Pick Undirected Work by Order Number and Operation
#########################################################################

Description:
    Obtains a work reference number (wrkref) for a pick.

MSQL/Groovy Files or API Endpoints:
    get_undirected_pallet_pick_work_reference_by_order_and_operation_code.msql

Required Inputs:
    * oprcod - Operation Code.
    * ordnum - Order Number associated with this pick.

Optional Inputs:
    * None

Outputs:
    * wrkref - the Work Reference number associated with this order.

#########################################################################
Utility Scenario: Terminal Pallet Picking Utilities/Get Directed Work Picking Work Reference by Order Number and Operation
#########################################################################

Description:
    Returns MOCA status of 0 when there are Pallet Picks found in MOCA for this order.

MSQL/Groovy Files or API Endpoints:
    get_picking_work_reference_directed_work_by_order_and_operation_code.msql

Required Inputs:
    * oprcod - Operation Code.
    * ordnum - Order Number associated with this pick.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Pallet Picking Utilities/Get Pallet Number from Source Location for Picking
#########################################################################

Description:
    Returns MOCA status of 0 when there are Pallets in the specified location containing the Part Number specified.

MSQL/Groovy Files or API Endpoints:
    get_pallet_number_from_source_location_for_picking.msql

Required Inputs:
    * srcloc - Source Location
    * prtnum - Part Number

Optional Inputs:
    * None

Outputs:
    * lodnum - Load Number associated with this pallet.


###############################################################
Utility Name: Terminal Picking Utilities
Utility File: Terminal Picking Utilities.feature
###############################################################

Utility Description:
    Utilities that are common across all picking operations - including getting and validating data.

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Terminal

Public Scenarios:
    * Check Pick Directed Work Assignment by Operation and Location  - Checks whether there are remaining picks for the assigned user at the specified Location.

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Terminal Picking Utilities/Check Pick Directed Work Assignment by Operation and Location
#########################################################################

Description:
    Returns MOCA status of 0 when there are Picks assigned to the active user corresponding to the Operation Code and Location specified.

MSQL/Groovy Files or API Endpoints:
    check_pick_directed_work_by_operation_and_location_assigned_to_user.msql

Required Inputs:
    * oprcod - Operation Code
    * srcloc - Source Location
    * devcod - Device Code (Terminal Id)
    * username - Username logged into this device

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Terminal Receiving Utilities
Utility File: Terminal Receiving Utilities.feature
###############################################################

Utility Description:
    This Utility contains common scenarios for Terminal Receiving Features

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Public Scenarios:
    * Terminal Putaway Menu  - Navigate to the Undirected Putwaway screen
    * Terminal Undirected Putaway  - performs undirected inbound terminal putaway
    * Terminal LPN Receiving Menu  - navigates to LPN Receiving menu
    * Terminal LPN Reverse Receipt Menu  - navigates to the Reverse Order screen
    * Terminal Reverse Receipt  - Reverses an order
    * Terminal Process Product Putaway  - Once on Putaway Screen enter putaway method and process
    * Terminal ASN Receiving  - From an opened receipt, performs ASN Receiving
    * Terminal Non-ASN Receiving - From an opened receipt, performs non - ASN Receiving
    * Validate Putaway Was Successful  - validates a load is at a location
    * Terminal Receiving Without Order Menu  - navigates to the Receive Without Order screen
    * Terminal Receiving Without Order  - receives without order
    * Terminal Unload Shipment  - Process the Unload Shipment Screen
    * Terminal Dispatch Equipment  - Process the dispatch equipment receiving screen
    * Terminal Confirm Dispatch Equipment  - confirm dispatch of equipment
    * Cancel Cycle Count  - Cancel a Cycle count relative to a location
    * Terminal Complete Receiving  - complete the receiving process from the Complete Rcv screen.
    * Terminal Trigger Product Putaway  - Press F6 and move to Putaway screen
    * Get Create Footprint Policy Flag - Read the CREATE - FOOTPRINT receiving policy
    * Terminal ASN Receiving Non-Trusted Supplier - performs ASN Receiving for a non - trusted supplier
    * Terminal Receiving Product Pickup Directed Work  - Process Product Pickup via Directed Work after directed putaway

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Receiving Product Pickup Directed Work
#########################################################################

Description:
    Process Product Pickup via Directed Work after directed putaway

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lpn - LPN of inventory being picked up and deposited after directed putaway

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Complete Receiving
#########################################################################

Description:
    This scenario completes the receiving process from the Complete Rcv screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * yard_loc - yard location, receiving dock door
    * trlr_num - trailer number

Optional Inputs:
    * expect_discrepancies - should we expect descepancies when completing receive
    * complete_rcv_close_equipment - close equipment on complete receiving (default)
    * complete_rcv_close_shipment - close shipment on complete receiving

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Putaway Menu
#########################################################################

Description:
    This scenario will navigate to the Undirected Putaway Screen (from the top-level undirected menu)

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Undirected Putaway
#########################################################################

Description:
    This scenario executes an inbound putaway through the terminal Assumes you are on the undirected Putaway Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - the LPN that was deposited

Optional Inputs:
    * dep_loc - the deposit location

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal LPN Receiving Menu
#########################################################################

Description:
    This scenario navigates to the LPN Receiving Menu from the Undirected Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal LPN Reverse Receipt Menu
#########################################################################

Description:
    This scenario navigates to the Reverse Order Menu from the Undirected Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Reverse Receipt
#########################################################################

Description:
    This scenario reverses an order given a load number.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - the load to reverse

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Validate Putaway Was Successful
#########################################################################

Description:
    This scenario verifies that a given lodnum is in the expected location after depositing.

MSQL/Groovy Files or API Endpoints:
    validate_inventory_location_by_lodnum.msql

Required Inputs:
    * lodnum - the LPN that was deposited
    * dep_loc - the location where the lodnum was deposited

Optional Inputs:
    * None

Outputs:
    * error_message - string containing the error message

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal ASN Receiving
#########################################################################

Description:
    From an opened receipt, performs ASN Receiving.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * asn_lodnum - The ASN Load to receive
    * prtnum - The part being received

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Non-ASN Receiving
#########################################################################

Description:
    From an opened receipt, performs non-ASN Receiving.

MSQL/Groovy Files or API Endpoints:
    check_3pl.msql
    check_confirm_create.msql
    check_lodlvl.msql

Required Inputs:
    * rcv_qty - the number to receive
    * prtnum - the part to receive

Optional Inputs:
    * lpn - the load to associate the received goods with, if not populated, will be auto-generated
    * rcv_prtnum - a prtnum to test blind receiving
    * lotnum - a Lot Number to associate with the received prtnum if lot enabled
    * receive_more_flag - TRUE/FALSE determine if screen press Y/N to possible "Receive More" prompts (Def:FALSE)
    * revlvl - revision level

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal ASN Receiving Non-Trusted Supplier
#########################################################################

Description:
    From an opened receipt, performs ASN Receiving for a non-trusted supplier

MSQL/Groovy Files or API Endpoints:
    check_3pl.msql

Required Inputs:
    * rcv_qty - the number to receive
    * prtnum - the part to receive
    * asn_lodnum - the load number associated to the ASN

Optional Inputs:
    * rcv_prtnum - the prtnum to be changed on the ASN LPN.
    * rcv_chg_sts - Valid Inv Status, if the inventory status needs to be changed on receipt
    * rcv_qty - quantity to receive, if quantity needs to be changed on receipt
    * rcv_uom - receieve unit of measure
    * chg_qty - flag that prompts recieve quantity to be overriden, if receive quantity needs to be changed upon receipt
    * chg_uom - flag that prompts uom to be overriden, if unit of measure needs to be changed on receipt
    * chg_sts - flag that prompts invsts to be overriden, if the inventory status needs to be changed on receipt
    * lotnum - a Lot Number to associate with the received prtnum if lot enabled
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * expqty - The number expected- to be inputted as receive quantity

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Unload Shipment
#########################################################################

Description:
    Process the Unload shipment screen for reveiving. On completion transition to confirmation of trailer workflow.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * yard_loc - Receiving door
    * rec_loc - Location to receive shipment to

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Dispatch Equipment
#########################################################################

Description:
    Process the dispatch equipment screen. On completion confirm the dispatch operation.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * trac_ref - tracking reference information
    * driver_lic - drivers license information
    * driver_nam - drivers name information

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Confirm Dispatch Equipment
#########################################################################

Description:
    Answer Y to dispatch question.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Cancel Cycle Count
#########################################################################

Description:
    Cancel a Cycle Count relative to a location

MSQL/Groovy Files or API Endpoints:
    cancel_cycle_count.msql

Required Inputs:
    * count_location - location where you want count canceled
    * wh_id - warehouse id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Trigger Product Putaway
#########################################################################

Description:
    Press F6 and move to the Product Putaway Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Receiving Without Order Menu 
#########################################################################

Description:
    This scenario navigates to the Receive Without Order Menu from the Undirected Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Receiving Without Order
#########################################################################

Description:
    Terminal Receiving Without Order.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * rec_quantity - the quantity to be receive
    * lodnum - the load to associate the received goods with
    * prtnum - the part to receive
    * reason - reason for receiveing
    * status - a valid inventory status
    * putaway_method - 1 is Directed, 2 is Sorted, 3 is Undirected.
    * deposit_loc - If it is Storage location provide:storage_loc - Else for Receive Stage location provide:rec_loc

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Get Create Footprint Policy Flag
#########################################################################

Description:
    Get Create Footprint Policy 

MSQL/Groovy Files or API Endpoints:
    list_policy_data.msql

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * create_footprint_flag - Policy value

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Process Product Putaway
#########################################################################

Description:
    From Product Putaway Screen, input the putaway method and process responses

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * putaway_method - 1 is Directed, 2 is Sorted, 3 is Undirected

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Receiving Input Load
#########################################################################

Description:
    Input asn load number in the receiving screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * asn_lodnum - load number to be input in the receiving screen None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Receiving Process Lot
#########################################################################

Description:
    Input lot number if required during terminal receiving

MSQL/Groovy Files or API Endpoints:
    check_lot.msql

Required Inputs:
    * lotnum - lot number to be inputted if part is lot enabled.
    * prtnum - part number to check lot on

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Receiving Process Over Receipt
#########################################################################

Description:
    Process Terminal over-receipt error message

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Receiving Process Manufacturing Date
#########################################################################

Description:
    Check to see if the part has an aging profile defined, and handle manufacturing date and default status accordingly.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * age_profile - age profile

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Receiving Process Aging Profile
#########################################################################

Description:
    Check to see if the part has an aging profile defined, and handle accordingly.

MSQL/Groovy Files or API Endpoints:
    check_aging.msql

Required Inputs:
    * prtnum - part number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Process Subload Receiving
#########################################################################

Description:
    Process the capture of sub lpns

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Terminal Process Detail Receiving
#########################################################################

Description:
    Process the capture of detail lpns

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Receiving Utilities/Generate Subload LPN for Receiving
#########################################################################

Description:
    Generate a subload LPN for receiving functions

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * subload_lpn - detail lpn for receiving


###############################################################
Utility Name: Terminal Replenishment Utilities
Utility File: Terminal Replenishment Utilities.feature
###############################################################

Utility Description:
    Utilities that are common across all replenishment operations - including getting and validating data.

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Replenishment

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Terminal

Public Scenarios:
    * Terminal Replenishment  - performs Case or Pallet Replenishment

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Terminal Replenishment Utilities/Terminal Replenishment
#########################################################################

Description:
    This scenario performs top-level work for a case or pallet replenishment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * palloc - pallet location where replenishment should occur
    * casloc - case location where replenishment should occur

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Replenishment Utilities/Terminal Process Replenishment Pick
#########################################################################

Description:
    From directed work, once you are on the Replenish Pick Screen, process the screen inputs. These inputs are slightly different for case versus pallet replenishments.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * replen_type - either case or pallet

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Replenishment Utilities/Get Replenishment Pick Work Reference
#########################################################################

Description:
    This scenario runs MSQL to determine if the replenishment has been processed and is available in the pckwrk_view table.

MSQL/Groovy Files or API Endpoints:
    get_emergency_replen_work_reference_by_part_location_operation.msql

Required Inputs:
    * t_storage_location - Storage Location containing the case or pallet inventory
    * prtnum - Part Number
    * oprcod - Operation Code

Optional Inputs:
    * None

Outputs:
    * wrkref - Work Reference Id

#########################################################################
Utility Scenario: Terminal Replenishment Utilities/Get Directed Replenishment Work by Work Reference and Operation
#########################################################################

Description:
    Returns MOCA status of 0 when there are Pallet Replenishment Picks found in MOCA for this order.

MSQL/Groovy Files or API Endpoints:
    get_replen_directed_work_by_work_reference_and_operation.msql

Required Inputs:
    * oprcod - Operation Code.
    * wrkref - Work Reference number.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Replenishment Utilities/Get Case Number from Source Location for Picking
#########################################################################

Description:
    Returns MOCA status of 0 when there are Cases in the specified location containing the Part Number specified.

MSQL/Groovy Files or API Endpoints:
    get_case_number_from_source_location_for_picking.msql

Required Inputs:
    * srcloc - Source Location
    * prtnum - Part Number

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Terminal Serialization Utilities
Utility File: Terminal Serialization Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios with MOCA commands and terminal steps performing serial number capture and confirmation actions both for Picking and Receiving scenarios

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Serialization

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Public Scenarios:
    * Get Item Serialization Type  - return seq_typ prtnum attribute of CRDL_TO_GRAVE, OUTCAP_ONLY, or NONE
    * Terminal Scan Serial Number Outbound Capture Picking  - perform OUTCAP_ONLY serial number processing for picking
    * Terminal Scan Serial Number Cradle to Grave Picking  - perform CRDL_TO_GRAVE serial number processing for picking
    * Terminal Scan Serial Number Cradle to Grave Receiving  - perform CRDL_TO_GRAVE receiving serial number processing
    * Add Serial Numbers for Cradle to Grave  - Add serial numbers to ASN receiving case
    * Terminal Validate ASN Serial Number Cradle to Grave Receiving  - If ASN receiving serialization, lookup and validate assigned serial numbers

Utility Assumptions:
    * There are several prerequisites in order to test items with serialization enabled. The data required for testing serialized items is dependent upon the 
      serialization type assigned to the item (seq_typ) as well as the serial number types assigned to those items.
    * Picking for Outbound Capture items
    * A list of valid serial numbers needs to be available for cycle to support picking with outbound capture serial capture
    * The serial numbers in this file must conform to the serial mask set up for the serial number type
    * The serial number files need to be stored the top-level sub-directory Data/Serial Numbers
    * The file should be named as follows: Serial_List_Outcap_(Serial Number Type).txt where (Serial Number Type) is replaced by a valid serial number type 
      Examples: Serial List Outcap CYCCS01.txt Serial List Outcap CYCCS02.txt
    * Each file should include unique serial number ranges for the serial number type to ensure proper function of the picking scenarios
    * Picking for Cradle to Grave items
    * Cradle to grave serialized items require serial numbers to be assigned to the inventory being picked
    * The cradle to grave scenarios retrieve the serial numbers from the pick source location and use those values for confirmation
    * Receiving for Cradle to Grave items
    * If ASN, the serial numbers need to be assigned to the ASN (or for CNT inventory). This can be done with "Add Serial Numbers for Cradle to Grave" scenario (in this Utility) 
      after the dataset has been loaded.
    * If non-ASN, serial numbers will be captured after inventory has been created.
    * Serial number files for EACH and CASE (for Receiving) are in the Data/Serial Numbers directory. Each file has a max of 100 serial numbers. 
      More can be added if needed. Serial numbers used in Picking and Receiving have different starting numbers (00 for Picking and 99 for Receiving)
    * When inventory is cleaned up the associated serial numbers should also be cleaned up by the test

Utility Notes:
    * None

#########################################################################
Utility Scenario: Terminal Serialization Utilities/Get Item Serialization Type
#########################################################################

Description:
    This scenario will call a MSQL script to look at the specified part and look at seq_typ attribute to determine if CRDL_TO_GRAVE or OUTCAP_ONLY is set and return. 
    If not set, MSQL and scenario will return "NONE"

MSQL/Groovy Files or API Endpoints:
    get_item_serialization_type.msql

Required Inputs:
    * prtnum - part number
    * wh_id - warehouse ID
    * client_id - Client ID

Optional Inputs:
    * None

Outputs:
    * ser_typ - CRDL_TO_GRAVE, OUTCAP_ONLY, or NONE

#########################################################################
Utility Scenario: Terminal Serialization Utilities/Terminal Scan Serial Number Outbound Capture Picking
#########################################################################

Description:
    For OUTCAP_ONLY serialization, for each part extract the serial number type from the screen. Then from serial number file, extract the next serial number and use as input on for screen. 
    Check for errors from that output.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * serial_num_type - serial number type (i.e CYCEA01)
    * serialization_phase - set to PCK

#########################################################################
Utility Scenario: Terminal Serialization Utilities/Terminal Scan Serial Number Cradle to Grave Receiving
#########################################################################

Description:
    For CRDL_TO_GRAVE receiving serialization, for each part extract the serial number type from the screen. Then from serial number file, extract the next serial number 
    and use as input. Check for errors from that output.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * serial_num_type - serial number type (i.e CYCEA01)
    * serialization_phase - set to RCV

#########################################################################
Utility Scenario: Terminal Serialization Utilities/Terminal Scan Serial Number Cradle to Grave Picking
#########################################################################

Description:
    For CRDL_TO_GRAVE serialization, call utility scenario Get Serial Number List for Cradle to Grave who's results will have information about the srcloc/prtnum's 
    lookup of inv_ser_num table results. Use that data and the serial number from the query to enter into the terminal screens serial number input and look for errors.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * serialization_phase - set to PCK

#########################################################################
Utility Scenario: Terminal Serialization Utilities/Add Serial Numbers for Cradle to Grave
#########################################################################

Description:
    For CRDL_TO_GRAVE serialization and ASN receiving, add serial numbers relative to the lodnum/prtnum in the ASN. This is not done in the dataset, but in 
    this standalone scenario to support serialized and non-serialized cases and usually called in the test case Background scenario.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * prtnum - part number
    * wh_id - warehouse ID
    * client_id - Client ID
    * lodnum - the ASN lodnum

Optional Inputs:
    * None

Outputs:
    * serialization_phase - set to RCV

#########################################################################
Utility Scenario: Terminal Serialization Utilities/Terminal Validate ASN Serial Number Cradle to Grave Receiving
#########################################################################

Description:
    For CRDL_TO_GRAVE serialization, call utility scenario Get Serial Number List for Cradle to Grave for ASN Receiving who's results will have information 
    about the srcloc/prtnum's lookup of inv_ser_num table results. Use that data and the serial number from the query to enter into the terminal screens serial number input and look for errors.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * serialization_phase - set to RCV

#########################################################################
Utility Scenario: Terminal Serialization Utilities/Get Serial Number Type IDs
#########################################################################

Description:
    For CRDL_TO_GRAVE and ASN Receiving, get the list of serial number type IDs relative to the lodnum/prtnumm, return all in a comma separted formated variable

MSQL/Groovy Files or API Endpoints:
    get_serial_num_type_id.msql

Required Inputs:
    * prtnum - part number
    * wh_id - warehouse ID
    * lodnum - ASN lodnum

Optional Inputs:
    * None

Outputs:
    * ser_typ_list - comma separated list of serial number types for this part

#########################################################################
Utility Scenario: Terminal Serialization Utilities/Add Serial Numbers to ASN Inventory
#########################################################################

Description:
    For CRDL_TO_GRAVE and ASN Receiving, call MSQL to add a new serial number to the ASN. This is done by calling Process Host Receipt Serial Number inside MSQL file.

MSQL/Groovy Files or API Endpoints:
    ASN_add_serial_numbers.msql

Required Inputs:
    * prtnum - part number
    * wh_id - warehouse id
    * client_id - client id
    * lodnum - ASN lodnum
    * catch_qty - catch quantity
    * untqty - unit quantity
    * subnum - sub number
    * dtlnum - detail number
    * untcas - unit case
    * serial_scan - serial number to add
    * serial_num_type - serial number type id

Optional Inputs:
    * None

Outputs:
    * serial_num_typ_id_1 - first serial number type ID
    * serial_num_typ_id_2 - second serial number type ID

#########################################################################
Utility Scenario: Terminal Serialization Utilities/Get Detail from Lodnum
#########################################################################

Description:
    For CRDL_TO_GRAVE amd ASN Receiving, call MSQL to pull information from inventory_view information relative to the ASN lodnum. 
    This information is used in Add Serial Numbers to ASN Inventory to add serial numbers to the ASN

MSQL/Groovy Files or API Endpoints:
    ASN_serial_number_find_detail_from_lodnum.msql

Required Inputs:
    * prtnum - part number
    * wh_id - warehouse ID
    * lodnum - ASN lodnum

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Serialization Utilities/Get Serial Number from Serial Number File
#########################################################################

Description:
    For serializations requiring access to serial numbers, look up list of serial numbers and cycle through that list until one is not used by the system and return it

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * serial_num_file - file containing serial numbers for use
    * wh_id - warehouse ID
    * lodnum - ASN lodnum

Optional Inputs:
    * None

Outputs:
    * serial_scan - available serial number for use

#########################################################################
Utility Scenario: Terminal Serialization Utilities/Terminal Set Serial Scan Cursor Positions
#########################################################################

Description:
    For CRDL_TO_GRAVE and OUTCAP_ONLY serialization types and screens, set locations for the cursor and column locations.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * serialization_type - CRDL_TO_GRAVE or OUTCAP_ONLY

Optional Inputs:
    * serialization_phase - RCV for receiving, PCK for picking

Outputs:
    * cursor_line - based on terminal type and serialization type, return screen cursor line relative to input serial number location
    * cursor_column - based on terminal type and serialization type, return location column location relative to input serial number location

#########################################################################
Utility Scenario: Terminal Serialization Utilities/Terminal Check for Serial Capture Errors
#########################################################################

Description:
    Scenario will look for strings in the terminal and detect error conditions for a serialization input/action and fail the step.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Serialization Utilities/Create Variable cradle_to_grave_rcv_serial_file
#########################################################################

Description:
    For Receiving CRADE_TO_GRAVE serialization, determine and return the location of where the serial number files are located relative to standard location base, serial number type, and optional suffix.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * serial_num_type - serial number type (i.e. CYCEA01)
    * serial_numbers_directory_location - location of serial numbers (set in Environment)

Optional Inputs:
    * serial_num_file_suffix - suffix to apply to serial number file

Outputs:
    * crdle_to_grave_rcv_serial_file - location of serial numbers files

#########################################################################
Utility Scenario: Terminal Serialization Utilities/Create Variable outbound_cap_serial_file
#########################################################################

Description:
    For OUTCAP_ONLY serialization, determine and return the location of where the serial number files are located relative to standard location base, serial number type, and optional suffix.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * serial_num_type - serial number type (i.e. CYCEA01)
    * serial_numbers_directory_location - location of serial numbers (set in Environment)

Optional Inputs:
    * serial_num_file_suffix - suffix to apply to serial number file

Outputs:
    * outbound_cap_serial_file - location of serial numbers files

#########################################################################
Utility Scenario: Terminal Serialization Utilities/Get Serial Number List for Cradle to Grave
#########################################################################

Description:
    For CRDLE_TO_CRAVE serialization, relative to source location and part number look up information in the inventory serial number table (inv_ser_num). 
    Those results will be used in the Terminal Scan Serial Number Cradle to Grave Picking utility scenario.

MSQL/Groovy Files or API Endpoints:
    get_serial_number_list_for_cradle_to_grave_picking.msql

Required Inputs:
    * srcloc - source location for the part
    * prtnum - part number
    * wh_id - warehouse ID
    * client_id - Client ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Serialization Utilities/Check if Serial Number is in Use
#########################################################################

Description:
    check the inv_ser_num table and look to see if the proposed serial number is already in use

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * serial_scan - serial number scanned from serial number file

Optional Inputs:
    * None

Outputs:
    * serial_number_in_use - TRUE|FALSE if serial number if in use


###############################################################
Utility Name: Terminal Trailer Move Utilities
Utility File: Terminal Trailer Move Utilities.feature
###############################################################

Utility Description:
    This Utility contains scenarios to perform actions specific to trailer moves in the terminal

Utility Author: Tryon Solutions
Utility Type: Regression
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Public Scenarios:
    * Terminal Trailer Moving - top - level move scenario in terminal
    * Terminal Verify and Escalate Directed Work  - verifies if it is directed work and escalates if appropriate
    * Create Trailer Move Work  - creates trailer move work
    * Trailer Moving Post Move Checks  - used by terminal and web to verify trailer is in expected final location
    * Trailer Move Post Work Checks  - used by terminal and web to validate trailer work exists or is in expected final location
    * Trailer Validate Move Data  - used by terminal and web to verify trailer is created and checked in

Utility Assumptions:
    * None

Utility Notes:
    * The Scenarios without Terminal in their name are used in both Web and Terminal test cases

#########################################################################
Utility Scenario: Terminal Trailer Move Utilities/Terminal Trailer Moving
#########################################################################

Description:
    This scenario moves a trailer using the Terminal

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - Trailer Number
    * carcod - Carrier Code
    * move_to_dock_loc - Location trailer will be moved to
    * check_in_dock_loc - Location trailer will be checked in to
    * work_queue_or_immediate - Variable that indicates when the move is performed

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Trailer Move Utilities/Terminal Verify and Escalate Directed Work
#########################################################################

Description:
    This scenario verifies directed work is required and escalates it if so

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - Trailer Number
    * carcod - Carrier Code
    * username - User performing the work
    * move_to_dock_loc - Location trailer will be moved to
    * check_in_dock_loc - Location trailer will be checked in to
    * work_queue_or_immediate - Variable that indicates when the move is performed

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Trailer Move Utilities/Trailer Validate Move Data
#########################################################################

Description:
    This scenario verifies trailer is created and checked in

MSQL/Groovy Files or API Endpoints:
    validate_trailer_move.msql

Required Inputs:
    * trlr_num - Trailer Number
    * carcod - Carrier Code
    * check_in_dock_loc - Location trailer will be check in to

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Trailer Move Utilities/Trailer Moving Post Move Checks
#########################################################################

Description:
    This scenario verifies trailer is in expected final location

MSQL/Groovy Files or API Endpoints:
    validate_trailer_move.msql

Required Inputs:
    * trlr_num - Trailer Number
    * carcod - Carrier Code
    * move_to_dock_loc - Location trailer will be moved to

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Trailer Move Utilities/Trailer Move Post Work Checks
#########################################################################

Description:
    This scenario verifies trailer work exists or is in expected final location

MSQL/Groovy Files or API Endpoints:
    verify_trailer_move_directed_work.msql

Required Inputs:
    * trlr_num - Trailer Number
    * carcod - Carrier Code
    * move_to_dock_loc - Location trailer will be moved to
    * check_in_dock_loc - Location trailer will be check in to
    * username - User performing the work
    * work_queue_or_immediate - Indicates move method

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Trailer Move Utilities/Create Trailer Move Work
#########################################################################

Description:
    This scenario creates trailer move work

MSQL/Groovy Files or API Endpoints:
    create_trailer_move_work_for_terminal.msql

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Trailer Move Utilities/Terminal Increase Trailer Move Directed Work Priority
#########################################################################

Description:
    This scenario escalates trailer move directed work

MSQL/Groovy Files or API Endpoints:
    escalate_trailer_move_directed_work_priority.msql

Required Inputs:
    * trlr_num - Trailer Number
    * carcod - Carrier Code
    * username - User performing the work
    * move_to_dock_loc - Location trailer will be moved to
    * check_in_dock_loc - Location trailer will be check in to

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Terminal Trailer Utilities
Utility File: Terminal Trailer Utilities.feature
###############################################################

Utility Description:
    This Utility stores Terminal Trailer Utility functions

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Outbound Trailer

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Public Scenarios:
    * Terminal Outbound Trailer Close  - Closes a trailer using the terminal
    * Terminal Outbound Trailer Dispatch  - Dispatches a trailer using the terminal
    * Terminal Outbound Trailer Reopen  - This scenario will reopen the closed Transport Equipment
    * Validate Trailer Closed  - Will validate that the trailer is closed or not
    * Validate Trailer Dispatched  - Will validate that the trailer is dispatched or not
    * Validate Trailer Open  - Will validate that the trailer is open or not
    * Validate Trailer Reopened  - Will validate that the trailer has been reopened

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Terminal Trailer Utilities/Terminal Outbound Trailer Dispatch
#########################################################################

Description:
    This scenario dispatches an outbound trailer using the terminal

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * dock_door - Dock Door where tailier is being dispatch

Optional Inputs:
    * trac_ref - tracking reference for dispatch information
    * driver_lic - drivers license for dispatch information
    * driver_nam - drivers name for dispatch information

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Trailer Utilities/Terminal Outbound Trailer Close
#########################################################################

Description:
    This scenario closes a trailer using the terminal

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * dock_door - Dock Door where tailier is being closed

Optional Inputs:
    * seal_num1 - Seal Number 1
    * seal_num2 - Seal Number 2
    * seal_num3 - Seal Number 3
    * seal_num4 - Seal Number 3

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Trailer Utilities/Terminal Outbound Trailer Reopen 
#########################################################################

Description:
    This scenario will reopen the closed Transport Equipment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Trailer ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Trailer Utilities/Validate Trailer Reopened
#########################################################################

Description:
    This scenario will verify that the closed transport equipment has been re-opened

MSQL/Groovy Files or API Endpoints:
    validate_trailer.msql

Required Inputs:
    * trlr_id - Trailer ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Trailer Utilities/Validate Trailer Closed
#########################################################################

Description:
    This scenario will verify that the transport equipment has been closed or not

MSQL/Groovy Files or API Endpoints:
    validate_trailer_closed.msql

Required Inputs:
    * trlr_id - Trailer ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Trailer Utilities/Validate Trailer Dispatched
#########################################################################

Description:
    This scenario will verify that the transport equipment has been dispatched or not

MSQL/Groovy Files or API Endpoints:
    validate_trailer_dispatched.msql

Required Inputs:
    * trlr_id - Trailer ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Trailer Utilities/Check Shipping Paperwork Required Policy
#########################################################################

Description:
    Run MSQL to read the check shipping paperwork required policy from the policy table

MSQL/Groovy Files or API Endpoints:
    check_shipping_paperwork_required.msql

Required Inputs:
    * wh_id - Warehouse Id (wh_id)

Optional Inputs:
    * None

Outputs:
    * pprwrk_req - Paperwork Required Flag

#########################################################################
Utility Scenario: Terminal Trailer Utilities/Terminal Outbound Trailer Document Entry
#########################################################################

Description:
    This scenario enters document numbers

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * term_type - Terminal type
    * bol_num - Bill of Lading number
    * pro_num - WMS Pro Num

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Trailer Utilities/Terminal Outbound Trailer Complete Stop
#########################################################################

Description:
    This scenario completes an outbound stop

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * term_type - Terminal type
    * seal_num - Seal number

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Terminal Unpick Utilities
Utility File: Terminal Unpick Utilities.feature
###############################################################

Utility Description:
    This Utility contains utility scenarios to perform unpick functionality in the terminal

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Terminal

Public Scenarios:
    * Terminal Perform Unpick  - Performs a terminal unpick operation
    * Terminal Navigate to Unpick Menu  - Navigate to the terminal unpick menu

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Terminal Unpick Utilities/Terminal Perform Unpick
#########################################################################

Description:
    Performs a Terminal Unpick operation in terminal

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * pck_lodnum - Pick load to be unpicked
    * unpick_partial - Flag indicating partial or full unpick
    * cancod - Cancel Code
    * putaway_method - Type of putaway for unpicked inventory

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Unpick Utilities/Terminal Navigate to Unpick Menu
#########################################################################

Description:
    Navigates to the Unpick screen from the Undirected Menu

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Unpick Utilities/Terminal Perform Unpick Partial
#########################################################################

Description:
    Performs a partial Terminal Unpick.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * client_id - Client
    * prtnum - Part Number
    * unpick_qty - Partial qty to unpick
    * unpick_to_lodnum - LPN to put partial unpicked inventory

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Terminal Utilities
Utility File: Terminal Utilities.feature
###############################################################

Utility Description:
    Utility Scenarios that perform generic terminal operations common to many processes.

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Terminal

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Public Scenarios:
    * Terminal Clear Field  - Uses a shortcut to empty a terminal field
    * Terminal Login  - Performs a clean login from most terminal states
    * Terminal Deposit  - Performs either an Inventory, Load, or Product Deposit.
    * Terminal Wait Until First Line Is Not Blank  - Waits until the Terminal's first line is not blank
    * Terminal Logout  - Logs the Terminal out from most states
    * Terminal Start Server Trace  - Starts a Server Trace
    * Terminal Start Device Trace  - Starts a Device Trace
    * Terminal Generate Screenshot  - Generate a a terminal screenshot
    * Terminal Set Work Area  - Sets Work Area from the Tools and User Options screen

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Set Work Area
#########################################################################

Description:
    From F7 and Tools Menu and User Options, set Work Area

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * wrkarea - work area to be set

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Generate Screenshot
#########################################################################

Description:
    Generate a terminal screen shot. Given no explicit command in Cycle, the sequence below will generate screen shot.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Clear Field
#########################################################################

Description:
    If the cursor is in a field, uses a shortcut to clear it

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Login
#########################################################################

Description:
    Will attempt a 'clean' login after connecting to the terminal. If certain conditions arise during login that indicate the device is not in a clean login state, 
    this scenario will attempt to restore the device to a clean login screen and repeat the login process before proceeding.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Deposit
#########################################################################

Description:
    Performs either an Inventory, Load, or Product Deposit.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Wait Until First Line Is Not Blank
#########################################################################

Description:
    Waits until the Terminal's first line is not blank.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * no_process - if this is set to 1, then will not check for terminal processing

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Logout
#########################################################################

Description:
    Logs out of the Terminal from most terminal states.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * do_not_close - If this is set to 1, it will not close the terminal subsequent to logout.

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Start Server Trace
#########################################################################

Description:
    Starts a Server Trace

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Start Device Trace
#########################################################################

Description:
    Starts a Device Trace

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Get Location Verification Code
#########################################################################

Description:
    Gets the location verification code for a location

MSQL/Groovy Files or API Endpoints:
    get_location_verification_code.msql

Required Inputs:
    * verify_location - Location to be entered (this is unassigned)

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Load Deposit
#########################################################################

Description:
    Performs a Load Deposit

MSQL/Groovy Files or API Endpoints:
    check_confirm_lodnum.msql

Required Inputs:
    * None

Optional Inputs:
    * dep_loc - the location to deposit to
    * recovery_mode - if set to TRUE, will deposit to the recovery deposit location
    * recovery_deploc - the recovery deposit location
    * allocate - if set to TRUE, will use the location allocated by WMS
    * override - if set to TRUE, will override the deposit location
    * validate_loc - if set to a location, will check to ensure the deposit location matches

Outputs:
    * dep_lpn - the LPN deposited

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Product Deposit
#########################################################################

Description:
    Performs the product deposit for a given pick, load, or move.

MSQL/Groovy Files or API Endpoints:
    validate_shipment_is_staged.msql

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * dep_lpn - the (last if multiples) LPN deposited
    * dep_lpn_list - list of LPNs deposited (will be set to dep_lpn if only one was deposited)
    * dep_loc - the location where load was deposited

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Inventory Deposit
#########################################################################

Description:
    From the Terminal Inventory Deposit screen, deposits all inventory on the device.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * dep_lpn - the LPN deposited

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Wait for Processing
#########################################################################

Description:
    Waits until the terminal is done processing

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Validate Variables
#########################################################################

Description:
    This scenario validates that all variables for the Terminal Login scenario are assigned.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * terminal_server - the terminal server to connect to

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Connect and Set the Size of the Terminal
#########################################################################

Description:
    Connects to the terminal based on device type, ensuring a clean start

MSQL/Groovy Files or API Endpoints:
    clear_device_context.msql
    list_rf_terminals.msql

Required Inputs:
    * terminal_protocol - telnet or ssh
    * terminal_server - the address to connect to
    * devcod - the device code

Optional Inputs:
    * term_type - the Terminal Type, vehicle or handheld
    * ssh_username - the username to login with when using SSH
    * ssh_password - the password to login with when using SSH

Outputs:
    * term_type - the Terminal Type, vehicle or handheld
    * term_id - the Terminal ID

#########################################################################
Utility Scenario: Terminal Utilities/Check for Terminal ID Screen
#########################################################################

Description:
    If on the Terminal ID screen, enters the Terminal ID

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * devcod - the Device Code to be entered

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Check for Login Screen
#########################################################################

Description:
    If on the Login screen, login to the terminal

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * terminal_credentials - the Cycle Credentials to use
    * username - the plaintext username to use
    * password - the plaintext password to use

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Check for Bad Login
#########################################################################

Description:
    If the Bad Login message is present, get back to the original Login state.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Check for Work Information Screen
#########################################################################

Description:
    If on the Work Information screen, enters the appropriate information

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * start_loc - the location to start the device on
    * vehtyp - the vehicle type to start the device on

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Check for Recovery Mode
#########################################################################

Description:
    Deposits inventory to a Directed Putaway Location if present, if not, will be deposited to a Recovery Deposit Location.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * recovery_deploc - the Recovery Deposit Location

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Check for Authentication Screen
#########################################################################

Description:
    From the Authentication screen, inputs the username and password, if applicable

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * terminal_credentials - the credentials to login with

Optional Inputs:
    * password - the plaintext password to use

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Check for Terminal Questions
#########################################################################

Description:
    Answers any Terminal Questions

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Check for F6
#########################################################################

Description:
    If the terminal prompts for an F6, presses F6

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Check for Deposit Options
#########################################################################

Description:
    From the Deposit Options screen, performs a deposit

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Logout Questions And Possibly Deposit
#########################################################################

Description:
    look for terminal logout questions and check if a deposit is needed and perform the deposit.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Allocate Location
#########################################################################

Description:
    During a deposit, allocates the location for deposit.

MSQL/Groovy Files or API Endpoints:
    check_confirm_lodnum.msql

Required Inputs:
    * None

Optional Inputs:
    * dep_loc - deposit location will be used for allocation location if set

Outputs:
    * dep_loc - the shown allocated locations

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Putaway Override
#########################################################################

Description:
    Override the Putaway Location

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * over_code - the override code to be input
    * override_f2 - use F2 to select override code

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Confirm Lodnum
#########################################################################

Description:
    Check to see if the system is configured to confirm lodnum

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Copy Deposit Location
#########################################################################

Description:
    Copies the suggested Deposit Location from the Terminal

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * dep_loc - the deposit location suggested in the terminal

#########################################################################
Utility Scenario: Terminal Utilities/Terminal Copy Deposit LPN
#########################################################################

Description:
    Copies the Deposit LPN from the Terminal

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * dep_lpn - the lodnum (LPN) to deposit shown in terminal


###############################################################
Utility Name: Terminal Work Order Utilities
Utility File: Terminal Work Order Utilities.feature
###############################################################

Utility Description:
    This Utility contains scenarios that perform actions specific to work order processing in the Terminal

Utility Author: Tryon Solutions
Utility Type: Regression
Functional Area: Production

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Public Scenarios:
    * Terminal Move Inventory to Workstation  - moves picked work order inventory to workstation
    * Get Next LPN to Move for Work Order  - queries for available work order inventory to move
    * Get Work Order Type Description  - gets the work order type description
    * Get Inventory Status Description  - gets the inventory status description
    * Terminal Pick Work Order  - Uses Directed Work to pick Work Order and deposit
    * Terminal Directed Work Order Case Picking  - performs Directed Work picking
    * Terminal Receive Finished Goods  - receives work order finished goods

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Terminal Work Order Utilities/Terminal Move Inventory to Workstation
#########################################################################

Description:
    This scenario moves picked work order inventory to Workstation.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Work Order Utilities/Terminal Pick Work Order
#########################################################################

Description:
    This scenario uses directed work to pick work order inventory and deposit

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Work Order Utilities/Terminal Receive Finished Goods
#########################################################################

Description:
    This scenario receives the work order finished goods

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * prdlin - Production Line
    * client_id - Client ID
    * wkonum - Work Order number
    * wkorev - Work Order revision
    * rcvqty - Receive Qty

Optional Inputs:
    * over_consumption - Over Consumption allowed flag TRUE/FALSE

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Work Order Utilities/Get Next LPN to Move for Work Order
#########################################################################

Description:
    This scenario queries for available work order inventory to move to a work station for processing.

MSQL/Groovy Files or API Endpoints:
    get_lpn_to_move_to_workstation.msql

Required Inputs:
    * wkonum - Work Order Number
    * wkorev - Work Order revision
    * client_id - Client ID

Optional Inputs:
    * None

Outputs:
    * srcloc - Source location of the inventory
    * dstloc - Destination location of the inventory
    * xfer_lodnum - LPN being moved
    * prtnum - Part being moved
    * client_id - Client ID
    * ftpcod - Footprint code

#########################################################################
Utility Scenario: Terminal Work Order Utilities/Get Work Order Type Description
#########################################################################

Description:
    This scenario gets the work order type description based on a work order type

MSQL/Groovy Files or API Endpoints:
    get_work_order_type_description.msql

Required Inputs:
    * wko_typ - Work Order Type

Optional Inputs:
    * None

Outputs:
    * wko_typ_description - Work order type description

#########################################################################
Utility Scenario: Terminal Work Order Utilities/Get Inventory Status Description
#########################################################################

Description:
    Based on the Inventory Status, gets the associated description

MSQL/Groovy Files or API Endpoints:
    get_inventory_status_description.msql

Required Inputs:
    * invsts - Inventory Status descriptions

Optional Inputs:
    * None

Outputs:
    * lngdsc - Inventory Status description

#########################################################################
Utility Scenario: Terminal Work Order Utilities/Get LPN Based on Location and Quantity
#########################################################################

Description:
    Gets a single lodnum based on location and minimum quantity

MSQL/Groovy Files or API Endpoints:
    get_lodnum_by_location_and_quantity.msql

Required Inputs:
    * untqty - the quantity to have at least
    * prtnum - the part number to filter by
    * stoloc - the storage location to filter by

Optional Inputs:
    * None

Outputs:
    * lodnum - the selected lodnum


###############################################################
Utility Name: Terminal Workflow Utilities
Utility File: Terminal Workflow Utilities.feature
###############################################################

Utility Description:
    This utility performs Workflows functions within the Terminal

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Workflows

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal

Public Scenarios:
    * Terminal Process Workflow  - Checks whether a workflow is being prompted, and process the workflow if so.

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Terminal Workflow Utilities/Terminal Process Workflow
#########################################################################

Description:
    This scenario checks whether the Terminal is prompting the user to perform a Trailer Safety Check and performs such if so.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Workflow Utilities/Terminal Perform Trailer Safety Check Pass
#########################################################################

Description:
    This scenario answers 'Y' to all questions to pass a Trailer Safety Check if prompted in Terminal.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Terminal Yard Utilities
Utility File: Terminal Yard Utilities.feature
###############################################################

Utility Description:
    This Utility contains common scenarios for Terminal Yard Features

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal

Public Scenarios:
    * Terminal Yard Audit  - This Scenario will perform yard audit relative to yard audit type requested

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Terminal Yard Utilities/Terminal Yard Audit
#########################################################################

Description:
    This Scenario will perform yard audit relative to yard audit type requested

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * yard_audit_type - type of yard audit scenario to run

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Yard Utilities/Terminal Yard Audit With Trailer
#########################################################################

Description:
    This Scenario will Perform Audit by passing Trailer

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Trailer Number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Yard Utilities/Terminal Accept And Exit Yard Audit
#########################################################################

Description:
    This will Accept the Audit and Exit the Audit

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Yard Utilities/Terminal Yard Audit WithOut Trailer
#########################################################################

Description:
    This Scenario will Perform Audit without providing any fields

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * yard_loc - Yard Location

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Terminal Yard Utilities/Terminal Yard Audit With Missing Trailer
#########################################################################

Description:
    This Scenario will Perform Yard Audit To Location missing Equipment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Trailer Number
    * carcod - Carrier Code

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Web Element Utilities
Utility File: Web Element Utilities.feature
###############################################################

Utility Description:
    This Utiity implements Web element support scenarios used with Web

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Web

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web

Public Scenarios:
    * Web Set Up xPath  - This scenario builds common xPath identifiers into Cycle variables
    * Web xPath for Span Text  - This scenario builds the base structure for using the span xPath
    * Web xPath Add Sibling  - This scenario adds the xPath sibling, [2]

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Web Element Utilities/Web Set Up xPath
#########################################################################

Description:
    This scenario builds common xPath identifiers into Cycle variables

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Element Utilities/Web xPath for Span Text
#########################################################################

Description:
    This scenario builds the base structure for using the span xPath

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * element - Type of xPath structure ex. span,div

#########################################################################
Utility Scenario: Web Element Utilities/Web xPath Add Sibling
#########################################################################

Description:
    This scenario adds the xPath sibling, [2]

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * elt - xPath element string
    * element - Type of xPath structure ex. span,div

Optional Inputs:
    * None

Outputs:
    * elt - xPath element string

#########################################################################
Utility Scenario: Web Element Utilities/Web xPath for Div Text
#########################################################################

Description:
    This scenario builds the base structure for using the div xPath

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * element - Type of xPath structure ex. span,div

#########################################################################
Utility Scenario: Web Element Utilities/Web xPath for Element Text
#########################################################################

Description:
    This scenario builds the base structure for using all elements xPath

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * xPath - xPath string
    * element - Type of xPath structure ex. span,div
    * text - Value to match. Set in functionality Utility.
    * xpClose - TRUE = terminate string, FALSE = do not terminate string

Optional Inputs:
    * None

Outputs:
    * elt - xPath element string

#########################################################################
Utility Scenario: Web Element Utilities/Web xPath Initialize
#########################################################################

Description:
    This scenario builds the base structure for an xPath

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * elt - xPath element string
    * xpClose - TRUE = terminate string, FALSE = do not terminate string

#########################################################################
Utility Scenario: Web Element Utilities/Web xPath Initialize No Close
#########################################################################

Description:
    This scenario builds the base structure for not closing an xPath

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * elt - xPath element string
    * xpClose - TRUE = terminate string, FALSE = do not terminate string

#########################################################################
Utility Scenario: Web Element Utilities/Web xPath Add Element Kwd Value
#########################################################################

Description:
    This scenario builds the base structure for using a keyword and value

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * elt - xPath element string
    * element - Type of xPath structure ex. span,div
    * kwd - Keyword for the type of identifier ex. text
    * value - Value for the identifier

Optional Inputs:
    * None

Outputs:
    * elt - xPath element string

#########################################################################
Utility Scenario: Web Element Utilities/Web xPath Add Open Element
#########################################################################

Description:
    This scenario builds the base structure for a complex xPath

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * elt - xPath element string
    * element - Type of xPath structure ex. span,div

Optional Inputs:
    * None

Outputs:
    * elt - xPath element string

#########################################################################
Utility Scenario: Web Element Utilities/Web xPath Add And Clause
#########################################################################

Description:
    This scenario adds an And clause to complex xPath

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * elt - xPath element string
    * xpClose - TRUE = terminate string, FALSE = do not terminate string

Optional Inputs:
    * None

Outputs:
    * elt - xPath element string

#########################################################################
Utility Scenario: Web Element Utilities/Web xPath Add Kwd Starts With Clause
#########################################################################

Description:
    This scenario builds the base structure for using a keyword and starts with value

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * elt - xPath element string
    * kwd - Keyword for the type of identifier ex. text
    * value - Value for the identifier
    * xpClose - TRUE = terminate string, FALSE = do not terminate string

Optional Inputs:
    * None

Outputs:
    * elt - xPath element string

#########################################################################
Utility Scenario: Web Element Utilities/Web xPath Add Kwd Contains Clause
#########################################################################

Description:
    This scenario builds the base structure for using a keyword and contains value

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * elt - xPath element string
    * kwd - Keyword for the type of identifier ex. text
    * value - Value for the identifier
    * xpClose - TRUE = terminate string, FALSE = do not terminate string

Optional Inputs:
    * None

Outputs:
    * elt - xPath element string

#########################################################################
Utility Scenario: Web Element Utilities/Web xPath Close
#########################################################################

Description:
    This scenario adds the termination bracket to the xPath and sets xpClose = TRUE

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * elt - xPath element string
    * xpClose - TRUE = terminate string, FALSE = do not terminate string

Optional Inputs:
    * None

Outputs:
    * elt - xPath element string
    * xpClose - TRUE = terminate string, FALSE - do not terminate string

#########################################################################
Utility Scenario: Web Element Utilities/Web xPath Close and Continue
#########################################################################

Description:
    This scenario adds the termination bracket to the xPath and leave xPath open

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * elt - xPath element string

Optional Inputs:
    * None

Outputs:
    * elt - xPath element string


###############################################################
Utility Name: Web Inbound Trailer Utilities
Utility File: Web Inbound Trailer Utilities.feature
###############################################################

Utility Description:
    These utility scenarios perform inbound trailer functions

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Inbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB

Public Scenarios:
    * Web Open Receiving Transport Equipment Screen  - Opens web Receiving Transport Equipment screen
    * Web Search for Inbound Trailer  - Searches for the trailer provided in Test Case Inputs
    * Web Check In Inbound Trailer  - Checks in the trailer using Web
    * Web Verify Inbound Trailer Check In  - Validates success confirmation dialog is confirmed
    * Web Open Add Transport Equipment Screen  - Opens the Transport Equipment Screen without an appointment.
    * Web Process Inbound Trailer Safety Check  - Checks the Inbound trailer requires check and then confirms the prompts
    * Web Add Storage Transport Equipment Infomation  - Enters in the required information for the storage transport equipment.
    * Web Check In Storage Trailer  - Selects a door and checks in a trailer.

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Web Inbound Trailer Utilities/Web Open Receiving Transport Equipment Screen
#########################################################################

Description:
    This scenario opens the Receiving Transport Equipment screen in the WEB

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inbound Trailer Utilities/Web Open Yard Check In Screen
#########################################################################

Description:
    This scenario opens the Yard Check In screen in the WEB

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inbound Trailer Utilities/Web Search for Inbound Trailer
#########################################################################

Description:
    This scenario searches and selects the Inbound Trailer for check in

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - Trailer Number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inbound Trailer Utilities/Web Check In Inbound Trailer
#########################################################################

Description:
    This scenario performs web actions for Inbound Trailer for check in

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * yard_loc - yard location
    * wh_id - warehouse ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inbound Trailer Utilities/Web Verify Inbound Trailer Check In
#########################################################################

Description:
    This scenario verifies in the web that trailer check in was successful

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * xPath_span_OK_sibling - A prebuilt variable in Web Element Utilities for child OK buttons

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inbound Trailer Utilities/Web Process Inbound Trailer Safety Check
#########################################################################

Description:
    This scenario processes a safety check for Receiving trailers

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - Trailer Number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inbound Trailer Utilities/Web Open Add Transport Equipment Screen
#########################################################################

Description:
    Opens the Transport Equipment Screen without an appointment.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inbound Trailer Utilities/Web Add Storage Transport Equipment Infomation
#########################################################################

Description:
    Enters in the required information for the storage transport equipment.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer
    * carcod - Carrier Code used for the trailer

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inbound Trailer Utilities/Web Check In Storage Trailer
#########################################################################

Description:
    Selects a door and checks in a trailer.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * yard_loc - yard location
    * wh_id - warehouse ID

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Web Inventory Utilities
Utility File: Web Inventory Utilities.feature
###############################################################

Utility Description:
    These Utility Scenarios perform actions specific to Web Inventory activities

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Public Scenarios:
    * Web Open Inventory Screen - Traverse to top - level search and then to Inventory screen
    * Web Open Inventory Counts Screen - Traverse to top - level search and then to Inventory/Counts screen
    * Web Open Inventory Adjustments Screen  - Traverse to Inventory/Adjustments screen
    * Web Inventory Adjustment Add  - Conduct an Inventory Add operation from the Location screen
    * Web Inventory Adjustment Delete  - Conduct an Inventory Delete operation from the Location screen
    * Web Inventory Adjustment Change  - Conduct an Inventory Adjustment with input provided by test case
    * Web Inventory Move  - Perform the inventory move operation
    * Web Inventory Create Count Batch  - Create a Count Batch for a Range of storage locations
    * Web Inventory Add or Release Hold  - Perform either an Inventory Add or Release Hold operation
    * Web Inventory Status Change  - Perform a inventory status change operation
    * Web Inventory Navigate to Inventory LPN Display  - Search for the LPN on Inventory screen and click on the LPN TAB
    * Web Inventory Move Enter Partial Quantity Move Information  - If this is a partial move of inventory, then enter the appropriate quantity and destination LPN
    * Web Inventory Adjustment Check LPN Item Attributes in Location  - Validate screen output after adjustment to input params
    * Web Inventory Adjustment Check Inventory Adjustment Approval Pending  - Use MOCA/xpath to verify screen output
    * Web Inventory Adjustment Check LPN Deleted from Location  - Check in the Location screen looking to make sure the lodnum (input) it not displayed
    * Web Inventory Adjustment Search for Location to Add Inventory on Inventory Screen  - Search for the specified storage location on the Inventory screen
    * Web Inventory Adjustment Check that Inventory Adjustment was Successful  - Verify that the UI from the Location screen has updated values after an inventory adjustment
    * Web Inventory Move Check LPN Moved to Location  - Verify after the move operation completed from the UI
    * Web Open the Inventory Outbound Screen - Traverse to top - level Search Box in Web UI.
    * Web Select LPN to Modify  - Selects the LPN in the Inventory table.
    * Web Select Modify Inventory Attribute Action  - Selects the Modify Inventory Attribute button.
    * Web Select Relabel LPN Action  - Selects the Relabel LPN button from the Action dropdown on the Inventory screen.
    * Web Modify Inventory Lotnum  - Changes and saves the lotnum on the inventory.
    * Web Error Location  - changes the location status to error
    * Web Reset Location  - resets the status to original
    * Web Location Status Change  - changes the location status to error and resets the status to original.
    * Web Inventory Relabel LPN  - Enters and saves the new LPN into the Relabel LPN modal.
    * Web Inventory Display  - Search by lodnum or location and display specified inventory
    * Web Inventory Location Display  - display sepcified location in configuration/storage locations
    * Web Open Storage Locations Screen  - navigate to the configuration/storage locations screen
    * Web Inventory Adjust With Approval Limits  - This Scenario will perform the Adjustments in the Inventory
    * Web Approve Inventory Adjustments  - This Scenario will perform the Approval for the Inventory Adjustments
    * Validate Inventory Adjust With Approval Limits  - This scenario will Validate Inventory Adjust With Approval Limits
    * Get Code Value from Code Description  - Use MOCA call to get code value from description
    * Create local xPaths  - Create xpath variables for use in this utility
    * Web Inventory Remove LPN from a Location  - removes a LPN from a location
    * Validate Triggered Replenishment Generated  - confirms that a triggered replenishment is generated for a location
    * Web Reject Inventory Adjustments  - perform the Rejection of a inventory adjustment
    * Validate Top-off Replenishment Generated - confirms that a top - off replenishment is generated for a location
    * Web Generate Top-off Replenishment For a Location - generates top - off replenishment for specified location
    * Determine Inventory Adjustment Settings by Cost  - Based on prtnum and it's associated unit cost, determine the proper settings for inventory adjustment.

Utility Assumptions:
    * This Feature Utility file uses the Web Interface

Utility Notes:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Determine Inventory Adjustment Settings by Cost
#########################################################################

Description:
    Based on prtnum and it's associated unit cost, determine the proper settings for inventory adjustment.

MSQL/Groovy Files or API Endpoints:
    get_prtnum_cost.msql

Required Inputs:
    * prtnum - part number
    * adj_max_cost - maxiumum adjustment cost
    * untqty - quantity created of prtnum
    * adj_thresh - values include AT_LIMIT|LESS_THAN|GREATER_THAN

Optional Inputs:
    * None

Outputs:
    * adj_qty - adjustment quantity to use based on prtnum and adj_thresh

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Location Display
#########################################################################

Description:
    Display a storage location from the Configuration / Warehouse / Locations / Storage Locations screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - storage location

Optional Inputs:
    * generate_screenshot - flag to indicate screen shot should be taken

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Open Storage Locations Screen
#########################################################################

Description:
    Navigate to Configuration / Warehouse / Locations / Storage Locations screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Display
#########################################################################

Description:
    Search by lodnum or location and display specified inventory

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - load number
    * stoloc - storage location
    * prtnum - part number

Optional Inputs:
    * generate_screenshot - flag to indicate screen shot should be taken

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Open Inventory Screen
#########################################################################

Description:
    Traverse to top-level Search Box in Web UI and search/open the main Inventory screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Open Inventory Adjustments Screen
#########################################################################

Description:
    Traverse to top-level Search Box in Web UI and search/open the Adjustments and the Inventory->Adjustment screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Open Inventory Counts Screen
#########################################################################

Description:
    Traverse to top-level Search Box in Web UI and search/open the Inventory->Counts screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Adjustment Check LPN Item Attributes in Location
#########################################################################

Description:
    On completion of a Inventory Add Adjustment, verify the screen attributes versus test inputs

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - Load number that was added
    * prtnum - Valid part number that is assigned in your system
    * untqty - Inventory quantity that was added
    * ftpcod - Part footprint code for item being added
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * client_id - Client for the adjustment inventory

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Adjustment Check Inventory Adjustment Approval Pending
#########################################################################

Description:
    Call MOCA script that gets the adjustment detail record for the load and use that in an xpath to verify screen output

MSQL/Groovy Files or API Endpoints:
    get_adj_dtlnum_from_lodnum.msql

Required Inputs:
    * stoloc - Location where the adjustment will take place
    * lodnum - Load number that was added
    * prtnum - Valid part number that is assigned in your system
    * check_adjqty - Denotes if approvals are required

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Get Code Value from Code Description
#########################################################################

Description:
    Make MSQL call to get the system code value from description

MSQL/Groovy Files or API Endpoints:
    get_code_value_from_code_description.msql

Required Inputs:
    * code_name - the value for the field (i.e. $reacod, $invsts)
    * code_description - the field name (i.e "reacod", "invsts")

Optional Inputs:
    * None

Outputs:
    * code_value - column value of the lookup of code_name/code_description from docmst
    * code - error code if lookup fails (fails to find)

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Adjustment Check LPN Deleted from Location
#########################################################################

Description:
    Check in the Location / LPNs TAB (Basics) UI looking to make sure the lodnum (input) it not displayed

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - Load number that was used in test

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Adjustment Search for Location to Add Inventory on Inventory Screen
#########################################################################

Description:
    Search for the specified storage location on the Inventory screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the adjustment will take place

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Adjustment Check that Inventory Adjustment was Successful
#########################################################################

Description:
    Verify that the UI from the Location screen has updated values after an inventory adjustment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * new_qty - The new quantity to adjust inventory to
    * approval_required - Is approval required for update

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Adjustment Delete
#########################################################################

Description:
    Conduct an Inventory Delete operation from the Location screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the adjustment will take place
    * lodnum - Load number that was added
    * reacod - System reason code for adjustment/delete
    * adjref1 - Adjustment reference 1
    * adjref2 - Adjustment reference 2
    * new_qty - The new quantity we want to adjust to

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Adjustment Change
#########################################################################

Description:
    Conduct an Inventory Adjustment with input provided by test case. Assumes you are on Inventory screen and searches for Location and performs the adjustment.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Location where the adjustment will take place
    * lodnum - Load number that was added
    * reacod - System reason code for adjustment.
    * uom - Unit of measure
    * adjref1 - Adjustment reference 2
    * new_qty - The new quantity we want to adjust to (increase/decrease)

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Navigate to Inventory LPN Display
#########################################################################

Description:
    Search for the LPN and click on the LPN TAB

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - Load Number, Generated in Web Inventory Move Check LPN Moved to Location

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Move Enter Partial Quantity Move Information
#########################################################################

Description:
    If this is a partial move of inventory, then enter the appropriate quantity and destination LPN

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * move_qty - Qty to be moved from source to destination
    * dstlod - New load number (LPN) for the partial qty if performing a partial qty movement

Optional Inputs:
    * None

Outputs:
    * partial_move - denotes if this is a partial move case

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Move Check LPN Moved to Location
#########################################################################

Description:
    Verify after the move operation completed and that the UI reflects the proper values

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * move_qty - Qty to be moved from source to destination
    * dstlod - New load number (LPN) for the partial qty if performing a partial qty movement
    * srclod - Load number added by dataset and moved by the main scenario
    * prtnum - valid part number that is defined in your system
    * untqty - Quantity for the dataset to add inventory

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Move  
#########################################################################

Description:
    From LPN TAB on the Inventory Screen, select the LPN to move, select the Move Action, and conduct the move operation. Take into both partial and full inventory move cases.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * move_qty - Qty to be moved from source to destination
    * untqty - Quantity for the dataset to add inventory
    * dstloc - The destination location of the LPN to be moved
    * srclod - Load number added by dataset and moved

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Status Change  
#########################################################################

Description:
    Change status of Inventory specified by lodnum

MSQL/Groovy Files or API Endpoints:
    validate_status_on_inventory_by_lpn.msql

Required Inputs:
    * stoloc - Location where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number
    * newinvsts - New Inventory Status. Used to set the inventory to this status
    * reacodfull - Reason Code Full. Used for the reason code of the inventory status change. Must be full description

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Create Count Batch
#########################################################################

Description:
    Create a Count Batch for a Range of storage locations specified

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * requestCountBy - Method of requesting counts
    * beginLocation - Start of count location range
    * endLocation - End of count location range
    * cntbat - Count Batch we are creating
    * cnttyp_desc - Count type description
    * gencod_desc - Generate code description

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Open the Inventory Outbound Screen
#########################################################################

Description:
    Traverse to top-level Search Box in Web UI and search/open the main Outbound Planner Inventory screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Error Location
#########################################################################

Description:
    changes the location status to error.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Select LPN to Modify
#########################################################################

Description:
    Selects the LPN in the Inventory table.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lotnum - The lotnum for the inventory to select.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Select Modify Inventory Attribute Action
#########################################################################

Description:
    Selects the Modify Inventory Attribute button from the Action dropdown on the Inventory screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Select Relabel LPN Action
#########################################################################

Description:
    Selects the Relabel LPN button from the Action dropdown on the Inventory screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Reset Location
#########################################################################

Description:
    resets the status to original.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Modify Inventory Lotnum
#########################################################################

Description:
    Changes and saves the lotnum on the inventory.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * new_lotnum - The new lotnum to enter in for the inventory.
    * reacodfull - The reason code for the change to the inventory.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Location Status Change
#########################################################################

Description:
    changes the location status to error or resets.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - storage location that needs confirmation.
    * mode - if ERROR is set then location status changed to error. - if RESET is set then location status changes to its original status from error.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Relabel LPN
#########################################################################

Description:
    Enters and saves the new LPN into the Relabel LPN modal.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * new_lodnum - Used to set the inventory's lodnum to this value

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Reject Inventory Adjustments
#########################################################################

Description:
    This scenario will perform the rejection of a Inventory adjustment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - storage location
    * adjust_approval_reason - Used for the reason code for inventory adjustment approval. Must be full description

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Remove LPN from a Location
#########################################################################

Description:
    Removes a LPN from a specified location

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal/WEB and datasets processing.
    * reacodfull - Reason Code Full. Used for the reason code of the inventory status change. Must be full description.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Validate Triggered Replenishment Generated
#########################################################################

Description:
    confirms that triggered replenishment generated for the location

MSQL/Groovy Files or API Endpoints:
    validate_triggered_replenishment_generated.msql

Required Inputs:
    * stoloc - storage location that needs confirmation.
    * prtnum - prtnum location that needs confirmation.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Validate Top-off Replenishment Generated
#########################################################################

Description:
    This scenario confirms that top-off replenishment generated for the location

MSQL/Groovy Files or API Endpoints:
    validate_top_off_replenishment_generated.msql

Required Inputs:
    * stoloc - storage location that needs confirmation.
    * prtnum - prtnum location that needs confirmation.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Generate Top-off Replenishment For a Location
#########################################################################

Description:
    This scenario generates top-off replenishment for specified location

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - location needing top-off replenishment

Optional Inputs:
    * validate_sucess - If YES validates success message in web
    * validate_fail - If YES validates fail message in web

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Check Location and Finish Adjustment
#########################################################################

Description:
    Complete and confirm the completion of the adjustment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * stoloc - storage location

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Add Adjustments and Reason
#########################################################################

Description:
    Add adjustmnent refereces and reason in web

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * adjref1 - adjustment reference 1
    * adjref2 - adjusrment reference 2
    * reacod - reason code
    * dropdown_type - dropdown arrow reason type (reasonCode | adjustmentReason)

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Create Variable adjust_inventory_button on Location Screen
#########################################################################

Description:
    Create an xpath representing the adjust inventory button on the Inventory Screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * adjust_inventory_button - xpath to adjust inventory button

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Create Variable location_status on Location Screen
#########################################################################

Description:
    Create an xpath representing the screen's right-side status button representing the 3 possible states of the Location Screen (Empty, Partially Full, Empty)

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * location_status_partial - xpath to Status (Partially Full) button on Location screen
    * location_status_full - xpath to Status (Full) button on Location screen
    * location_status_empty - xpath to Status (Empty) button on Location screen

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Create Variable error_toggle_yes on Adjustment Screen
#########################################################################

Description:
    Create an xpath representing the "YES" state of the toggle control to keep Location in Error after adjustment.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * error_toggle_yes - xpath representing the "YES" state of toggle control to keep Location in Error after adjustment.

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Click Attribute Dropdown on Adjustment Screen
#########################################################################

Description:
    Create an xpath and click on the Drop Down arrow (to activate the dropdown) associated with choice dropdown control (used in UOM, Reason Code, and other controls on Adjustment screen)

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * dropdown_type - dropdown control name such as uomCode, reasonCode, ..

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Create Variable remove_inventory_button on Actions Menu
#########################################################################

Description:
    Generate a xpath to get to the remove inventory button in the Actions Menu/DropDown on the Location screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * remove_inventory_button - xpath to remove inventory button in menu

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Create Variable save_adjustment_button on Remove Inventory Screen
#########################################################################

Description:
    Generate a xpath to get to the Save Adjustment button on the remove Inventory Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * save_adjustment_button - xpath to save adjustment button

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Create Variable add_inventory_button on Actions Menu
#########################################################################

Description:
    Generate a xpath to get to the Add Inventory button in the Actions Menu/DropDown on the Location screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * add_inventory_button - xpath to add inventory button in menu

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Create variable move_inventory_button on Move LPN Screen
#########################################################################

Description:
    Create a xpath representing the move inventory button on the Move Inventory Screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * move_inventory_button - xpath to move inventory button

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Create variable relabel_lpn_button on LPN Screen
#########################################################################

Description:
    Create a xpath representing the Relabel LPN button on the Move Inventory Screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * relabel_lpn_button - xpath to relabel lpn button

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Create variable modify_inventory_attribute_button on LPN Screen
#########################################################################

Description:
    Create a xpath representing the Modify Inventory Attribute. button on the Inventory Screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * modify_inventory_attribute_button - xpath to move inventory button

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Create Variable Error Location on Actions Menu
#########################################################################

Description:
    Generate a xpath to get to the error_location button in the Actions Menu/DropDown on the Location screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * error_location - xpath to error_location in menu

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Create Variable Reset Location on Actions Menu
#########################################################################

Description:
    Generate a xpath to get to the reset_location button in the Actions Menu/DropDown on the Location screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * reset_location - xpath to reset_location in menu

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Clear Location Search Filter on Location Screen
#########################################################################

Description:
    Generate a xpath to clears location search filter on the Location screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * close_loc_fliter - xpath to clears location search filter

#########################################################################
Utility Scenario: Web Inventory Utilities/Validate Location is not in Error
#########################################################################

Description:
    confirms that a location is not in error state

MSQL/Groovy Files or API Endpoints:
    check_loc_error_sts.msql

Required Inputs:
    * stoloc - storage location that needs confirmation

Optional Inputs:
    * None

Outputs:
    * location_status - current status of the location

#########################################################################
Utility Scenario: Web Inventory Utilities/Validate Location is in Error
#########################################################################

Description:
    confirms that a location is in error state

MSQL/Groovy Files or API Endpoints:
    validate_location_in_error.msql

Required Inputs:
    * stoloc - storage location that needs confirmation.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Perform Error Location
#########################################################################

Description:
    Sets a location to error state

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * mode - if ERROR is set then location status changed to error
    * error_location - xpath to error_location in menu
    * close_loc_filter - xpath to clears location search filter

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Perform Reset Location
#########################################################################

Description:
    Resets a location in error state to original status

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * mode - if RESET is set then location status changes to its original status from error.
    * reset_location - xpath to reset_location in menu
    * close_loc_filter - xpath to clears location search filter

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Get Storage Location Info from Location
#########################################################################

Description:
    This scenario returns information about a specified storage location

MSQL/Groovy Files or API Endpoints:
    get_location_information.msql

Required Inputs:
    * loc_to_use - storage location to use for gatherig information on
    * wh_id - warehouse ID

Optional Inputs:
    * None

Outputs:
    * sto_area_code - storage location area code
    * sto_aisle_id - storage location asile ID
    * sto_level - storage location Level

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Inventory Adjust With Approval Limits
#########################################################################

Description:
    This Scenario will perform the Adjustments in the Inventory

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - Load number being adjusted in. Can be a fabricated number.
    * adj_untqty - Adjustable Quantity
    * reacodfull - Used for the reason code of the lotnum change. Must be full description

Optional Inputs:
    * approval_needed - if set (TRUE) will expect dialog message about approval being needed

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Web Approve Inventory Adjustments
#########################################################################

Description:
    This Scenario will perform the Approval for the Inventory Adjustments

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - Load number being adjusted in. Can be a fabricated number.
    * adj_untqty - Adjustable Quantity
    * adjust_approval_reason - Used for the reason code inventory adjustment approval. Must be full description

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Validate Inventory Adjust With Approval Limits
#########################################################################

Description:
    This scenario will verify the adjustments to the Inventory has been done successfully or not

MSQL/Groovy Files or API Endpoints:
    validate_inventory.msql

Required Inputs:
    * adj_untqty - quantity inventory was adjusted to

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Inventory Utilities/Create local xPaths
#########################################################################

Description:
    Create xpath variables for use in this utility

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * select_inv_xpath - xPath location to select inventory from terminal adjust
    * select_adjust_xpath - xPath location to approve inventory adjust
    * ok_to_adjust_xpath - OK Button on inventory adjust screen

#########################################################################
Utility Scenario: Web Inventory Utilities/Validate Cycle Count
#########################################################################

Description:
    Verify that a cycle count was generated or not

MSQL/Groovy Files or API Endpoints:
    validate_cycle_count.msql

Required Inputs:
    * stoloc - storage location to check for cycle count
    * prtnum - part number

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Web Outbound Audit Utilities
Utility File: Web Outbound Audit Utilities.feature
###############################################################

Utility Description:
    These utility scenarios perform outbound audit functions in the Web

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Outbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Public Scenarios:
    * Web Release Outbound Audit Hold  - Approves a pending outbound audit hold in the Web.
    * Web Shipping Search  - Search the Shipping screen with search filter
    * Web Navigate to Shiping Issues Screen  - Navigate to the Shipping Issues/Not Shippable screen
    * Web Navigate to RF Outbound Audit Issues Screen  - Navigate to the Shipping Issues/RF Outbound Audit screen
    * Web Check Outbound Audit History  - From RF Outbound Audit screen, search for lodnum, select, and inspect field on screen

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Web Outbound Audit Utilities/Web Check Outbound Audit History
#########################################################################

Description:
    From RF Outbound Audit screen, search for lodnum, select, and inspect field on screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - load number to search for
    * prtnum - part number from the order

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Audit Utilities/Web Shipping Search
#########################################################################

Description:
    Use Search Box to find a specified component from Shipping screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * component_to_search_for - component to search for (i.e. shipment, load, order)
    * string_to_search_for - string to search for relative to component_to_search_for

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Audit Utilities/Web Release Outbound Audit Hold
#########################################################################

Description:
    Release Hold from the Shipping/Shipping Issues/Not Shippable screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * lodnum - load number to search for with hold applied
    * invsts - inventory status applied during hold release
    * reacod - reason code string to use during hold release

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Audit Utilities/Web Navigate to Shiping Issues Screen
#########################################################################

Description:
    Use Web Search to navigate to Shipping/Shipping Issues Not Shippable Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Audit Utilities/Web Navigate to RF Outbound Audit Issues Screen
#########################################################################

Description:
    Use Web Search to navigate to Shipping/Shipping Issues RF Outbound Audit screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Web Outbound Planner Utilities
Utility File: Web Outbound Planner Utilities.feature
###############################################################

Utility Description:
    This utility contains Utility scenarios assisting in Outbound Planning activities in the Web

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Allocation

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Public Scenarios:
    * Web Validate Order  - navigate to Oubound screen and search/select the order
    * Web Validate Order Info  - validate from screen and system that the order is valid
    * Web Validate Shipment  - navigate to Oubound screen and search/select the shipment
    * Web Validate Shipment Info  - validate from screen and system that the shipment is valid
    * Web Validate Load  - navigate to Oubound screen and search/select the load
    * Web Validate Load Info  - validate from screen and system that the load is valid
    * Web Quick Filter  - use quick filter to apply a filter
    * Web Navigate to Outbound Planner Outbound Screen  - Navigate to Outbound Planner/Outbound
    * Validate Shipment Info  - Validate shipment by order and return ship_id
    * Web Create Order  - Create an order and single order line in the Web
    * Web Add Order and Order Lines  - Process the order and order line tabs while creating a new order
    * Web Create Shipment  - Create a shipment based on order in the system
    * Web Add Order to Shipment  - Add an order to a shipment
    * Web Create Load  - Create a load based on order/shipment in the system
    * Web Add Load Info  - processes the add Load screen and assigns shipment
    * Web Outbound Remove Load from Trailer  - Will Remove Load from Trailer
    * Web Outbound Assign Transport Equipment to Load  - will Assign Transport Equipment to Load
    * Web Validate Transport Equipment Assigned to Load  - will Validate Transport Equipment Assigned to Load
    * Validate Load Removed from Transport Equipment  - will Validate Load Removed from Transport Equipment
    * Get Carrier Name from Carrier Code  - converts a carrier code to a carrier name
    * Validate Shipment Created  - validates the shipment was created
    * Validate Order Created  - validates the order was generated
    * Validate Load Created  - validates the load was created
    * Validate Load Deleted  - Validate the load was deleted
    * Web Delete Load  - This scenario will delete the load in web
    * Validate Stop Deleted  - validates the stop is deleted from Load
    * Web Navigate to Outbound Planner Work Queue Screen  - Navigates to Work Queue screen in Outbound Planner
    * Web Cancel Replenishment Task in Work Queue  - Cancels a Pallet Replenishment generated by the system
    * Validate Cancelled Replenishment Work  - Validates the Replenishment work Generated cancelled or not
    * Web Cancel Order and Order Line  - Cancels Order and Order line in a Load
    * Web Validate Order and Order Line Cancelled  - Validates the Order and Order Line is cancelled from a load or not

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Create Load
#########################################################################

Description:
    This scenario create a new load in the Web. It will also add assign the shipment to the load.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ordnum - order number
    * ship_id - shipment ID
    * carcod - carrier code
    * ui_move_id - load to create in the Web

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Add Load Info
#########################################################################

Description:
    This scenario processes the add Load screen and assigns a shipment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ordnum - order number
    * ui_move_id - Load Name to use to create in Web
    * carcod - carrier code
    * ship_id - shipment ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Create Shipment
#########################################################################

Description:
    This scenario create a new shipment in the Web. It will also add the shipment line to the already created order and validate screen data relative to shipment.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ordnum - order number
    * adr_id - address ID
    * ship_id - shipment ID
    * carcod - carrier code

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Add Order to Shipment
#########################################################################

Description:
    This scenario will add a selected order to a shipment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ordnum - order number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Add Shipment Info
#########################################################################

Description:
    This scenario processes the Add Shipment TAB and create a new shipment from the input parameters

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ordnum - order number
    * adr_id - address ID
    * ship_id - shipment ID
    * carcod - carrier code
    * route_to_addr - route to address (has to be same as used with order)
    * srvlvl - service level
    * eshp_dte - early ship date
    * lshp_dte - late ship date
    * edel_dte - early delivery date
    * ldel_dte - late delivery date
    * aesnum - aes number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Create Order
#########################################################################

Description:
    This scenario will create a new order in the web It will also created a single orderline and validate screen wise the that order was created.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ordnum - order number
    * prtnum - part number in the order line

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Add Order and Order Lines
#########################################################################

Description:
    This scenario will create a new order in the web It will also created a single orderline and validate screen wise the that order was created.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ordnum - order number
    * prtnum - part number in the order line

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Validate Order
#########################################################################

Description:
    This scenario will navigate to Outbound Planner/Oubound screen and search for and select the order.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ordnum - order number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Validate Order Info
#########################################################################

Description:
    This scenario will validate from the screen and from the system that the order is valid.

MSQL/Groovy Files or API Endpoints:
    check_order_created.msql
    is valid.

Required Inputs:
    * ordnum - order number
    * prtnum - part number for order
    * untqty - unit quantity for order
    * client_id - client ID
    * carcod - carrier info

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Validate Shipment
#########################################################################

Description:
    This scenario will navigate to Outbound Planner/Oubound screen and search for and select the shipment.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ship_id - shipment id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Validate Shipment Info
#########################################################################

Description:
    This scenario will validate from the screen and from the system that the shipment is valid. is valid.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ordnum - order number
    * ship_id - shipment id
    * client_id - client ID
    * carcod - carrier info

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Validate Load
#########################################################################

Description:
    This scenario will navigate to Outbound Planner/Oubound screen and search for and select the load.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * move_id - load/carrier move id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Validate Load Info
#########################################################################

Description:
    This scenario will validate from the screen and from the system that the load is valid. is valid.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * move_id - load/carrier move id
    * client_id - client ID
    * carcod - carrier info

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Quick Filter
#########################################################################

Description:
    Use Quick Filter to apply a specified filter

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * qf_filter_item - menu item filter to select

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Navigate to Outbound Planner Outbound Screen
#########################################################################

Description:
    Use Web Search to navigate to Outbound Planner/Outbound Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Validate Shipment Info
#########################################################################

Description:
    This scenario validates the shipment by order was created and stores ship_id

MSQL/Groovy Files or API Endpoints:
    check_shipment_created.msql

Required Inputs:
    * ordnum - Order number

Optional Inputs:
    * None

Outputs:
    * ship_id - Shipment ID generated in planning

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Get Carrier Name from Carrier Code
#########################################################################

Description:
    This scenario converts a carrier code to a carrier name

MSQL/Groovy Files or API Endpoints:
    get_carrier_name.msql

Required Inputs:
    * carcod - carrier code (or carrier name)

Optional Inputs:
    * None

Outputs:
    * carnam - Carrier Name

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Validate Load Created
#########################################################################

Description:
    This scenario validates the load was created

MSQL/Groovy Files or API Endpoints:
    check_load_created.msql

Required Inputs:
    * move_id - load / carrier move id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Validate Shipment Created
#########################################################################

Description:
    This scenario validates the shipment was created

MSQL/Groovy Files or API Endpoints:
    check_shipment_info.msql

Required Inputs:
    * ship_id - shipment id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Validate Order Created
#########################################################################

Description:
    This scenario validates the order was created

MSQL/Groovy Files or API Endpoints:
    check_order_created.msql

Required Inputs:
    * ordnum - order number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Validate Load Removed from Transport Equipment
#########################################################################

Description:
    This scenario will Validate Load Removed from Transport Equipment

MSQL/Groovy Files or API Endpoints:
    validate_trailer_assign_to_load.msql

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Outbound Remove Load from Trailer
#########################################################################

Description:
    This scenario will Remove Load from Trailer

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Unique identifier for the trailer in the system.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Outbound Assign Transport Equipment to Load
#########################################################################

Description:
    This scenario will Assign Transport Equipment to Load

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Unique identifier for the trailer in the system.
    * move_id - Load ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Validate Transport Equipment Assigned to Load
#########################################################################

Description:
    This scenario will Validate Transport Equipment Assigned to Load

MSQL/Groovy Files or API Endpoints:
    validate_trailer_assign_to_load.msql

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Validate Stop Deleted
#########################################################################

Description:
    This scenario validates the stop is deleted from Load

MSQL/Groovy Files or API Endpoints:
    check_stop_deleted.msql

Required Inputs:
    * move_id - Load number. Maps to car_move.car_move_id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Navigate to Outbound Planner Work Queue Screen
#########################################################################

Description:
    Use Web Search to navigate to Outbound Planner/Outbound Screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Cancel Replenishment Task in Work Queue
#########################################################################

Description:
    Cancels a Pallet Replenishment generated by the system

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * palloc - Source Location
    * cancel_code - Cancel code

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Validate Cancelled Replenishment Work
#########################################################################

Description:
    This Scenario verifies the Pallet Replenishment generated by the system is cancelled or not

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * oprcod - Operation Code

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Cancel Order and Order Line
#########################################################################

Description:
    This scenario will cancel the Order or Order Line in the Web

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * move_id - load/carrier move id
    * ordnum - Order Number
    * cancel_mode - specifies whether to cancel order or order line

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Validate Order and Order Line Cancelled
#########################################################################

Description:
    This scenario will verify that the Order is cancelled or not

MSQL/Groovy Files or API Endpoints:
    validate_order_cancelled.msql

Required Inputs:
    * ordnum - Order Number
    * prtnum - Part Number
    * cancel_mode - Cancellation mode i.e, Order or Order Line

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Process Order Line Tab
#########################################################################

Description:
    This scenario processes the inputs needed to create a new order line in the Order Line Tab. It will fill in all required inputs and a random sampling of optional inputs.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * prtnum - part number in the order line
    * untqty - quantity of prtnum in the order line
    * alloc_profile - allocation profile UI field input
    * carcod - carrier code field input
    * project_number - project number field input
    * dstloc - destination location field input
    * res_pri - reservation priority field input
    * ftp_dtl - part foot print detail field input
    * cert_origin - certificate of origin field input

Optional Inputs:
    * ordlin - order line id field input

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Process Order Tab
#########################################################################

Description:
    This scenario processes the inputs needed to create a new order in the Order Tab. It will fill in all required inputs and a random sampling of optional inputs.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ordnum - order number
    * ui_ordtyp - the Web representation of the order type
    * cstnum - customer ID field value
    * cust_po - customer PO field value
    * create_ship_by - create shipment by field value
    * deliver_num - delivery number field value
    * ord_note - text for creating note for order

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Add Order Note
#########################################################################

Description:
    This scenario wil add a new note in the creation of a order or order line

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * input_note - text of the notes
    * note_type - what note type should be used
    * note_line_number - the line number of the note

Optional Inputs:
    * ordlin - order line id field input

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Validate Copy and Delete Options
#########################################################################

Description:
    This scenario wil click on add and delete from order line tab and simply dismiss the dialogs that are popped up.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Outbound Search Assign Shipments 
#########################################################################

Description:
    Use Search Box to search for component shipment assignment screen associated with a load.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * component_to_search_for - component to search for (i.e. shipment, load, order)
    * string_to_search_for - string to search for relative to component_to_search_for

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Outbound Search Assign Orders 
#########################################################################

Description:
    Use Search Box to search for component on the order assignment screen associated with a shipment.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * component_to_search_for - component to search for (i.e. shipment, load, order)
    * string_to_search_for - string to search for relative to component_to_search_for

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Create Outbound local xPaths
#########################################################################

Description:
    Create xpath variables for use in this utility

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * move_id - Move ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Web Delete Load
#########################################################################

Description:
    This scenario will delete a Load in the Web

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * move_id - load/carrier move id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Planner Utilities/Validate Load Deleted
#########################################################################

Description:
    This scenario validates the load has been deleted

MSQL/Groovy Files or API Endpoints:
    check_load_deleted.msql

Required Inputs:
    * move_id - load / carrier move id

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Web Outbound Trailer Utilities
Utility File: Web Outbound Trailer Utilities.feature
###############################################################

Utility Description:
    These utility scenarios perform outbound trailer operations in the Web

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Outbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Public Scenarios:
    * Web Trailer Check Paperwork  - Check for required paperwork
    * Web Assign Close and Dispatch Variables  - Creates close and dispatch variable based on operation
    * Web Validate Trailer Close Test Functionality Variables  - Validates the operation variable is an acceptable value
    * Web Open Shipping Loads Screen  - Opens web screen for Shipping Loads
    * Web Open Door Activity Screen  - Opens web screen for Shipping Door Activity
    * Web Open Transport Equipment Screen  - Opens web screen for Shipping Transport Equipment
    * Web Open Check In Screen  - Opens web screen for Shipping Check In
    * Web Validate Outbound Trailer Exists for Check In  - Checks system for trailer designated for check in
    * Web Select Check In Without Appointment  - This scenario selects the Check In Without Appointment option in the web
    * Web Search for Outbound Trailer  - This scenario selects the trailer/carcod to check in
    * Web Select Dock Door for Check In  - This scenario selects the Input dock door
    * Web Check In Outbound Trailer  - This scenario selects the Check In option in the web
    * Web Verify Outbound Trailer Check In  - This scenario verifies in the web that trailer check in was successful
    * Web Process Outbound Trailer Safety Check  - This scenario processes a safety check for Shipping trailers
    * Web Search for Load  - This scenario searches for the move that will be closed
    * Web Close the Trailer  - This scenario clicks the button to close the trailer
    * Web Set Dispatch Equipment Check Box  - This ensures the dispatch equipment check box is set properly based on operation
    * Web Click Save  - This scenario clicks the save button
    * Web Verify Paperwork  - This scenario verifies there is no required paperwork
    * Web Verify Confirmation  - This scenario waits for the successful confirmation
    * Web Dispatch the Trailer  - This scenario clicks the Dispatch and the Dispatch Load buttons
    * Web Select Load Row  - This scenario selects the row for the Load based on the move_id
    * Web Set Load Stop  - This scenario selects and loads the stop for the load
    * Web Verify Dock Door Ready  - This scenario waits for the LPNs and retrieve dock door to be ready
    * Web Select Move Immediately, Close, and Dispatch  - This scenario selects the move immediately, close equipment, and dispatch equipment if applicable
    * Web Create Outbound Trailer for Check In  - creates a shipping trailer in the web
    * Web Deassign LPN from Load  - deassigns a LPN from a load
    * Web Delete Stop  - This scenario selects and deletes the stop for the load
    * Web Reopen Transport Equipment  - Reopens the sepcified Transport Equipment in the Web
    * Web Close Transport Equipment from Door Activity  - closes trailer from Shipping Door Activity Screen
    * Web Dispatch Transport Equipment from Door Activity  - dispatched trailer from Shipping Door Activity Screen
    
Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Dispatch Transport Equipment from Door Activity
#########################################################################

Description:
    This scenario dispatches transport equipment from door activity screen relative to trailer

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Trailer ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Close Transport Equipment from Door Activity
#########################################################################

Description:
    This scenario closes specified Transport Equipment including Performing Safety Check Workflows in Web

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Trailer ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Reopen Transport Equipment
#########################################################################

Description:
    This scenario reopens the specified Transport Equipment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_id - Trailer ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Trailer Check Paperwork
#########################################################################

Description:
    Creates required data for test case

MSQL/Groovy Files or API Endpoints:
    check_shipping_paperwork_required.msql

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * pprwrk_req - This is used to determine if the warehouse is configured for requiring shipping paperwork to be printed

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Assign Close and Dispatch Variables
#########################################################################

Description:
    Creates close and dispatch variable based on operation

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * operation - LC will set close, LCD will set close and dispatch

Optional Inputs:
    * None

Outputs:
    * close - Yes or No for whether to close the trailer
    * dispatch - Yes or No for whether to dispatch the trailer

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Validate Trailer Close Test Functionality Variables
#########################################################################

Description:
    Validates the operation value for Trailer Close test case.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * operation - CLOSE will close and dispatch trailer, CLOSEONLY closes trailer without dispatch

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Validate Trailer Load Test Functionality
#########################################################################

Description:
    Validates the operation value is acceptable for Trailer Load test case.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * operation - LOAD will load the trailer, LC will load and close, LCD will load close and dispatch

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Open Shipping Loads Screen
#########################################################################

Description:
    This scenario opens the Shipping Loads screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Open Door Activity Screen
#########################################################################

Description:
    This scenario opens the Shipping Door Activity screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Open Transport Equipment Screen
#########################################################################

Description:
    This scenario opens the Shipping Transport Equipment screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Open Check In Screen
#########################################################################

Description:
    This scenario opens the Shipping Check In screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Validate Outbound Trailer Exists for Check In
#########################################################################

Description:
    Checks system for trailer designated for check in

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - Trailer Number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Select Check In Without Appointment
#########################################################################

Description:
    This scenario selects the Check In Without Appointment option in the web

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Search for Outbound Trailer
#########################################################################

Description:
    This scenario selects the trailer to check in

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - Trailer Number
    * carcod - Carrier Code

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Select Dock Door for Check In
#########################################################################

Description:
    This scenario selects the Input dock door

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * dock - the Input dock door for Check In

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Check In Outbound Trailer
#########################################################################

Description:
    This scenario selects the Check In option in the web

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Verify Outbound Trailer Check In
#########################################################################

Description:
    This scenario verifies in the web that trailer check in was successful

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * xPath_span_OK_sibling - A prebuilt variable in Web Element Utilities for child OK buttons

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Process Outbound Trailer Safety Check
#########################################################################

Description:
    This scenario processes a safety check for Shipping trailers

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - Trailer Number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Search for Load
#########################################################################

Description:
    This scenario searches for the move that will be closed

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * move_id - Move ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Close the Trailer
#########################################################################

Description:
    This scenario clicks the button to close the trailer

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Set Dispatch Equipment Check Box
#########################################################################

Description:
    This ensures the dispatch equipment check box is set properly based on operation

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * operation - CLOSE will close and dispatch trailer, CLOSEONLY closes trailer without dispatch

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Click Save
#########################################################################

Description:
    This scenario clicks the save button

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Verify Paperwork
#########################################################################

Description:
    This scenario verifies there is no required paperwork

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Verify Confirmation
#########################################################################

Description:
    This scenario waits for the successful confirmation

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Dispatch the Trailer
#########################################################################

Description:
    This scenario clicks the Dispatch and the Dispatch Load buttons

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Select Load Row
#########################################################################

Description:
    This scenario selects the row for the Load based on the move_id

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * move_id - Move ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Set Load Stop
#########################################################################

Description:
    This scenario selects and loads the stop for the load

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Verify Dock Door Ready
#########################################################################

Description:
    This scenario waits for the LPNs and retrieve dock door to be ready

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * dock - This will be used as the dock location for the trailer

Optional Inputs:
    * dock_door - This will be used as the dock location for the trailer IF and only if dock is not set

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Select Move Immediately, Close, and Dispatch
#########################################################################

Description:
    This scenario selects the move immediately, close equipment, and dispatch equipment if applicable

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * close - Yes will close the equipment
    * dispatch - Yes will dispatch the equipment

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Create Outbound Trailer for Check In
#########################################################################

Description:
    This scenario creates a shipping trailer for check in using the web

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - Trailer Number
    * carcod - Carrier Code

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Deassign LPN from Load
#########################################################################

Description:
    This scenario selects the load, navigates to LPNs tab, selects the LPN, and deassign it from the load

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * move_id - Move ID
    * ship_id - Ship ID

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Web Delete Stop
#########################################################################

Description:
    This scenario selects and deletes the stop for the load

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Outbound Trailer Utilities/Get Trailer ID from Trailer Number
#########################################################################

Description:
    This scenario gets the trlr_id from the trlr_num

MSQL/Groovy Files or API Endpoints:
    get_trailer_id_from_trailer_number.msql

Required Inputs:
    * trlr_num - Trailer Number

Optional Inputs:
    * None

Outputs:
    * trlr_id - Trailer ID


###############################################################
Utility Name: Web Receiving Utilities
Utility File: Web Receiving Utilities.feature
###############################################################

Utility Description:
    This Utility contains common utility scenarios for Web Receiving Features in the Web

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Public Scenarios:
    * Web Open Inbound Shipments Screen  - opens the Inbound Shipments screen
    * Get LPN Data for Reverse Confirmation - Gets the Sub - LPN associated to the Reverse Receipt of a load.
    * Web Validate Reverse Receipt  - Validates that a reverse receipt occurred on a load.
    * Web Reverse Receipt  - Reverses an order.
    * Validate Putaway Process  - Validate the putaway has been completed properly
    * Web Putaway  - This will receive and putaway inventory in recommended storage location
    * Web Inbound Shipments Search for Shipment  - Search Inbound Shipments by trailer
    * Web Receiving Validate Inbound Shipment  - Validates the shipment and order in the Web
    * Web Open Receiving Door Activity Screen  - opens the Receiving/Door Activity screen.
    * Web Door Activity Select Trailer  - Click on the trailer in the Door Activity Screen
    * Web Receiving Unload All  - Perform an Unload All operation from Door Activity
    * Web Receiving Search for Trailer from Door Activity  - Search for trailer on Door Activity Screen
    * Receiving Validate Trailer After Unload All  - Validate trailer state and location for Unload All operation
    * Web Press Inbound Orders  - Presses the Inbound Orders button.
    * Web Select Add Inbound Order Action  - Selects the Add Inbound Order from the Actions dropdown menu.
    * Web Enter Inbound Order Information  - Enters an saves the Inbound Order information.
    * Web Receiving OSD Receipt  - Perform Receive/Putaway for OSD conditions
    * Web Receiving Validate OSD States  - Valuidate OSD states after Receive/Putaway
    * Validate Inbound Order  - Validates the Inbound Order in the database.
    * Web Add Quality Issues Information  - Enters and saves the Quality Issue Information.
    * Validate Inbound Quality Issue Created  - Validates the Inbound Quality Issue was created in the database.
    * Web Open Add Inbound Shipment Window  - Opens the Add Inbound Shipment window from the Actions dropdown.
    * Web Enter Inbound Shipment Information  - Enters the information for the Inbound Shipment into the Add Inbound Shipment form.
    * Validate Inbound Shipment  - Validate the Inbound Shipment was created.
    * Web Open Inbound Shipment Details  - Selects the shipment to open its details screen.
    * Web Open Copy Inbound Orders to Shipment Window  - Selects the Copy Inbound Orders to Shipment option from the Actions dropdown.
    * Web Inbound Shipments Search for Inbound Shipment Number  - From inbound shipment screen, use search box to find shipment from the inbound shipment number.
    * Web Search For Order To Copy  - From copy order window, search for a given order.
    * Web Copy Order To Shipment  - Selects the order in the Copy Order to Shipment window and then adds it to the shipment.
    * Validate Inbound Order Copied to Shipment  - Validates the Inbound Order was copied to the Shipment in the database.
    * Web Receiving Complete OSD Shipment  - Complete Shipment after having and verifying an OSD condition
    * Web Assign Inbound Shipment  - Inbound Shipment is assigned to Transport Equipment
    * Validate Trailer Assign to Shipment  - Verifying shipment is assign to transport Equipment
    * Web Receiving Complete Shipment  - Complete Shipment clicking on Commplete Inbound Shipment button
    * Web Inbound Complete Shipment  - Complete Inbound Shipment in the Web
    * Web Receiving Dispatch Trailer Modes  - Select Transport Equipment option to leave_at_door, turnaround, or dispatch option and press OK
    * Web Receiving Without Trailer  - Given a shipment without a trailer, perform receiving in the web.
    * Web Open Receiving Work Queue Screen  - Open the Receiving/Work Queue screen, given the Web UI is open.
    * Web Open Report Quality Issue Screen - Selects report quality issue option from the actions drop - down on inbound shipment details screen
    * Web Add Report Quality Issues Information  - Enters and saves the Quality Issue Information on Report Quality screen
    * Web Validate Report Quality Issue Created  - Validates a Quality Issue was created
    * Web Validate Reversed LPN on Inbound Shipment Details Screen  - Validate Reversed LPN on Inbound Shipment Details screen

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Reverse Receipt
#########################################################################

Description:
    Given a load number, will reverse the receipt.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - the Inbound Shipment that will be reversed
    * lodnum - the Load Number that will be reversed

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Open Inbound Shipments Screen
#########################################################################

Description:
    Opens the Inbound Shipments Screen, given the Web UI is open.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Open Receiving Door Activity Screen
#########################################################################

Description:
    Opens the Receiving/Door Activity Screen, given the Web UI is open.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Get LPN Data for Reverse Confirmation
#########################################################################

Description:
    Gets LPN Data for Reverse Confirmation

MSQL/Groovy Files or API Endpoints:
    get_sub_lpn_to_validate_reverse_receipt.msql

Required Inputs:
    * lodnum - the load associated with the sub-load

Optional Inputs:
    * None

Outputs:
    * verify_subnum - the sub-LPN that is associated with the Reverse Receipt

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Validate Reverse Receipt
#########################################################################

Description:
    Validates that a reverse receipt occurred on a load.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * verify_subnum - the Sub-LPN to filter the search by
    * lodnum - the LPN to validate has been reversed

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Receiving Without Trailer
#########################################################################

Description:
    Given a shipment without a trailer, perform receiving in web. First select the staging lane and then receive and putaway goods

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ship_id - inbound shipment id

Optional Inputs:
    * rec_loc - receiving staging lane location

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Perform Receiving
#########################################################################

Description:
    Given a trailer number, perform receiving in web. Closing a receipt including receiving and putaway of goods and dispatch of equipment. Support for both ASN and non-ASN via the asn_flag

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - the trailer to close the receipt at
    * asn_flag - TRUE|FALSE to descern if this is an ASN or non-ASN receive condition
    * uom - Unit of Measure (Case|Each|Pallet)

Optional Inputs:
    * lodnum - load number to use for receiving
    * auto_close_flag - Should the trailer auto close (def='FALSE')
    * lotnum - lot number
    * revlvl - revision level

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Trailer Close and Dispatch Equipment
#########################################################################

Description:
    Close and dispatch equipment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - the trailer to close the receipt at
    * auto_close_flag - if set to TRUE will skip close operation (if available)

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Inbound Shipments Search for Shipment
#########################################################################

Description:
    From inbound shipment screen, use search box to find shipment from the trailer

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - trailer number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Door Activity Select Trailer
#########################################################################

Description:
    In the Door Activity Screen, click on the Trailer

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - Trailer Number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Receiving Unload All
#########################################################################

Description:
    This scenario will perform an Unload All operation using the WEB

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * rec_loc - receiving staging location
    * move_option - options are dispatch, move_to, or leave (relative to uload all operation)

Optional Inputs:
    * move_to_loc - option if move_option is move_to

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Receiving Search for Trailer from Door Activity
#########################################################################

Description:
    On the Dock Door Activity Screen, search for the input trailer.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - Trailer Number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Receiving Validate Trailer After Unload All
#########################################################################

Description:
    Gets trailer state and yard location and validates versus inputs/assumptions associated after an Unload All operation

MSQL/Groovy Files or API Endpoints:
    get_trailer_state_and_location.msql

Required Inputs:
    * yard_loc - receiving location for trailer
    * trlr_num - trailer number
    * move_option - options are dispatch, move_to, or leave

Optional Inputs:
    * move_to_loc - location trailer was moved to

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Press Inbound Orders
#########################################################################

Description:
    Presses the Inbound Orders button.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Select Add Inbound Order Action
#########################################################################

Description:
    Selects the Add Inbound Order from the Actions dropdown menu.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Enter Inbound Order Information
#########################################################################

Description:
    Enters and saves the Inbound Order information. Will add single line to the order.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * invnum - The Inventory number
    * order_type - The type of Inbound Order
    * supnum - The Supplier number
    * prtnum - The part number
    * expqty - The expected quantity

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Validate Inbound Order
#########################################################################

Description:
    Validates the Inbound Order in the database.

MSQL/Groovy Files or API Endpoints:
    validate_inbound_order.msql

Required Inputs:
    * invnum - The inventory number for the Inbound Order
    * supnum - The supplier number for the Inbound Order

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Receiving OSD Receipt
#########################################################################

Description:
    Performs a Receive and Putaway for Under, Over, and Damage product conditions.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - trailer number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Receiving Validate OSD States
#########################################################################

Description:
    After a Receive and Putaway for Under, Over, and Damage product receive conditions, navigate to shipment screen, view and validate the View LPNs and OSD Tabs

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - trailer number
    * prtnum - part number
    * rcvqty - quantity that was received
    * damaged_flag - did the receive mark goods as Damaged Product
    * rec_loc - location where product was directed during putaway

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Receiving Complete Shipment
#########################################################################

Description:
    Complete Shipment by click on Complete Inbound Shipment and dispatching equipment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * auto_close_flag - if TRUE skips Complete Shipment selection/action

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Open Inbound Quality Issues Screen
#########################################################################

Description:
    Opens the Inbound Quality Issues Screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Add Quality Issues Information
#########################################################################

Description:
    Enters and saves the Quality Issue Information.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * issue_type - Specifies whether this was a Carrier or Supplier quality issue.
    * issue_rsn - The reason for the quality issue.
    * inbqty - The quantity of quality issues.
    * supnum - The supplier of the quality issue.
    * carcod - The carrier of the quality issue.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Validate Inbound Quality Issue Created
#########################################################################

Description:
    Validates the Inbound Quality Issue was created in the database.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * issue_type - Specifies whether this was a Carrier or Supplier quality issue.
    * issue_rsn - The reason for the quality issue.
    * inbqty - The quantity of quality issues.
    * supnum - The supplier of the quality issue.
    * carcod - The carrier of the quality issue.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Receiving Validate Inbound Shipment
#########################################################################

Description:
    Validates the shipment and order in the Web

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * yard_loc - yard location
    * trlr_num - trailer number
    * prtnum - part number
    * expqty - expected quantity of prtnum

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Validate Putaway Process
#########################################################################

Description:
    Validate the putaway process has completed properly

MSQL/Groovy Files or API Endpoints:
    get_inventory.msql

Required Inputs:
    * lodnum - the load associated with the Inventory

Optional Inputs:
    * None

Outputs:
    * stoloc - storage location from MSQL query

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Putaway
#########################################################################

Description:
    This will receive and putaway inventory in recommended storage location

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - Name of the Transport Equipment
    * rec_loc - The location were the inventory is to be deposited
    * rec_qty - The required amount of quantity to be received
    * lodnum - The load number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Open Add Inbound Shipment Window
#########################################################################

Description:
    Opens the Add Inbound Shipment window from the Actions dropdown.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Enter Inbound Shipment Information
#########################################################################

Description:
    Enters the information for the Inbound Shipment into the Add Inbound Shipment form.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trknum - Name of the Shipment
    * rcpt_area - The receipt area for the inbound shipment

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Validate Inbound Shipment
#########################################################################

Description:
    Validate the Inbound Shipment was created.

MSQL/Groovy Files or API Endpoints:
    validate_inbound_shipment.msql

Required Inputs:
    * trknum - Name of the Shipment
    * rcvtrk_stat - receive truch stat

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Open Inbound Shipment Details
#########################################################################

Description:
    Selects the shipment to open its details screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trknum - Name of the Shipment

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Open Copy Inbound Orders to Shipment Window
#########################################################################

Description:
    Selects the Copy Inbound Orders to Shipment option from the Actions dropdown.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Inbound Shipments Search for Inbound Shipment Number
#########################################################################

Description:
    From inbound shipment screen, use search box to find shipment from the inbound shipment number.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trknum - Name of the Shipment

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Search For Order To Copy
#########################################################################

Description:
    From copy order window, search for a given order.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * invnum - inventory number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Copy Order To Shipment
#########################################################################

Description:
    Selects the order in the Copy Order to Shipment window and then adds it to the shipment.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * invnum - inventory number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Validate Inbound Order Copied to Shipment
#########################################################################

Description:
    Validates the Inbound Order was copied to the Shipment in the database.

MSQL/Groovy Files or API Endpoints:
    validate_inbound_order_in_shipment.msql

Required Inputs:
    * trknum - Name of the Shipment

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Assign Inbound Shipment
#########################################################################

Description:
    Inbound Shipment is assigned to Transport Equipment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - Name of the Transport Equipment
    * trknum - Name of the Shipment

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Validate Trailer Assign to Shipment
#########################################################################

Description:
    Validate a trailer was sssigned to a shipment

MSQL/Groovy Files or API Endpoints:
    validate_trailer_assign_to_shipment.msql

Required Inputs:
    * trknum - Name of the Shipment

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Receiving Add Line to Order
#########################################################################

Description:
    Adds a line to a created order

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * prtnum - The part number
    * expqty - The expected quantity
    * supnum - The Supplier number
    * rcvsts - The receive status

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Complete Inbound Shipment
#########################################################################

Description:
    Traverse to OSD/Complete Shipment button and Complete Shipment

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - trailer number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Receiving Verify OSB TAB States
#########################################################################

Description:
    After a Receive and Putaway for Under, Over, and Damage product receive conditions and on OSD Tab, validate the States for Short, Over, and Damaged 
    by clicking into each TAB and validating the screens giving information about state.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - trailer number
    * prtnum - part number
    * rcvqty - quantity that was received
    * expqty - expected quantity
    * rec_loc - location where product was directed during putaway

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Receiving Perform Receiving and Putaway
#########################################################################

Description:
    Perform Receive and Putaway including transport workflow, receive, and putaway actions.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - trailer number
    * rcvqty - quantity that was received
    * rec_loc - location where product was directed during putaway
    * asn_flag - TRUE|FALSE to descern if this is an ASN or non-ASN receive condition
    * uom - Unit of Measure (Case|Each|Pallet)

Optional Inputs:
    * lodnum - load number to use for receiving
    * lotnum - lot number
    * revlvl - revision level

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Process Receiving Tab
#########################################################################

Description:
    Process the Web Receiving TAB that is started from Actions->Receive Intentory option

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - trailer number
    * rcvqty - quantity that was received
    * asn_flag - TRUE|FALSE to descern if this is an ASN or non-ASN receive condition
    * uom - Unit of Measure (Case|Each|Pallet)

Optional Inputs:
    * lodnum - load number to use for receiving
    * lotnum - lot number
    * revlvl - revision level

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Process Putway Tab
#########################################################################

Description:
    Process the Web Putaway TAB that is started from Actions->Receive Intentory option

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * rec_loc - receiving location

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Process Serialization
#########################################################################

Description:
    Look to see if serialization is required for this receive and process the screen for entry of serial numbers

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Dock Door Search for Trailer
#########################################################################

Description:
    Enter dock door in the search box and search by locations

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * yard_loc - Receiving Dock Door

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Create local xPaths
#########################################################################

Description:
    Create xpath variables for use in this utility

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * trlr_num - trailer number

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Enter Supplier Quality Issue Information
#########################################################################

Description:
    Enters the Supplier Quality Issue Information.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * issue_rsn - The reason for the quality issue.
    * inbqty - The quantity of quality issues.
    * supnum - The supplier of the quality issue.
    * check_report_issue_screen - Validates the current screen for Report Quality Issue or Add Quality Issue

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Enter Carrier Quality Issue Information
#########################################################################

Description:
    Enters the Carrier Quality Issue Information.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * issue_rsn - The reason for the quality issue.
    * inbqty - The quantity of quality issues.
    * carcod - The carrier of the quality issue.
    * check_report_issue_screen - Validates the current screen for Report Quality Issue or Add Quality Issue

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Validate Supplier Inbound Quality Issue
#########################################################################

Description:
    Validates the Supplier Inbound Quality Issue in the database.

MSQL/Groovy Files or API Endpoints:
    validate_supplier_inbound_quality_issue.msql

Required Inputs:
    * inbqty - The quantity of quality issues.
    * ib_issue - The code for the type of quality issue.
    * supnum - The supplier of the quality issue.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Validate Carrier Inbound Quality Issue
#########################################################################

Description:
    Validates the Carrier Inbound Quality Issue in the database.

MSQL/Groovy Files or API Endpoints:
    validate_carrier_inbound_quality_issue.msql

Required Inputs:
    * inbqty - The quantity of quality issues.
    * ib_issue - The code for the type of quality issue.
    * carcod - The carrier of the quality issue.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Inbound Complete Shipment
#########################################################################

Description:
    This sceanrio will complete an Inbound Shipment in Web

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - trailer number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Receiving Dispatch Trailer Modes
#########################################################################

Description:
    This scenario will select Transport Equipment option leave_at_door, turnaround, or dispatch option and press OK

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_option - what to do with trailer (leave_at_Door, turnaround, or dispatch)

Optional Inputs:
    * turnaround_carrier - If trlr_option is turnaround carrier to use
    * turnaround_location - If trlr_option is turnaround location to use

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Open Receiving Work Queue Screen
#########################################################################

Description:
    Open the Receiving/Work Queue screen, given the Web UI is open.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Open Report Quality Issue Screen
#########################################################################

Description:
    Selects report quality issue option from the actions drop-down on inbound shipment details screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Add Report Quality Issues Information
#########################################################################

Description:
    Enters and saves the Quality Issue Information on Report Quality screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * issue_type - Specifies whether this was a Carrier or Supplier quality issue.
    * issue_rsn - The reason for the quality issue.
    * inbqty - The quantity of quality issues.
    * supnum - The supplier of the quality issue.
    * carcod - The carrier of the quality issue.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Validate Report Quality Issue Created
#########################################################################

Description:
    Validates a Quality Issue was created.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * issue_type - Specifies whether this was a Carrier or Supplier quality issue.
    * issue_rsn - The reason for the quality issue.

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Receiving Utilities/Web Validate Reversed LPN on Inbound Shipment Details Screen
#########################################################################

Description:
    Validates a reversed LPN on Inbound Shipment details screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trknum - Name of the Shipment
    * lpn - Reversed LPN details to validate.

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Web Serialization Utilities
Utility File: Web Serialization Utilities.feature
###############################################################

Utility Description:
    This utility contains scenarios using the Web to perform serialization activities

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Serialization

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web

Public Scenarios:
    * Web Scan Serial Number Cradle to Grave Receiving

Utility Assumptions:
    * See Terminal Serialization Utilities.feature for full details on serialization

Utility Notes:
    * None

#########################################################################
Utility Scenario: Web Serialization Utilities/Web Scan Serial Number Cradle to Grave Receiving
#########################################################################

Description:
    For CRDL_TO_GRAVE receiving serialization in web, first (if lodnum is not provided) click on generate LPNs button and then based screen data, 
    enter the requested serial numbers for each serial number type grouping.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * lodnum - load number

Outputs:
    * serialization_phase - set to RCV


###############################################################
Utility Name: Web Trailer Move Utilities
Utility File: Web Trailer Move Utilities.feature
###############################################################

Utility Description:
    These Utility scenarios perform actions specific to trailer moves in the Web

Utility Author: Tryon Solutions
Utility Type: Regression
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Public Scenarios:
    * Web Trailer Move - top - level trailer move operation in the Web

Utility Assumptions:
    * None

Utility Notes:
    * Utility Scenarios to verify trailer move operations via MOCA are located in the Terminal version of this Utility.

#########################################################################
Utility Scenario: Web Trailer Move Utilities/Web Trailer Move
#########################################################################

Description:
    This scenario moves a trailer using the WEB

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * trlr_num - Trailer Number
    * move_to_dock_loc - Location trailer will be moved to
    * work_queue_or_immediate - Variable that indicates when the move is performed

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Web Utilities
Utility File: Web Utilities.feature
###############################################################

Utility Description:
    This Utility contains general Utility scenarios for the Web

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: General Web

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Public Scenarios:
    * Web Login  - Navigate to the WMS Screen in Web Browser
    * Web Logout  - Will log out from Web
    * Web End Driver Tasks  - Kill Web Driver Tasks
    * Web Screen Search  - Open's WMS's web search screen and look for screen
    * Web Change Warehouse  - Will Change Warehouse in Web
    * Web Environment Setup  - Setup variables and data needed for Web testing
    * Web Select Workstation  - Select from workstation screen a workstation to use
    * Web Set Calendar Date  - Opens calendar date picker and selects Today.
    * Web Component Search  - Use Web Search Box to find a specified component from most Web screens

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Web Utilities/Web Environment Setup
#########################################################################

Description:
    This scenario will setup common variables for Web based testing

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Utilities/Web Login
#########################################################################

Description:
    This scenario will Navigate to WMS's Main Screen in web browser and will open a particular warehouse

MSQL/Groovy Files or API Endpoints:
    check_default_warehouse.msql

Required Inputs:
    * browser - Browser name (set in Environment by default)
    * web_ui - Web URL (set in Environment by default)
    * USERNAME - Username (This value comes from MOCA credentials)
    * PASSWORD - Password (This value comes from MOCA credentials)

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Utilities/Web Logout
#########################################################################

Description:
    This scenario will log out of the WMS Web application. If the logout button/path cannot be seen, the browser will be explicitly closed and a fail step will be executed.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * USERNAME - This value comes from MOCA credentials

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Utilities/Web End Driver Tasks
#########################################################################

Description:
    This scenario will kill the driver tasks associated with chrome, Edge, and IE browsers.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Utilities/Web Screen Search
#########################################################################

Description:
    This scenario will open the WMS web screen that needs to be opened.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * wms_screen_to_open - Name of the WMS web screen that needs to be opened
    * wms_search - Element for Search field

Optional Inputs:
    * wms_parent_menu - Parent menu for WMS screen to open (ex: receiving, shipping, etc...)

Outputs:
    * None

#########################################################################
Utility Scenario: Web Utilities/Web Change Warehouse
#########################################################################

Description:
    This scenario will change warehouse in the Web.

MSQL/Groovy Files or API Endpoints:
    get_warehouse_long_description.msql

Required Inputs:
    * wh_id - This value comes from environment file if not it will open with default warehouse

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Utilities/Web Select Workstation
#########################################################################

Description:
    Navigate to workstatation screen and select workstation to use

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * workstation - WMS workstation to use

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Utilities/Web Set Calendar Date
#########################################################################

Description:
    Opens calendar date picker and selects Today.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Utilities/Web Component Search
#########################################################################

Description:
    Use Search Box to find a specified component from most Web search screens Note, exclusions do apply with other search boxes/elements having differing xPaths.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * component_to_search_for - component to search for (i.e. shipment, load, order)
    * string_to_search_for - string to search for relative to component_to_search_for

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Web Wave Utilities
Utility File: Web Wave Utilities.feature
###############################################################

Utility Description:
    These utility scenarios perform wave planning and allocation functions in the Web

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Allocation

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Public Scenarios:
    * Web Plan Wave  - plans customer orders into a wave
    * Get Wave Number  - gets the planned wave number to use for allocation
    * Web Allocate Wave  - allocates the Wave
    * Web Select Order  - selects the order to plan
    * Web Add Load and Plan Shipment  - plans the order into a shipment and assigns a load
    * Validate Shipment Planned  - validates the shipment was planned
    * Web Unallocate Wave  - unallocate an allocated Wave in the Web
    * Validate Wave Unallocated  - check to see if Web was unallocated
    * Web Navigate to Outbound Planner Waves and Picks  - navigate to Outbound Planner Waves and Picks
    * Web Navigate to Picking Waves and Picks  - navigate to Picking Waves and Picks
    * Web Cancel Short  - Cancels a short from a wave
    * Web Cancel and Reallocate Short  - Cancels and reallocates a short on a wave
    * Web Process Cancel Short  - Proces a short on a wave
    * Wait for Order Picks to Release  - Wait up to 1 minutes for picks for an order to release
    * Get Pick Totals for Order  - get the number of picks and the total unit quantity of picks for an order
    * Web Unplan Wave  - This scenario will Unplan a Wave in the WebUI
    * Validate Unplan Wave  - This scenario will utilize a MSQL to verify successful unplan wave

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Web Wave Utilities/Web Unallocate Wave
#########################################################################

Description:
    This scenario will unallocate a Wave in the Web

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * wave_num - Wave ID (schbat)

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Wave Utilities/Web Plan Wave
#########################################################################

Description:
    This scenario plans customer orders into a wave using the WEB

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ordnum - Order Number
    * cstnum - Customer Number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Wave Utilities/Get Wave Number
#########################################################################

Description:
    This scenario gets the planned wave number to use for allocation

MSQL/Groovy Files or API Endpoints:
    get_schbat_for_shipment.msql

Required Inputs:
    * ordnum - Order Number

Optional Inputs:
    * None

Outputs:
    * schbat1 - schbat value renamed

#########################################################################
Utility Scenario: Web Wave Utilities/Web Allocate Wave
#########################################################################

Description:
    This scenario allocates the Wave in the Web

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * schbat1 - Wave number

Optional Inputs:
    * alc_destination_zone - Destination Zone
    * alc_staging_lane - Staging Lane
    * alc_consonsolidate_by - Consolidate by (default Outbound Order Number)
    * alc_imr_uoms - Comma seperate list of UOMs to be immediately released

Outputs:
    * None

#########################################################################
Utility Scenario: Web Wave Utilities/Web Select Order
#########################################################################

Description:
    This scenario selects the order to plan

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * ordnum - Order number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Wave Utilities/Web Add Load and Plan Shipment
#########################################################################

Description:
    This scenario plans the order into a shipment and assigns a load

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * load - Load number. Maps to car_move.car_move_id
    * ordnum - Order number

Optional Inputs:
    * None

Outputs:
    * ship_id - Shipment ID generated in planning

#########################################################################
Utility Scenario: Web Wave Utilities/Validate Shipment Planned
#########################################################################

Description:
    This scenario validates the shipment was planned

MSQL/Groovy Files or API Endpoints:
    check_stop_created.msql

Required Inputs:
    * load - Load number. Maps to car_move.car_move_id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Wave Utilities/Web Navigate to Outbound Planner Waves and Picks
#########################################################################

Description:
    Use Web Search to navigate to Outbount Planner/Waves and Picks screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Wave Utilities/Web Navigate to Picking Waves and Picks
#########################################################################

Description:
    Use Web Search to navigate to Picking/Waves and Picks screen

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Wave Utilities/Validate Wave Unallocated
#########################################################################

Description:
    This scenario validates the wave is unallocated (batsts = 'PLAN')

MSQL/Groovy Files or API Endpoints:
    check_wave_status.msql

Required Inputs:
    * wave_num - WAVE number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Wave Utilities/Web Cancel Short
#########################################################################

Description:
    This scenario cancels a short from a wave. The logic assumes the wave screen is open and the wave is filtered.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * schbat1 - Wave number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Wave Utilities/Web Cancel and Reallocate Short
#########################################################################

Description:
    This scenario cancels and reallocates a short from a wave.  The logic assumes the wave screen is open and the wave is filtered.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * wave_num - Wave number

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Wave Utilities/Web Process Cancel Short
#########################################################################

Description:
    This scenario allocates the Wave in the Web

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * wave_num - Wave number
    * cancel_short_method - cancel code (Cancel Short and Reallocate or Cancel Short)

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Wave Utilities/Wait for Order Picks to Release
#########################################################################

Description:
    This scenario waits up to 1 minutes for picks for an order to release

MSQL/Groovy Files or API Endpoints:
    wait_for_order_picks_to_release.msql

Required Inputs:
    * ordnum - Order number
    * client_id - Client Id

Optional Inputs:
    * None

Outputs:
    * pcksts - pick status

#########################################################################
Utility Scenario: Web Wave Utilities/Get Pick Totals for Order
#########################################################################

Description:
    This scenario will get the number of picks and the total unit quantity of picks for an order

MSQL/Groovy Files or API Endpoints:
    get_pick_totals_for_order.msql

Required Inputs:
    * ordnum - Order number
    * client_id - Client Id

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Wave Utilities/Web Unplan Wave
#########################################################################

Description:
    This scenario will Unplan a Wave in the Web

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * wave_num - Wave ID (schbat)

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Wave Utilities/Validate Wave Unplan
#########################################################################

Description:
    This scenario will validate wave unplan was successful by using MOCA

MSQL/Groovy Files or API Endpoints:
    validate_wave_unplan.msql

Required Inputs:
    * wave_num - Wave ID (schbat)

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Web Work Order Utilities
Utility File: Web Work Order Utilities.feature
###############################################################

Utility Description:
    These Utility scenarios perform actions specific to work order processing in the Web

Utility Author: Tryon Solutions
Utility Type: Regression
Functional Area: Production

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web

Public Scenarios:
    * Web Create Work Order  - creates a work order in the web
    * Web Allocate Work Order  - allocates a work order in the web
    * Web Start Work Order  - starts a work order in the web
    * Web Complete Work Order  - completes a work order in the web
    * Web Open Work Order Screen  - opens Work Order screen in the web
    * Web Click Work Order Check Box  - clicks the work order checkbox

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Web Work Order Utilities/Web Create Work Order
#########################################################################

Description:
    This scenario creates the work order in the web client

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Work Order Utilities/Web Allocate Work Order
#########################################################################

Description:
    This scenario allocates the work order in the web client

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * wkonum - Work Order number to allocate

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Work Order Utilities/Web Start Work Order
#########################################################################

Description:
    This scenario starts the work order in the web client.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * wkonum - Work Order number to start

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Work Order Utilities/Web Complete Work Order
#########################################################################

Description:
    This scenario completes the work order in the web client.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * wkonum - Work Order number to complete

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Work Order Utilities/Web Open Work Order Screen
#########################################################################

Description:
    This scenario opens the Work Orders WMS Web screen.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Work Order Utilities/Web Click Work Order Check Box
#########################################################################

Description:
    This scenario clicks the work order check box in web

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * wkonum - Work Order number

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Web Workflow Utilities
Utility File: Web Workflow Utilities.feature
###############################################################

Utility Description:
    Utility scenarios to perform Workflows within the Web

Utility Author: Tryon Solutions
Utility Type: Utility
Functional Area: Workflows

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web

Public Scenarios:
    * Web Door Activity Process Trailer Safety Check  - Performs Trailer Safety Check for Door Activity Processes via the Web.
    * Web Transport Equipment Process Trailer Safety Check  - Performs a Trailer Safety Check for Transport Equipment via the Web.
    * Web Shipping Loads Process Trailer Safety Check  - Performs a Trailer Safety Check for Shipping Loads via the Web.
    * Web Perform Transport Equipment Workflow Safety Check Pass  - Performs a Safety Check for Transport Equipment as passing via the Web.
    * Web Perform Trailer Safety Check Pass  - Performs a Trailer Safety Check with Pass responses via Web
    * Web Complete Trailer Safety Check  - Completes the Trailer Safety Check with Yes responses via Web
    
Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Web Workflow Utilities/Web Door Activity Process Trailer Safety Check
#########################################################################

Description:
    This scenario performs a Trailer Safety Check when prompted on the Door Activities screen in the Web.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Workflow Utilities/Web Transport Equipment Process Trailer Safety Check
#########################################################################

Description:
    This scenario performs a Trailer Safety Check when prompted during on the Transport Equipment screen in the Web.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Workflow Utilities/Web Shipping Loads Process Trailer Safety Check
#########################################################################

Description:
    This scenario performs a Trailer Safety Check when set safety button is visible on screen. Can be seen as a span or a div element, and scenario handles both cases.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Workflow Utilities/Web Perform Transport Equipment Workflow Safety Check Pass
#########################################################################

Description:
    This scenario performs a Trailer Safety Check when prompted during on the Transport Equipment screen in the Web.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Workflow Utilities/Web Perform Trailer Safety Check Pass
#########################################################################

Description:
    This scenario performs a Trailer Safety Check when prompted (with Pass) within the Web.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Workflow Utilities/Web Complete Trailer Safety Check
#########################################################################

Description:
    This scenario Completes the Trailer Safety Check when prompted (with Yes) within the Web.

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None


###############################################################
Utility Name: Web Yard Utilities
Utility File: Web Yard Utilities.feature
###############################################################

Utility Description:
    This Utility contains common utility scenarios for Web Yard functionality in the Web

Utility Author: Tryon Solutions
Utility Type: utility
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web

Public Scenarios:
    * Web Validate Audit Missing Equipment  - Will Validate Missing equipment in Yard location
    * Web Create Audit Work for Yard Location  - This scenario will create Audit work for Yard locations

Utility Assumptions:
    * None

Utility Notes:
    * None

#########################################################################
Utility Scenario: Web Yard Utilities/Web Validate Audit Missing Equipment
#########################################################################

Description:
    This scenario will validate Missing equipment in Yard location

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * None

Optional Inputs:
    * None

Outputs:
    * None

#########################################################################
Utility Scenario: Web Yard Utilities/Web Create Audit Work for Yard Location
#########################################################################

Description:
    This scenario will create Audit work for Yard locations

MSQL/Groovy Files or API Endpoints:
    * None

Required Inputs:
    * audit_start_loc - Starting location where the yard audit work is to create
    * audit_end_loc - Ending location where the yard audit work is to create

Optional Inputs:
    * None

Outputs:
    * None


