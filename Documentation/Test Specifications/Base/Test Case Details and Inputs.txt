###############################################################
Test Case Name: BASE-API-8010 API Alternate Item Lookups
Test Case File: BASE-API-8010 API Alternate Item Lookups.feature
###############################################################

Test Case Description:
    This Test Case validates alternate item types of a given part

Test Case Author: Tryon Solutions 
Test Case Type: Pre-Validation
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: API

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "N/A"

Test Case Input CSV: Test Case Inputs/BASE-API-8010.csv

Test Case Required Inputs:
    * prtnum - Item Number - Every Alternate Item is attached to a specific prtnum/prt_client_id
    * prt_client_id - Item Client ID - Every Alternate Item is attached to a specific prtnum/prt_client_id
    * alt_prt_typ - Alternate Item Type - Every Alternate Item has a free-form type associated with it (UPCCOD, GTIN, etc)
    * expected_result - What we should expect the "alt_prtnum" variable to be based on the data in our Bundle snapshot

Test Case Optional Inputs:
    * uomcod - Unit of Measure Code - Optionally, an Alternate Item can be associated with a specific UOM of an item (EA, CS, PA)

Test Case Assumptions:
    * None

Test Case Notes:
    * No dataset is used, relies on alternate items in the system

Test Case Examples:
    * Run with "COMB" item and "GTIN" alternate item type, expect a non-empty response
    * Run with "COMB" item and "UPCCOD" alternate item type, expect a non-empty response
    * Run with "COMB" item and "EAN" alternate item type, expect empty response
    * Run with "COMB" item "CS" UOM, should return empty response regardless of alternate item type
    * Run with "COMB" item "CS" UOM, should return empty response regardless of alternate item type
    * Run with "COMB" item "CS" UOM, should return empty response regardless of alternate item type
    * Run with "SHAMPOO" item and "GTIN" alternate item type, expect a non-empty response
    * Run with "SHAMPOO" item and "UPCCOD" alternate item type, expect empty response
    * Run with "SHAMPOO" item and "EAN" alternate item type, expect empty response
    * Run with "SHAMPOO" item "CS" UOM, should return empty response regardless of alternate item type
    * Run with "SHAMPOO" item "CS" UOM, should return empty response regardless of alternate item type
    * Run with "SHAMPOO" item "CS" UOM, should return empty response regardless of alternate item type
    * Run with "SOAP" item and "GTIN" alternate item type, expect empty response
    * Run with "SOAP" item and "UPCCOD" alternate item type, expect a non-empty response
    * Run with "SOAP" item and "EAN" alternate item type, expect empty response
    * Run with "SOAP" item "CS" UOM, should return empty response regardless of alternate item type
    * Run with "SOAP" item "CS" UOM, should return empty response regardless of alternate item type
    * Run with "SOAP" item "CS" UOM, should return empty response regardless of alternate item type


###############################################################
Test Case Name: BASE-RCV-0010 Terminal Inbound Receiving
Test Case File: BASE-RCV-0010 Terminal Inbound Receiving.feature
###############################################################

Test Case Description:
    This Test Case generates a receipt via MSQL and receives it.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Receiving"
Test Case Dataset cleanup scripts: "Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-0010.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * supnum - A valid supplier
    * rcv_qty - quantity to receive for terminal input
    * putaway_method - 1 is Directed, 2 is Sorted, 3 is Undirected.
    * asn_flg - Flag for ASN Receipts
    * actcod - Activity Code
    * lpn - use explicit LPN for load instead of one generated by system

Test Case Optional Inputs:
    * rcv_prtnum - Populate this field to test blind receiving
    * validate_loc - Location to be validated for Directed Putaway, when doing Directed Putaway only
    * lotnum - Lotnum to add to the receiving line when creating the invoice and to be used for receiving if the item is lot tracked
    * rec_loc - A valid Receiving Staging lane when using sorting putaway
    * dep_loc - A valid Receiving Staging lane for deposit for undirected putaway
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * qa_sts - Valid QA Status, if the part should be received in a QA Status
    * expect_discrepancies - on receiving completion should process expect discrepancies
    * revlvl - Revision Level

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the receive stage location
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Putaway Method defaults to Undirected If I verify variable is not specified in Feature or CSV
    * Processing ends with the deposit into the dep_loc

Test Case Notes:
    * None

Test Case Examples:
    * OUTCAP_ONLY serialization prtnum being received (should not require serial number inputs)
    * CRDL_TO_GRAVE serialization with receive quantity of 1
    * CRDL_TO_GRAVE serialization with receive quantity of 20
    * putaway_method - 1 for Directed, using the dep_loc input for deposit
    * putaway_method - 2 for Sorted, using the rec_loc input for deposit
    * putaway_method - 3 for Undirected, using the dep_loc input for deposit
    * No serialization, receiving Subload tracked part
    * No serialization, receiving Detail tracked part
    * No serialization, receiving Lot Num, Revision Level tracked part


###############################################################
Test Case Name: BASE-RCV-0020 Terminal Inbound Putaway
Test Case File: BASE-RCV-0020 Terminal Inbound Putaway.feature
###############################################################

Test Case Description:
    This Test Case generates an LPN to perform an Undirected Putaway

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Putaway"
Test Case Dataset cleanup scripts: "Putaway"

Test Case Input CSV: Test Case Inputs/BASE-RCV-0020.csv

Test Case Required Inputs:
    * wh_id - Warehouse ID
    * trlr_num - Trailer Number
    * inv_num - Inventory number. Can be set to match the trlr_num
    * yard_loc - Yard location
    * invtyp - Inventory type
    * rcvsts - Receive status
    * expqty - Expected quantity for the receipt
    * supnum - Supplier Number
    * rec_loc - Receive location. Where the load will be received
    * uomcod - UOM Code
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * dep_loc - Deposit location. Where the load will be deposited
    * prtnum - Needs to be a valid part number that is assigned in your system
    * ftpcod - Footprint Code. Must be a valid footprint code for the given prtnum
    * untqty - Quantity being added
    * allocate - Boolean specifying whether to allocate
    * override - Boolean specifying whether there exists an override
    * over_code - Overage code
    * over_dep_loc - Overage deposit location. Where overages will be deposited to (if allowed).
    * actcod - Action code
    * carcod - Carrier code of the trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Receiving can continue whether there are overages or shorts.

Test Case Notes:
    * Regression runs require parts and enough config to deposit inventory into the receive stage location
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Processing ends with the deposit into the dep_loc

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-0030 Terminal Inbound Reverse Receiving
Test Case File: BASE-RCV-0030 Terminal Inbound Reverse Receiving.feature
###############################################################

Test Case Description:
    Performs Terminal Reverse Receiving

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Putaway"
Test Case Dataset cleanup scripts: "Putaway"

Test Case Input CSV: Test Case Inputs/BASE-RCV-0030.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * invnum - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use client_id in Environment.feature
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - This can be a fabrication, but assumes simple, standard LPN receiving
    * supnum - This needs to be a valid supplier, assigned in your system
    * rec_loc - the receiving staging lane used for staging putaway, must be valid
    * uomcod - valid Unit of Measure
    * ftpcod - valid footprint code
    * untqty - the amount received
    * lodnum - the load number
    * invsts - a valid inventory status
    * carcod - Carrier code of the trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Load is received and trailer is not dispatched/closed

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-0040 Terminal Inbound ASN Receiving
Test Case File: BASE-RCV-0040 Terminal Inbound ASN Receiving.feature
###############################################################

Test Case Description:
    This Test Case generates an ASN receipt via MSQL and receives it.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Rec_ASN_Receiving"
Test Case Dataset cleanup scripts: "Rec_ASN_Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-0040.csv

Test Case Required Inputs:
    * asn_lodnum - the user-provided LPN value to create inventory
    * ftpcod - a valid footprint code for inventory creation
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * supnum - A valid supplier
    * rcv_qty - quantity to receive for terminal input
    * putaway_method - 1 is Directed, 2 is Sorted, 3 is Undirected.
    * asn_flg - Flag for ASN Receipts
    * actcod - Activity Code

Test Case Optional Inputs:
    * rec_loc - A valid Receiving Staging lane when using sorting putaway
    * dep_loc - A valid Receiving Staging lane for deposit for undirected putaway
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * qa_sts - Valid QA Status, if the part should be received in a QA Status
    * expire_dte - set value for ASN Inventory with Expiration Dates

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the rec_loc
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Putaway Method defaults to Undirected If I verify variable is not specified in Feature or CSV
    * Processing ends with the deposit into the rec_loc
    * This Test Case will only be used for vehicle types configured to hold a single load
    * The system is configured for the Putaway Method chosen
    * There is an existing LOTNUM in the system for the item being received

Test Case Notes:
    * None

Test Case Examples:
    * CRDL_TO_GRAVE detail level serialized prtnum being received and requiring serial numbers to be associated to ASN (quantity 10)
    * CRDL_TO_GRAVE serialized prtnum being received and requiring serial numbers to be associated to ASN (quantity 50)
    * OUTCAP_ONLY serialized prtnum being received (should not require serial numbers to be added) 
    * putaway_method - 1 for Directed, using the dep_loc input for deposit
    * putaway_method - 2 for Sorted, using the rec_loc input for deposit
    * putaway_method - 3 for Undirected, using the dep_loc input for deposit


###############################################################
Test Case Name: BASE-RCV-0050 Terminal Inbound Receiving Without Order
Test Case File: BASE-RCV-0050 Terminal Inbound Receiving Without Order.feature
###############################################################

Test Case Description:
    Performs Terminal Receiving WithOut Order

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Rcv_wo_Order"
Test Case Dataset cleanup scripts: "Rcv_wo_Order"

Test Case Input CSV: Test Case Inputs/BASE-RCV-0050.csv

Test Case Required Inputs:
    * rec_quantity - the quantity to be receive
    * lodnum - the load to associate the received goods with
    * prtnum - the part to receive
    * reason - reason for receiveing
    * status - a valid inventory status
    * putaway_method - 1 is Directed, 2 is Sorted, 3 is Undirected.
    * deposit_loc - If Storage location is provided: storage_loc - Else if Receive Stage location is provided: rec_stg_loc

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-0060 Terminal Inbound ASN Receiving Non Trusted Supplier
Test Case File: BASE-RCV-0060 Terminal Inbound ASN Receiving Non Trusted Supplier.feature
###############################################################

Test Case Description:
    This Test Case generates an ASN receipt from a non-trusted supplier via MSQL and receives it.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Rec_ASN_NT_Supplier_Receiving"
Test Case Dataset cleanup scripts: "Rec_ASN_NT_Supplier_Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-0060.csv

Test Case Required Inputs:
    * asn_lodnum - the user-provided LPN value to create inventory
    * ftpcod - a valid footprint code for inventory creation
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected- to be inputted as receive quantity
    * supnum - A valid supplier
    * putaway_method - 3 is Undirected.
    * asn_flg - Flag for ASN Receipts
    * actcod - Activity Code
    * rcv_uom - Unit of measure upon receipt

Test Case Optional Inputs:
    * rec_loc - A valid Receiving Staging lane when using sorting putaway
    * dep_loc - A valid Receiving Staging lane for deposit for undirected putaway
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * chg_rcv_sts - Valid Inv Status, if the inventory status needs to be changed on receipt
    * rcv_qty - quantity to receive, if quantity needs to be changed on receipt
    * chg_qty - flag that prompts recieve quantity to be overriden, if receive quantity needs to be changed upon receipt
    * chg_uom - flag that prompts uom to be overriden, if unit of measure needs to be changed on receipt
    * chg_sts - flag that prompts invsts to be overriden, if the inventory status needs to be changed on receipt
    * expire_dte - set value for ASN Inventory with Expiration Dates

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the rec_loc
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging
    * Undirected putaway method is used for this test.
    * Processing ends with the deposit into the rec_loc
    * This Test Case will only be used for vehicle types configured to hold a single load
    * The system is configured for the Putaway Method chosen
    * There is an existing LOTNUM in the system for the item being received
    * Supplier is setup as non trusted supplier.
    * Test performed for non serialized inventory.

Test Case Notes:
    * None

Test Case Examples:
    * Not changing any of the ASN LPN attributes
    * Changing Receive Quantity of the ASN LPN
    * Changing the Receive Quantity and Unit of Measure of the ASN LPN
    * Changing the Receive Quantity, Unit of Measure and Inventory Status of the ASN LPN
    * Changing the Receive Quantity, Unit of Measure and Inventory Status of the ASN LPN with CRDL_TO_CRAVE serialized prtnum
    * Changing the Receive Quantity, Unit of Measure and Inventory Status of the ASN LPN with OUTCAP_ONLY serialized prtnum
    * Not changing any of the ASN LPN attributes (detail level CRDL_TO_CRAVE serialized prtnum)


###############################################################
Test Case Name: BASE-RCV-0070 Terminal Inbound Unload All
Test Case File: BASE-RCV-0070 Terminal Inbound Unload All.feature
###############################################################

Test Case Description:
    This Test Case will exercise Receiving Unload Shipment functionality in the Terminal

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Receiving"
Test Case Dataset cleanup scripts: "Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-0070.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * yard_loc - This is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * supnum - A valid supplier

Test Case Optional Inputs:
    * trac_ref - tracking reference for dispatch information
    * driver_lic - drivers license for dispatch information
    * driver_nam - drivers name for dispatch information

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-0080 Terminal Inbound Directed Putaway from Receiving Override
Test Case File: BASE-RCV-0080 Terminal Inbound Directed Putaway from Receiving Override.feature
###############################################################

Test Case Description:
    This Test Case receives a non-ASN receipt and performs a putaway operation overriding the putaway location and selecting an override code

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Receiving"
Test Case Dataset cleanup scripts: "Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-0080.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * supnum - A valid supplier
    * rcv_qty - quantity to receive for terminal input
    * putaway_method - 1 for Directed
    * asn_flg - Flag for ASN Receipts (FALSE)
    * actcod - Activity Code
    * rec_loc - A valid Receiving Staging lane when using sorting putaway
    * dep_loc - A valid Receiving Staging lane for deposit for undirected putaway
    * allocate - Boolean specifying whether to allocate putway location
    * override - Boolean specifying whether there exists an override to putaway location
    * over_code - override code
    * over_dep_loc - Overrride deposit location. Where overages will be deposited to (if allowed).
    * override_f2 - use F2 to display override code during putway and selects one
    * lpn - assign specific LPN during receiving prior to inventory creation

Test Case Optional Inputs:
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * qa_sts - Valid QA Status, if the part should be received in a QA Status
    * lotnum - Lotnum to add to the receiving line when creating the invoice and to be used for receiving if the item is lot tracked
    * rcv_prtnum - Populate this field to test blind receiving
    * validate_loc - Location to be validated for Directed Putaway, when doing Directed Putaway only

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the receive stage location
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Processing ends with the deposit into the over_dep_loc

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-0090 Terminal Inbound Over Receiving Authorized
Test Case File: BASE-RCV-0090 Terminal Inbound Over Receiving Authorized.feature
###############################################################

Test Case Description:
    This Test Case generates a receipt via MSQL and receives it. It will over receive based on expqty and rec_qty inputs and user will have permissions/role
    to do the over receive.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Receiving"
Test Case Dataset cleanup scripts: "Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-0090.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * supnum - A valid supplier
    * rcv_qty - quantity to receive for terminal input
    * putaway_method - 1 is Directed, 2 is Sorted, 3 is Undirected.
    * asn_flg - Flag for ASN Receipts
    * actcod - Activity Code
    * lpn - use explicit LPN for load instead of one generated by system

Test Case Optional Inputs:
    * rcv_prtnum - Populate this field to test blind receiving
    * validate_loc - Location to be validated for Directed Putaway, when doing Directed Putaway only
    * lotnum - Lotnum to add to the receiving line when creating the invoice and to be used for receiving if the item is lot tracked
    * rec_loc - A valid Receiving Staging lane when using sorting putaway
    * dep_loc - A valid Receiving Staging lane for deposit for undirected putaway
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * qa_sts - Valid QA Status, if the part should be received in a QA Status
    * expect_discrepancies - on receiving completion should process expect discrepancies

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the receive stage location
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Putaway Method defaults to Undirected If I verify variable is not specified in Feature or CSV
    * Processing ends with the deposit into the dep_loc

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-0100 Terminal Inbound Directed Putaway Directed Work
Test Case File: BASE-RCV-0100 Terminal Inbound Directed Putaway Directed Work.feature
###############################################################

Test Case Description:
    This Test Case generates a receipt via MSQL, receives it, and then performs directed putaway and deposits to a staging area. 
    From that action directed work is generated to move inventory to a system generated final location.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Receiving"
Test Case Dataset cleanup scripts: "Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-0100.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * supnum - A valid supplier
    * rcv_qty - quantity to receive for terminal input
    * putaway_method - 1 is Directed and that wll be used for this test
    * asn_flg - Flag for ASN Receipts (False for this test)
    * actcod - Activity Code
    * lpn - use explicit LPN for load instead of one generated by system
    * oprcod - Operation Code

Test Case Optional Inputs:
    * rcv_prtnum - Populate this field to test blind receiving
    * validate_loc - Location to be validated for Directed Putaway, when doing Directed Putaway only
    * lotnum - Lotnum to add to the receiving line when creating the invoice and to be used for receiving if the item is lot tracked
    * rec_loc - A valid Receiving Staging lane when using sorting putaway
    * dep_loc - A valid Receiving Staging lane for deposit for undirected putaway
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * qa_sts - Valid QA Status, if the part should be received in a QA Status
    * expect_discrepancies - on receiving completion should process expect discrepancies

Test Case Assumptions:
    * Movement zones for RCVSTG have been setup and configured relative to Users and Vehicles
    * Directed Moves for STO Operation Code to Any Area has been configured for RCVSTG Movement Zone
    * Storage Zones are configured for Directed Putaway operations
    * Processing ends with the deposit into the location allocated by system and scrapped off the deposit screen

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-0110 Terminal Inbound Blind Receiving
Test Case File: BASE-RCV-0110 Terminal Inbound Blind Receiving.feature
###############################################################

Test Case Description:
    This Test Case generates a receipt via MSQL and receives it. It specifies a part not on the receipt and receives that blind.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Receiving"
Test Case Dataset cleanup scripts: "Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-0110.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * supnum - A valid supplier
    * rcv_qty - quantity to receive for terminal input
    * putaway_method - 1 is Directed, 2 is Sorted, 3 is Undirected.
    * asn_flg - Flag for ASN Receipts
    * actcod - Activity Code
    * rcv_prtnum - Populate this field to test blind receiving

Test Case Optional Inputs:
    * validate_loc - Location to be validated for Directed Putaway, when doing Directed Putaway only
    * lotnum - Lotnum to add to the receiving line when creating the invoice and to be used for receiving if the item is lot tracked
    * rec_loc - A valid Receiving Staging lane when using sorting putaway
    * dep_loc - A valid Receiving Staging lane for deposit for undirected putaway
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * qa_sts - Valid QA Status, if the part should be received in a QA Status

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the receive stage location
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Putaway Method defaults to Undirected If I verify variable is not specified in Feature or CSV
    * Processing ends with the deposit into the rec_loc
    * Configuration for Inbound Identification/Unexpected Items must be enabled in WMS

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-1010 Web Inbound Close Receipt
Test Case File: BASE-RCV-1010 Web Inbound Close Receipt.feature
###############################################################

Test Case Description:
    Receive an invoice without discrepancies and with over/under discrepancies in the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Test Case Dataset setup scripts: "Close_Receipt"
Test Case Dataset cleanup scripts: "Close_Receipt"

Test Case Input CSV: Test Case Inputs/BASE-RCV-1010.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * invnum - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * rcvqty - The number being received
    * supnum - A valid supplier
    * rec_loc - A valid Receiving Staging lane
    * workstation - the workstation to perform the operation on, must be valid

Test Case Optional Inputs:
    * lotnum - Lot Number
    * revlvl - Revision Level

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * expqty = rcvqty - Standard Receipt Close (Lot enabled prtnum)
    * expqty = rcvqty - Standard Receipt Close (Lot and Revision Level enabled prtnum)
    * expqty = rcvqty - Standard Receipt Close
    * expqty < rcvqty - Overreceipt Close
    * expqty > rcvqty - Underreceipt Close
    * expqty = rcvqty - Standard Receipt Close (without rec_loc set (system determines))


###############################################################
Test Case Name: BASE-RCV-1020 Web Inbound Reverse Receiving
Test Case File: BASE-RCV-1020 Web Inbound Reverse Receiving.feature
###############################################################

Test Case Description:
    This test case performs a Reverse Receipt in the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Test Case Dataset setup scripts: "Putaway"
Test Case Dataset cleanup scripts: "Putaway"

Test Case Input CSV: Test Case Inputs/BASE-RCV-1020.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * invnum - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use client_id in Environment.feature
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - This can be a fabrication, but assumes simple, standard LPN receiving
    * supnum - This needs to be a valid supplier, assigned in your system
    * rec_loc - the receiving staging lane used for staging putaway, must be valid
    * uomcod - valid Unit of Measure
    * ftpcod - valid footprint code
    * untqty - the amount received
    * lodnum - the load number
    * invsts - a valid inventory status
    * carcod - Carrier code of the trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Will reverse receipt on a single LPN
    * Will use the same Putaway dataset as the RF Reverse Receiving Test Case

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-1030 Web Inbound Create Order
Test Case File: BASE-RCV-1030 Web Inbound Create Order.feature
###############################################################

Test Case Description:
    This test case creates an Inbound Order from the Web.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "RCV_Inbound_Order"

Test Case Input CSV: Test Case Inputs/BASE-RCV-1030.csv

Test Case Required Inputs:
    * invnum - This will be used as the Inventory Number for the Inbound Order.
    * supnum - This will be used as the Supplier for the Inbound Order.
    * order_type - The type of the Inbound Order.
    * expqty - expected quantity for new order line
    * rcvsts - receive status for new order line
    * prtnum - a valid part for new order line

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * no dataset load is needed

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-1040 Web Inbound Create Quality Issue
Test Case File: BASE-RCV-1040 Web Inbound Create Quality Issue.feature
###############################################################

Test Case Description:
    This test case creates an Inbound Quality Issue.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "RCV_Quality_Issue"

Test Case Input CSV: Test Case Inputs/BASE-RCV-1040.csv

Test Case Required Inputs:
    * issue_type - Specifies whether this was a Carrier or Supplier quality issue.
    * issue_rsn - The reason for the quality issue.
    * inbqty - The quantity of quality issues.
    * supnum - The supplier of the quality issue.
    * carcod - The carrier of the quality issue.
    * ib_issue - The code for the quality issue.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * no dataset load is needed

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-1050 Web Inbound Complete OSD Receipt
Test Case File: BASE-RCV-1050 Web Inbound Complete OSD Receipt.feature
###############################################################

Test Case Description:
    This test case will receive/putaway in short, over, and damaged product states

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Test Case Dataset setup scripts: "Receiving"
Test Case Dataset cleanup scripts: "Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-1050.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * invnum - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * rcvqty - The number being received
    * supnum - A valid supplier
    * rec_loc - A valid Receiving Staging lane
    * damaged_flag - designate that goods should be received as damaged

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-1060 Web Inbound Validate Inbound Shipments
Test Case File: BASE-RCV-1060 Web Inbound Validate Inbound Shipments.feature
###############################################################

Test Case Description:
    This test case will validate an inbound shipment in the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Test Case Dataset setup scripts: "receiving"
Test Case Dataset cleanup scripts: "receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-1060.csv

Test Case Required Inputs:
    * trlr_num - this will be the Receive Truck
    * yard_loc - This is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The expected quantity
    * supnum - A valid supplier

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-1070 Web Inbound Create Inbound Shipment
Test Case File: BASE-RCV-1070 Web Inbound Create Inbound Shipment.feature
###############################################################

Test Case Description:
    This test case creates an Inbound Shipment from the Web.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "RCV_Inbound_Shipment"

Test Case Input CSV: Test Case Inputs/BASE-RCV-1070.csv

Test Case Required Inputs:
    * trknum - The truck number of the inbound shipment
    * rcpt_area - The receipt area for the inbound shipment
    * rcvtrk_stat - The inbound shipment status code

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * no dataset load is needed

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-1080 Web Inbound Copy Inbound Order to Inbound Shipment
Test Case File: BASE-RCV-1080 Web Inbound Copy Inbound Order to Inbound Shipment.feature
###############################################################

Test Case Description:
    This test case copies an Inbound Order to an Inbound Shipment from the Web.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Test Case Dataset setup scripts: "RCV_Copy_Order_to_Shipment"
Test Case Dataset cleanup scripts: "RCV_Copy_Order_to_Shipment"

Test Case Input CSV: Test Case Inputs/BASE-RCV-1080.csv

Test Case Required Inputs:
    * trknum - The truck number of the inbound shipment
    * client_id - The client id for the inbound shipment
    * invnum - The inventory number for the inbound order
    * supnum - The supplier code for the inbound order
    * invtyp - The type of the order
    * expqty - The quantity of the order
    * prtnum - The part of the order
    * rcvsts - The receive status

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-1090 Web Inbound Unload All Without Receiving
Test Case File: BASE-RCV-1090 Web Inbound Unload All Without Receiving.feature
###############################################################

Test Case Description:
    This test case will perform an Unload All operation from the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Test Case Dataset setup scripts: "receiving"
Test Case Dataset cleanup scripts: "receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-1090.csv

Test Case Required Inputs:
    * trlr_num - this will be the Receive Truck
    * yard_loc - This is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The expected quantity
    * supnum - A valid supplier
    * rec_loc - staging location to receive to
    * move_option - On unload, move equipment option (valid options are dispatch, leave, move_to)

Test Case Optional Inputs:
    * move_to_loc - If move option is move_to, door location to move to

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * move_option set to move_to
    * move_option set to dispatch
    * move_option set to leave
    * move_option not set (should do dispatch)


###############################################################
Test Case Name: BASE-RCV-1100 Web Inbound Putaway
Test Case File: BASE-RCV-1100 Web Inbound Putaway.feature
###############################################################

Test Case Description:
    This test case will perform Putaway in the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Test Case Dataset setup scripts: "receiving"
Test Case Dataset cleanup scripts: "receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-1100.csv

Test Case Required Inputs:
    * trlr_num - Name of the Transport Equipment
    * supnum - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * rcvqty - The required amount of quantity to be received
    * rec_loc - The location were the inventory is to be deposited
    * lodnum - The load number/lpn to use during receiving (insteaad of system generated)
    * workstation - Required work station

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-1110 Web Inbound Non ASN Receiving
Test Case File: BASE-RCV-1110 Web Inbound Non ASN Receiving.feature
###############################################################

Test Case Description:
    This Test Case generates an Non-ASN receipt via MSQL and receives it in Web. Capabilitites include serialization.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Test Case Dataset setup scripts: "Receiving"
Test Case Dataset cleanup scripts: "Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-1110.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * invnum - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * rcvqty - The number being received
    * supnum - A valid supplier
    * rec_loc - A valid receiving location
    * workstation - the workstation to perform the operation on, must be valid
    * asn_flag - TRUE|FALSE to denote ASN receiving - FALSE

Test Case Optional Inputs:
    * lotnum - Lot Number
    * revlvl - Revision Level

Test Case Assumptions:
    * Serialized parts supporting CRDL_TO_GRAVE and OUTCAP_ONLY are available to test with
    * This test case is testing receiving where rcvqty and expqty are the same. Not intended to be tested with OSD conditions

Test Case Notes:
    * None

Test Case Examples:
    * Non-Serialization Receive, Putaway, and Dispatch - Non ASN, Lot enabled prtnum
    * Non-Serialization Receive, Putaway, and Dispatch - Non ASN, Lot and Revision Level enabled prtnum
    * Non-Serialization Receive, Putaway, and Dispatch - Non ASN, Case level
    * Non-Serialization Receive, Putaway, and Dispatch - Non ASN, Each level
    * CRDL_TO_GRAVE serialization prtnum being received and requiring serial number captured - Non ASN
    * OUTCAP_ONLY serialization prtnum being received (should not require serial numbers to be captured) - Non ASN


###############################################################
Test Case Name: BASE-RCV-1111 Web Inbound ASN Receiving
Test Case File: BASE-RCV-1111 Web Inbound ASN Receiving.feature
###############################################################

Test Case Description:
    This Test Case generates an ASN receipt via MSQL and receives it in Web. Capabilitites include serialization

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Test Case Dataset setup scripts: "Rec_ASN_Receiving"
Test Case Dataset cleanup scripts: "Rec_ASN_Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-1111.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * rcvqty - The number being received
    * supnum - A valid supplier
    * rec_loc - A valid receiving location
    * workstation - the workstation to perform the operation on, must be valid
    * asn_flag - denoting using ASN - TRUE
    * asn_lodnum - the ASN load number
    * actcod - Activity Code
    * ftpcod - valid footprint code

Test Case Optional Inputs:
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * qa_sts - Valid QA Status, if the part should be received in a QA Status

Test Case Assumptions:
    * Serialized parts supporting CRDL_TO_GRAVE and OUTCAP_ONLY are available to test with

Test Case Notes:
    * None

Test Case Examples:
    * CRDL_TO_GRAVE serialization prtnum being received and requiring serial numbers to be associated to ASN 
    * OUTCAP_ONLY serialization prtnum being received (should not require serial numbers to be added) 
    * Non-Serialization Receive, Putaway, and Dispatch


###############################################################
Test Case Name: BASE-RCV-1120 Web Inbound Receiving without Trailer
Test Case File: BASE-RCV-1120 Web Inbound Receiving Without Trailer.feature
###############################################################

Test Case Description:
    This Test Case receives without a trailer in the Web

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Test Case Dataset setup scripts: "Rcv_No_Trailer"
Test Case Dataset cleanup scripts: "Rcv_No_Trailer"

Test Case Input CSV: Test Case Inputs/BASE-RCV-1120.csv

Test Case Required Inputs:
    * prtnum - This needs to be a valid part number that is assigned in your system
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * rcvqty - The number being received
    * supnum - A valid supplier
    * rec_loc - A valid Receiving Staging lane
    * workstation - the workstation to perform the operation on, must be valid
    * lodnum - LPN to use for the putaway
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * invnum - This will be used as the Invoice Number
    * ship_id - inbound shipment id

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * CRDL_TO_GRAVE serialization prtnum being received - Non ASN
    * Non-Serialization Receive - Non ASN, Case level
    * Non-Serialization Receive - Non ASN, Each level


###############################################################
Test Case Name: BASE-RCV-1130 Web Inbound Assign Shipment
Test Case File: BASE-RCV-1130 Web Inbound Assign Shipment.feature
###############################################################

Test Case Description:
    This test case will Assign transport Equipment to Shipment

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Test Case Dataset setup scripts: "Create_Ship_and_Trailer"
Test Case Dataset cleanup scripts: "Create_Ship_and_Trailer"

Test Case Input CSV: Test Case Inputs/BASE-RCV-1130.csv

Test Case Required Inputs:
    * trlr_num - Transport Equipment Number
    * exp_arecod - Expected area code
    * trlr_cod - Transport Equipment Code
    * trlr_typ - Transport Equipment Type
    * trlrcnt - Trailer count

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-1140 Web Inbound Complete Shipment
Test Case File: BASE-RCV-1140 Web Inbound Complete Shipment.feature
###############################################################

Test Case Description:
    This test case will complete an Inbound Shipment in the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Test Case Dataset setup scripts: "putaway"
Test Case Dataset cleanup scripts: "putaway"

Test Case Input CSV: Test Case Inputs/BASE-RCV-1140.csv

Test Case Required Inputs:
    * trlr_num - Trailer Number
    * inv_num - Inventory number. Can be set to match the trlr_num
    * yard_loc - Yard location
    * invtyp - Inventory type
    * rcvsts - Receive status
    * expqty - Expected quantity for the receipt
    * supnum - Supplier Number
    * rec_loc - Receive location. Where the load will be received
    * uomcod - UOM Code
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * dep_loc - Deposit location. Where the load will be deposited
    * prtnum - Needs to be a valid part number that is assigned in your system
    * ftpcod - Footprint Code. Must be a valid footprint code for the given prtnum
    * untqty - Quantity being added
    * allocate - Boolean specifying whether to allocate
    * override - Boolean specifying whether there exists an override
    * over_code - Overage code
    * over_dep_loc - Overage deposit location. Where overages will be deposited to (if allowed).
    * actcod - Action code
    * trlr_option - what do do with trailer on completion, options are leave_at_Door, turnaround, or dispatch
    * carcod - Carrier code of the trailer

Test Case Optional Inputs:
    * turnaround_carrier - If trlr_option is turnaround carrier to use
    * turnaround_location - If trlr_option is turnaround location to use

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * trlr_option of leave_at_door
    * trlr_option of turnaround


###############################################################
Test Case Name: BASE-RCV-1150 Web Inbound Capture Quality Incident
Test Case File: BASE-RCV-1150 Web Inbound Capture Quality Incident.feature
###############################################################

Test Case Description:
    This test case captures a inbound quality incident for shipment from the Web.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Web, MOCA

Test Case Dataset setup scripts: "Receiving"
Test Case Dataset cleanup scripts: "Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-1150.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * issue_type - Specifies whether this was a Carrier or Supplier quality issue.
    * issue_rsn - The reason for the quality issue.
    * inbqty - The quantity of quality issues.
    * supnum - The supplier of the quality issue.
    * carcod - The carrier of the quality issue.
    * ib_issue - The code for the quality issue.
    * check_report_issue_screen - Validates the current screen for Report Quality Issue or Add Quality Issue

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * Execution with Carrier damage
    * Execution with Supplier damage


###############################################################
Test Case Name: BASE-RCV-4010 Mobile Inbound Receiving
Test Case File: BASE-RCV-4010 Mobile Inbound Receiving.feature
###############################################################

Test Case Description:
    This Test Case generates a receipt via MSQL and receives it in the Mobile App.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Receiving"
Test Case Dataset cleanup scripts: "Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-4010.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * supnum - A valid supplier
    * rcv_qty - quantity to receive for Mobile App input
    * putaway_method - 1 is Directed, 2 is Sorted, 3 is Undirected.
    * asn_flg - Flag for ASN Receipts
    * actcod - Activity Code
    * lpn - use explicit LPN for load instead of one generated by system

Test Case Optional Inputs:
    * rcv_prtnum - Populate this field to test blind receiving
    * validate_loc - Location to be validated for Directed Putaway, when doing Directed Putaway only
    * lotnum - Lotnum to add to the receiving line when creating the invoice and to be used for receiving if the item is lot tracked
    * rec_loc - A valid Receiving Staging lane when using sorting putaway
    * dep_loc - A valid Receiving Staging lane for deposit for undirected putaway
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * qa_sts - Valid QA Status, if the part should be received in a QA Status
    * expect_discrepancies - on receiving completion should process expect discrepancies
    * revlvl - Revision Level

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the receive stage location
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Putaway Method defaults to Undirected If I verify variable is not specified in Feature or CSV
    * Processing ends with the deposit into the dep_loc

Test Case Notes:
    * None

Test Case Examples:
    * OUTCAP_ONLY serialization prtnum being received (should not require serial number inputs)
    * CRDL_TO_GRAVE serialization with receive quantity of 1
    * CRDL_TO_GRAVE serialization with receive quantity of 20
    * putaway_method - 1 for Directed, using the dep_loc input for deposit
    * putaway_method - 2 for Sorted, using the rec_loc input for deposit
    * putaway_method - 3 for Undirected, using the dep_loc input for deposit
    * No serialization, receiving Subload tracked part
    * No serialization, receiving Detail tracked part
    * No serialization, receiving Lot Enable, Revision Level tracked part


###############################################################
Test Case Name: BASE-RCV-4020 Mobile Inbound Putaway
Test Case File: BASE-RCV-4020 Mobile Inbound Putaway.feature
###############################################################

Test Case Description:
    This Test Case generates an LPN to perform an Undirected Putaway in Mobile App

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Putaway"
Test Case Dataset cleanup scripts: "Putaway"

Test Case Input CSV: Test Case Inputs/BASE-RCV-4020.csv

Test Case Required Inputs:
    * wh_id - Warehouse ID
    * trlr_num - Trailer Number
    * inv_num - Inventory number. Can be set to match the trlr_num
    * yard_loc - Yard location
    * invtyp - Inventory type
    * rcvsts - Receive status
    * expqty - Expected quantity for the receipt
    * supnum - Supplier Number
    * rec_loc - Receive location. Where the load will be received
    * uomcod - UOM Code
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * dep_loc - Deposit location. Where the load will be deposited
    * prtnum - Needs to be a valid part number that is assigned in your system
    * ftpcod - Footprint Code. Must be a valid footprint code for the given prtnum
    * untqty - Quantity being added
    * allocate - Boolean specifying whether to allocate
    * override - Boolean specifying whether there exists an override
    * over_code - Overage code
    * over_dep_loc - Overage deposit location. Where overages will be deposited to (if allowed).
    * actcod - Action code
    * carcod - Carrier code of the trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Receiving can continue whether there are overages or shorts.

Test Case Notes:
    * Regression runs require parts and enough config to deposit inventory into the receive stage location
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Processing ends with the deposit into the dep_loc

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-4030 Mobile Inbound Reverse Receiving
Test Case File: BASE-RCV-4030 Mobile Inbound Reverse Receiving.feature
###############################################################

Test Case Description:
    Performs Mobile Reverse Receiving

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Putaway"
Test Case Dataset cleanup scripts: "Putaway"

Test Case Input CSV: Test Case Inputs/BASE-RCV-4030.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * invnum - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use client_id in Environment.feature
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - This can be a fabrication, but assumes simple, standard LPN receiving
    * supnum - This needs to be a valid supplier, assigned in your system
    * rec_loc - the receiving staging lane used for staging putaway, must be valid
    * uomcod - valid Unit of Measure
    * ftpcod - valid footprint code
    * untqty - the amount received
    * lodnum - the load number
    * invsts - a valid inventory status
    * carcod - Carrier code of the trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Load is received and trailer is not dispatched/closed

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-4040 Mobile Inbound ASN Receiving
Test Case File: BASE-RCV-4040 Mobile Inbound ASN Receiving.feature
###############################################################

Test Case Description:
    This Test Case generates an ASN receipt via MSQL and receives it in the Mobile App.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Rec_ASN_Receiving"
Test Case Dataset cleanup scripts: "Rec_ASN_Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-4040.csv

Test Case Required Inputs:
    * asn_lodnum - the user-provided LPN value to create inventory
    * ftpcod - a valid footprint code for inventory creation
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * supnum - A valid supplier
    * rcv_qty - quantity to receive for Mobile App input
    * putaway_method - 1 is Directed, 2 is Sorted, 3 is Undirected.
    * asn_flg - Flag for ASN Receipts
    * actcod - Activity Code

Test Case Optional Inputs:
    * rec_loc - A valid Receiving Staging lane when using sorting putaway
    * dep_loc - A valid Receiving Staging lane for deposit for undirected putaway
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * qa_sts - Valid QA Status, if the part should be received in a QA Status
    * expire_dte - set value for ASN Inventory with Expiration Dates

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the rec_loc
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Putaway Method defaults to Undirected If I verify variable is not specified in Feature or CSV
    * Processing ends with the deposit into the rec_loc
    * This Test Case will only be used for vehicle types configured to hold a single load
    * The system is configured for the Putaway Method chosen
    * There is an existing LOTNUM in the system for the item being received

Test Case Notes:
    * None

Test Case Examples:
    * CRDL_TO_GRAVE detail level serialized prtnum being received and requiring serial numbers to be associated to ASN (quantity 10)
    * CRDL_TO_GRAVE serialized prtnum being received and requiring serial numbers to be associated to ASN (quantity 50)
    * OUTCAP_ONLY serialized prtnum being received (should not require serial numbers to be added) 
    * putaway_method - 1 for Directed, using the dep_loc input for deposit
    * putaway_method - 2 for Sorted, using the rec_loc input for deposit
    * putaway_method - 3 for Undirected, using the dep_loc input for deposit


###############################################################
Test Case Name: BASE-RCV-4050 Mobile Inbound Receiving Without Order
Test Case File: BASE-RCV-4050 Mobile Inbound Receiving Without Order.feature
###############################################################

Test Case Description:
    Performs Mobile App Receiving without an order in the Mobile App.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Rcv_wo_Order"
Test Case Dataset cleanup scripts: "Rcv_wo_Order"

Test Case Input CSV: Test Case Inputs/BASE-RCV-4050.csv

Test Case Required Inputs:
    * rec_quantity - the quantity to be receive
    * lodnum - the load to associate the received goods with
    * prtnum - the part to receive
    * reason - reason for receiveing
    * status - a valid inventory status
    * putaway_method - 1 is Directed, 2 is Sorted, 3 is Undirected.
    * deposit_loc - If it is Storage location provide:storage_loc - Else for Receive Stage location provide:rec_stg_loc

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-4060 Mobile Inbound ASN Receiving Non Trusted Supplier
Test Case File: BASE-RCV-4060 Mobile Inbound ASN Receiving Non Trusted Supplier.feature
###############################################################

Test Case Description:
    This Test Case generates an ASN receipt from a non-trusted supplier via MSQL and receives it in the the Mobile App.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Rec_ASN_NT_Supplier_Receiving"
Test Case Dataset cleanup scripts: "Rec_ASN_NT_Supplier_Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-4060.csv

Test Case Required Inputs:
    * asn_lodnum - the user-provided LPN value to create inventory
    * ftpcod - a valid footprint code for inventory creation
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected- to be inputted as receive quantity
    * supnum - A valid supplier
    * putaway_method - 3 is Undirected.
    * asn_flg - Flag for ASN Receipts
    * actcod - Activity Code
    * rcv_uom - Unit of measure upon receipt

Test Case Optional Inputs:
    * rec_loc - A valid Receiving Staging lane when using sorting putaway
    * dep_loc - A valid Receiving Staging lane for deposit for undirected putaway
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * chg_rcv_sts - Valid Inv Status, if the inventory status needs to be changed on receipt
    * rcv_qty - quantity to receive, if quantity needs to be changed on receipt
    * chg_qty - flag that prompts recieve quantity to be overriden, if receive quantity needs to be changed upon receipt
    * chg_uom - flag that prompts uom to be overriden, if unit of measure needs to be changed on receipt
    * chg_sts - flag that prompts invsts to be overriden, if the inventory status needs to be changed on receipt
    * expire_dte - set value for ASN Inventory with Expiration Dates

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the rec_loc
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging
    * Undirected putaway method is used for this test.
    * Processing ends with the deposit into the rec_loc
    * This Test Case will only be used for vehicle types configured to hold a single load
    * The system is configured for the Putaway Method chosen
    * There is an existing LOTNUM in the system for the item being received
    * Supplier is setup as non trusted supplier.
    * Test performed for non serialized inventory.

Test Case Notes:
    * None

Test Case Examples:
    * Not changing any of the ASN LPN attributes
    * Changing Receive Quantity of the ASN LPN
    * Changing the Receive Quantity and Unit of Measure of the ASN LPN
    * Changing the Receive Quantity, Unit of Measure and Inventory Status of the ASN LPN
    * Changing the Receive Quantity, Unit of Measure and Inventory Status of the ASN LPN with CRDL_TO_CRAVE serialized prtnum
    * Changing the Receive Quantity, Unit of Measure and Inventory Status of the ASN LPN with OUTCAP_ONLY serialized prtnum
    * Not changing any of the ASN LPN attributes (detail level CRDL_TO_CRAVE serialized prtnum)


###############################################################
Test Case Name: BASE-RCV-4070 Mobile Inbound Unload All
Test Case File: BASE-RCV-4070 Mobile Inbound Unload All.feature
###############################################################

Test Case Description:
    This Test Case will exercise Receiving Unload Shipment functionality in the Mobile App.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Receiving"
Test Case Dataset cleanup scripts: "Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-4070.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * yard_loc - This is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * supnum - A valid supplier

Test Case Optional Inputs:
    * trac_ref - tracking reference for dispatch information
    * driver_lic - drivers license for dispatch information
    * driver_nam - drivers name for dispatch information

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-4080 Mobile Inbound Directed Putaway from Receiving Override
Test Case File: BASE-RCV-4080 Mobile Inbound Directed Putaway from Receiving Override.feature
###############################################################

Test Case Description:
    This Test Case receives a non-ASN receipt and performs a putaway operation overriding the putaway location and selecting an override code in the Mobile App

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Receiving"
Test Case Dataset cleanup scripts: "Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-4080.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * supnum - A valid supplier
    * rcv_qty - quantity to receive for Mobile App input
    * putaway_method - 1 for Directed
    * asn_flg - Flag for ASN Receipts (FALSE)
    * actcod - Activity Code
    * rec_loc - A valid Receiving Staging lane when using sorting putaway
    * dep_loc - A valid Receiving Staging lane for deposit for undirected putaway
    * allocate - Boolean specifying whether to allocate putway location
    * override - Boolean specifying whether there exists an override to putaway location
    * over_code - override code
    * over_dep_loc - Overrride deposit location. Where overages will be deposited to (if allowed).
    * override_f2 - use F2 to display override code during putway and selects one
    * lpn - assign specific LPN during receiving prior to inventory creation

Test Case Optional Inputs:
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * qa_sts - Valid QA Status, if the part should be received in a QA Status
    * lotnum - Lotnum to add to the receiving line when creating the invoice and to be used for receiving if the item is lot tracked
    * rcv_prtnum - Populate this field to test blind receiving
    * validate_loc - Location to be validated for Directed Putaway, when doing Directed Putaway only

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the receive stage location
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Processing ends with the deposit into the over_dep_loc

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-4090 Mobile Inbound Over Receiving Authorized
Test Case File: BASE-RCV-4090 Mobile Inbound Over Receiving Authorized.feature
###############################################################

Test Case Description:
    This Test Case generates a receipt via MSQL and receives it in the Mobile App. It will over receive based on expqty and rec_qty inputs
    and user will have permissions/role to do the over receive.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Receiving"
Test Case Dataset cleanup scripts: "Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-4090.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * supnum - A valid supplier
    * rcv_qty - quantity to receive for Mobile App input
    * putaway_method - 1 is Directed, 2 is Sorted, 3 is Undirected.
    * asn_flg - Flag for ASN Receipts
    * actcod - Activity Code
    * lpn - use explicit LPN for load instead of one generated by system

Test Case Optional Inputs:
    * rcv_prtnum - Populate this field to test blind receiving
    * validate_loc - Location to be validated for Directed Putaway, when doing Directed Putaway only
    * lotnum - Lotnum to add to the receiving line when creating the invoice and to be used for receiving if the item is lot tracked
    * rec_loc - A valid Receiving Staging lane when using sorting putaway
    * dep_loc - A valid Receiving Staging lane for deposit for undirected putaway
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * qa_sts - Valid QA Status, if the part should be received in a QA Status
    * expect_discrepancies - on receiving completion should process expect discrepancies

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the receive stage location
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Putaway Method defaults to Undirected If I verify variable is not specified in Feature or CSV
    * Processing ends with the deposit into the dep_loc

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-4100 Mobile Inbound Directed Putaway Directed Work
Test Case File: BASE-RCV-4100 Mobile Inbound Directed Putaway Directed Work.feature
###############################################################

Test Case Description:
    This Test Case generates a receipt via MSQL, receives it, and then performs directed putaway and deposits to a staging area in the Mobile App. 
    From that action directed work is generated to move inventory to a system generated final location.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Receiving"
Test Case Dataset cleanup scripts: "Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-4100.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * supnum - A valid supplier
    * rcv_qty - quantity to receive for terminal input
    * putaway_method - 1 is Directed and that wll be used for this test
    * asn_flg - Flag for ASN Receipts (False for this test)
    * actcod - Activity Code
    * lpn - use explicit LPN for load instead of one generated by system
    * oprcod - Operation Code

Test Case Optional Inputs:
    * rcv_prtnum - Populate this field to test blind receiving
    * validate_loc - Location to be validated for Directed Putaway, when doing Directed Putaway only
    * lotnum - Lotnum to add to the receiving line when creating the invoice and to be used for receiving if the item is lot tracked
    * rec_loc - A valid Receiving Staging lane when using sorting putaway
    * dep_loc - A valid Receiving Staging lane for deposit for undirected putaway
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * qa_sts - Valid QA Status, if the part should be received in a QA Status
    * expect_discrepancies - on receiving completion should process expect discrepancies

Test Case Assumptions:
    * Movement zones for RCVSTG have been setup and configured relative to Users and Vehicles
    * Directed Moves for STO Operation Code to Any Area has been configured for RCVSTG Movement Zone
    * Storage Zones are configured for Directed Putaway operations
    * Processing ends with the deposit into the location allocated by system and scrapped off the deposit screen

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-4110 Mobile Inbound Blind Receiving
Test Case File: BASE-RCV-4110 Mobile Inbound Blind Receiving.feature
###############################################################

Test Case Description:
    This Test Case generates a receipt via MSQL and receives it in Mobile App. It specifies a part not on the receipt and receives that blind.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Receiving"
Test Case Dataset cleanup scripts: "Receiving"

Test Case Input CSV: Test Case Inputs/BASE-RCV-4110.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system
    * prtnum - This needs to be a valid part number that is assigned in your system. Will use the default client_id.
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - The number expected
    * supnum - A valid supplier
    * rcv_qty - quantity to receive for Mobile App input
    * putaway_method - 1 is Directed, 2 is Sorted, 3 is Undirected.
    * asn_flg - Flag for ASN Receipts
    * actcod - Activity Code
    * rcv_prtnum - Populate this field to test blind receiving

Test Case Optional Inputs:
    * validate_loc - Location to be validated for Directed Putaway, when doing Directed Putaway only
    * lotnum - Lotnum to add to the receiving line when creating the invoice and to be used for receiving if the item is lot tracked
    * rec_loc - A valid Receiving Staging lane when using sorting putaway
    * dep_loc - A valid Receiving Staging lane for deposit for undirected putaway
    * ap_sts - Valid Aging profile status, if the part has an aging profile
    * qa_sts - Valid QA Status, if the part should be received in a QA Status

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the receive stage location
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Putaway Method defaults to Undirected If I verify variable is not specified in Feature or CSV
    * Processing ends with the deposit into the rec_loc
    * Configuration for Inbound Identification/Unexpected Items must be enabled in WMS

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RCV-5010 Flow Reverse Receive LPN
Test Case File: BASE-RCV-5010 Flow Reverse Receive LPN.feature
###############################################################

Test Case Description:
    Performs Terminal Reverse Receiving, verifying the inbound shipment details in Web and then receives back the reversed LPN

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA, Web

Test Case Dataset setup scripts: "Receiving_Multiple_loads"
Test Case Dataset cleanup scripts: "Receiving_Multiple_loads"

Test Case Input CSV: Test Case Inputs/BASE-RCV-5010.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * invnum - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in. Must be a valid and open dock door.
    * invtyp - This need to be a valid Invoice Type, that is assigned in your system 
    * prtnum_1,prtnum_2 - valid part number(s) that are assigned in your system. Will use client_id in Environment.feature
    * rcvsts - Receiving status created on the Invoice Line being loaded expqty_1,expqty_2 - Exepected quantities
    * actcod - Activity Code
    * supnum - This needs to be a valid supplier, assigned in your system uomcod_1,uomcod_2 - valid Unit(s) of Measure 
    * ftpcod_1,ftpcod_2 - valid footprint(s) code lodnum_1,lodnum_2 - the load number(s)
    * invsts - a valid inventory status
    * rec_loc - A valid Receiving Staging lane when using sorting putaway
    * dep_loc - A valid Receiving Staging lane for deposit for undirected putaway
    * create_trailer - if 'Y' performs creation of receving trailer
    * create_inbshp - if 'Y' performs creation of inbound shipment
    * create_inbord - if 'Y' performs creation of inbound order
    * checkin_trailer - if 'Y' performs checkin of trailer
    * create_asn - if 'Y' performs creation of ASN
    * putaway - if 'Y' performs putaway process
    * no_of_rcvlins - number of receive lines needs to be created
    * putaway_method - 1 is Directed, 2 is Sorted, 3 is Undirected.

Test Case Optional Inputs:
    * lotnum - Lotnum to add to the receiving line when creating the invoice and to be used for receiving if the item is lot tracked
    * receive_reversed_lpn - if 'Y' performs Terminal Receive a Reversed LPN
    * validate_load_loc - if 'Y' verifies reversed LPN is deposited to receive staging lane

Test Case Assumptions:
    * Load is received and trailer is not dispatched/closed

Test Case Notes:
    * None

Test Case Examples:
    * Reverse receive LPN in Terminal, verifies the Inbound Shipment details in the Web
    * Reverse receive LPN in Terminal, verifies the Inbound Shipment details in Web and receives back the reversed LPN in the Terminal


###############################################################
Test Case Name: BASE-RCV-8010 API Create Inbound Shipment
Test Case File: BASE-RCV-8010 API Create Inbound Shipment.feature
###############################################################

Test Case Description:
    This test case creates an Inbound Shipment using the API

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Receiving

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: API, MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "RCV_Inbound_Shipment"

Test Case Input CSV: Test Case Inputs/BASE-RCV-8010.csv

Test Case Required Inputs:
    * trknum - The truck number of the inbound shipment
    * rcpt_area - The receipt area for the inbound shipment
    * rcvtrk_stat - The inbound shipment status code

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * no dataset load is needed

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INT-2010 Integrator Download ASN Inbound
Test Case File: BASE-INT-2010 Integrator Download ASN Inbound.feature
###############################################################

Test Case Description:
    This test case runs the ASN download transaction for Add, Change, and Delete

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Integration

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Integration

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Int_ASN_Download"

Test Case Input CSV: Test Case Inputs/BASE-INT-2010.csv

Test Case Required Inputs:
    * trlr_num - Trailer Number used for validation and After Scenario purge
    * invnum - Invoice Number used for validation and After Scenario purge
    * system - Integrator host system for transaction. Must be valid enabled system in WMS Integrator
    * tran_name - Name of transaction. Must be valid enabled transaction in WMS Integrator
    * pre_validation - Cycle scenario to run to perform pre_validations logic
    * post_validation - Cycle scenario to run to perform post validation logic
    * detail_file_name - CSV file containing the transactions to process

Test Case Optional Inputs:
    * None

Test Case Detail Input CSV: Test Case Inputs/Details/BASE-INT-2010-01.csv
Test Case Detail Required Inputs:
    * trntyp - Transaction Type (A-Add, C-Change, D-Delete)
    * transaction_file_name - Name of the transaction file
    * field_to_validate_change - Database field used to validate change transaction succeeded. Required for change transactions
Test Case Detail Optional Inputs:
    * This test case runs the ASN download transaction for Add, Change, and Delete
    * This test case runs the ASN download transaction for Add, Change, and Delete
Test Case Assumptions:
    * Assumption is the event RCPT_INB_IFD is enabled and mapped to correct system
    * The item(s) included in the ASN inbound IFD are valid item(s) in the warehouse
    * The client_id and wh_id configured in Environment.feature match the data in the inbound IFD and will be used for validation, 
      if they do not match, then define client_id and wh_id in local data override

Test Case Notes:
    * Create an XML file representative of what the host would send for ASN Download
    * Provide trlr_num and invnum for the validation step
    * Provide a trntyp variable value indicating "A" for Add record, "C" for Change record, or "D" for Delete record
    * Provide a clause variable value for validating changed ASN data after processing the Change file

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INT-2020 Integrator Download Customer Inbound
Test Case File: BASE-INT-2020 Integrator Download Customer Inbound.feature
###############################################################

Test Case Description:
    This test case runs the Download Customer Inbound transaction for Add, Change, and Delete

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Integration

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Integration

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Int_Customer_Inbound"

Test Case Input CSV: Test Case Inputs/BASE-INT-2020.csv

Test Case Required Inputs:
    * host_ext_id - Host External ID used for validation and After Scenario purge
    * cstnum - Customer Number used for validation and After Scenario purge
    * system - Integrator host system for transaction. Must be valid enabled system in WMS Integrator
    * tran_name - Name of transaction. Must be valid enabled transaction in WMS Integrator
    * pre_validation - Cycle scenario to run to perform pre_validations logic
    * post_validation - Cycle scenario to run to perform post validation logic
    * detail_file_name - CSV file containing the transactions to process

Test Case Optional Inputs:
    * None

Test Case Detail Input CSV: Test Case Inputs/Details/BASE-INT-2020-01.csv
Test Case Detail Required Inputs:
    * trntyp - Transaction Type (A-Add, C-Change, D-Delete)
    * transaction_file_name - Name of the transaction file
    * field_to_validate_change - Database field used to validate change transaction succeeded. Required for change transactions
Test Case Detail Optional Inputs:
    * This test case runs the Download Customer Inbound transaction for Add, Change, and Delete
    * This test case runs the Download Customer Inbound transaction for Add, Change, and Delete

Test Case Assumptions:
    * Assumption is the event CUST_INB_IFD is enabled and mapped to correct system
    * The client_id and wh_id configured in Environment.feature match the data in the inbound IFD and will be used for validation, 
      if they do not match, then define client_id and wh_id in local data override

Test Case Notes:
    * Create an XML file representative of what the host would send for Customer Download
    * Provide host_ext_id and cstnum for the validation step
    * Provide a trntyp variable value indicating "A" for Add record, "C" for Change record, or "D" for Delete record
    * Provide a clause variable value for validating changed ASN data after processing the Change file

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INT-2030 Integrator Download Supplier Inbound
Test Case File: BASE-INT-2030 Integrator Download Supplier Inbound.feature
###############################################################

Test Case Description:
    This test case runs the Supplier Inbound Transaction for Add, Change, and Delete

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Integration

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Integration

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Int_Supplier_Inbound"

Test Case Input CSV: Test Case Inputs/BASE-INT-2030.csv

Test Case Required Inputs:
    * supnum - Supplier Number used for validation and After Scenario purge
    * system - Integrator host system for transaction. Must be valid enabled system in WMS Integrator
    * tran_name - Name of transaction. Must be valid enabled transaction in WMS Integrator
    * pre_validation - Cycle scenario to run to perform pre_validations logic
    * post_validation - Cycle scenario to run to perform post validation logic
    * detail_file_name - CSV file containing the transactions to process

Test Case Optional Inputs:
    * None

Test Case Detail Input CSV: Test Case Inputs/Details/BASE-INT-2030-01.csv
Test Case Detail Required Inputs:
    * trntyp - Transaction Type (A-Add, C-Change, D-Delete)
    * transaction_file_name - Name of the transaction file
    * field_to_validate_change - Database field used to validate change transaction succeeded. Required for change transactions
    * table_to_validate_change - Database table used to validate change transaction succeeded. Required for change transactions
Test Case Detail Optional Inputs:
    * This test case runs the Supplier Inbound Transaction for Add, Change, and Delete
    * This test case runs the Supplier Inbound Transaction for Add, Change, and Delete

Test Case Assumptions:
    * Assumption is the event SUPP_INB_IFD is enabled and mapped to correct system
    * The client_id and wh_id configured in Environment.feature match the data in the inbound IFD and will be used for validation, 
      if they do not match, then define client_id and wh_id in local data override

Test Case Notes:
    * Create an XML file representative of what the host would send for Supplier Download
    * Provide supnum for the validation step
    * Provide a trntyp variable value indicating "A" for Add record, "C" for Change record, or "D" for Delete record
    * Provide a clause variable value for validating changed Supplier data after processing the Change file

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INT-2040 Integrator Download Order Inbound
Test Case File: BASE-INT-2040 Integrator Download Order Inbound.feature
###############################################################

Test Case Description:
    This test case runs the order download transaction for Add, Change, and Delete

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Integration

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Integration

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Int_Order_Download"

Test Case Input CSV: Test Case Inputs/BASE-INT-2040.csv

Test Case Required Inputs:
    * ordnum - Order Number used for validation and After Scenario purge
    * system - Integrator host system for transaction. Must be valid enabled system in WMS Integrator
    * tran_name - Name of transaction. Must be valid enabled transaction in WMS Integrator
    * pre_validation - Cycle scenario to run to perform pre_validations logic
    * post_validation - Cycle scenario to run to perform post validation logic
    * detail_file_name - CSV file containing the transactions to process

Test Case Optional Inputs:
    * clause - Must match file value when used

Test Case Detail Input CSV: Test Case Inputs/Details/BASE-INT-2040-01.csv
Test Case Detail Required Inputs:
    * trntyp - Transaction Type (A-Add, C-Change, D-Delete)
    * transaction_file_name - Name of the transaction file
    * field_to_validate_change - Database field used to validate change transaction succeeded. Required for change transactions
    * table_to_validate_change - Database table used to validate change transaction succeeded. Required for change transactions
Test Case Detail Optional Inputs:
    * This test case runs the order download transaction for Add, Change, and Delete
    * This test case runs the order download transaction for Add, Change, and Delete

Test Case Assumptions:
    * Assumption is the event ORDER_INB_IFD is enabled and mapped to correct system
    * The item(s) included in the Order inbound IFD are valid item(s) in the warehouse
    * The client_id and wh_id configured in Environment.feature match the data in the inbound IFD and will be used for validation, 
      if they do not match, then define client_id and wh_id in local data override

Test Case Notes:
    * Create an XML file representative of what the host would send for order Download
    * Provide ordnum for the validation step
    * Provide a trntyp variable value indicating "A" for Add record, "C" for Change record, or "D" for Delete record
    * Provide a clause variable value for validating changed order data after processing the Change file

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INT-2050 Integrator Download PartFootprint Inbound
Test Case File: BASE-INT-2050 Integrator Download PartFootprint Inbound.feature
###############################################################

Test Case Description:
    This test case runs the Download PartFootprint Inbound transaction for Add, Change, and Delete

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Integration

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Integration

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Int_PartFoot_Inbound"

Test Case Input CSV: Test Case Inputs/BASE-INT-2050.csv

Test Case Required Inputs:
    * prtnum - Part to be created, used for validation and After Scenario purge
    * ftpcod - Footprint to be created
    * lngdsc - Part description to be created
    * short_dsc - Part description to be created
    * add_part - A flag to add a part for a Footprint Add transaction only and If add_part is Yes then the part and the footprint will be deleted in the cleanup dataset
    * system - Integrator host system for transaction. Must be valid enabled system in WMS Integrator
    * tran_name - Name of transaction. Must be valid enabled transaction in WMS Integrator
    * pre_validation - Cycle scenario to run to perform pre_validations logic
    * post_validation - Cycle scenario to run to perform post validation logic
    * detail_file_name - CSV file containing the transactions to process

Test Case Optional Inputs:
    * clause - Must match file value when used

Test Case Detail Input CSV: Test Case Inputs/Details/BASE-INT-2050-01.csv
Test Case Detail Required Inputs:
    * trntyp - Transaction Type (A-Add, C-Change, D-Delete)
    * transaction_file_name - Name of the transaction file
    * field_to_validate_change - Database field used to validate change transaction succeeded. Required for change transactions
    * table_to_validate_change - Database table used to validate change transaction succeeded. Required for change transactions
Test Case Detail Optional Inputs:
    * This test case runs the Download PartFootprint Inbound transaction for Add, Change, and Delete
    * This test case runs the Download PartFootprint Inbound transaction for Add, Change, and Delete

Test Case Assumptions:
    * Assumption is the event PARTFOOT_INB_IFD is enabled and mapped to correct system
    * The client_id and wh_id configured in Environment.feature match the data in the inbound IFD and will be used for validation, 
      if they do not match, then define client_id and wh_id in local data override

Test Case Notes:
    * Create an XML file representative of what the host would send for PartFootprint Download
    * Provide prtnum for the validation step
    * Provide a trntyp variable value indicating "A" for Add record, "C" for Change record, or "D" for Delete record
    * Provide a clause variable value for validating changed PartFootprint data after processing the Change file

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INT-2060 Integrator Download BOM Inbound
Test Case File: BASE-INT-2060 Integrator Download BOM Inbound.feature
###############################################################

Test Case Description:
    This test case runs the BOM Inbound Transaction for Add, Change, and Delete

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Integration

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Integration

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Int_BOM_Download"

Test Case Input CSV: Test Case Inputs/BASE-INT-2060.csv

Test Case Required Inputs:
    * bomnum - Bill of Material Number used for validation and After Scenario purge
    * system - Integrator host system for transaction. Must be valid enabled system in WMS Integrator
    * tran_name - Name of transaction. Must be valid enabled transaction in WMS Integrator
    * pre_validation - Cycle scenario to run to perform pre_validations logic
    * post_validation - Cycle scenario to run to perform post validation logic
    * detail_file_name - CSV file containing the transactions to process

Test Case Optional Inputs:
    * None

Test Case Detail Input CSV: Test Case Inputs/Details/BASE-INT-2060-01.csv
Test Case Detail Required Inputs:
    * trntyp - Transaction Type (A-Add, C-Change, D-Delete)
    * transaction_file_name - Name of the transaction file
    * field_to_validate_change - Database field used to validate change transaction succeeded. Required for change transactions
    * table_to_validate_change - Database table used to validate change transaction succeeded. Required for change transactions
Test Case Detail Optional Inputs:
    * This test case runs the BOM Inbound Transaction for Add, Change, and Delete
    * This test case runs the BOM Inbound Transaction for Add, Change, and Delete

Test Case Assumptions:
    * Assumption is the event BOM_INB_IFD is enabled and mapped to correct system
    * The client_id and wh_id configured in Environment.feature match the data in the inbound IFD and will be used for validation, 
      if they do not match, then define client_id and wh_id in local data override

Test Case Notes:
    * Create an XML file representative of what the host would send for BOM Download
    * Provide bomnum for the validation step
    * Provide a trntyp variable value indicating "A" for Add record, "C" for Change record, or "D" for Delete record
    * Provide a clause variable value for validating changed BOM data after processing the Change file

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INT-2070 Integrator Download Work Order Inbound
Test Case File: BASE-INT-2070 Integrator Download Work Order Inbound.feature
###############################################################

Test Case Description:
    This test case runs the Work Order download transaction for Add, Change, and Delete

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Integration

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Integration

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Int_Work_Order_Download"

Test Case Input CSV: Test Case Inputs/BASE-INT-2070.csv

Test Case Required Inputs:
    * wkonum - Work Order Number used for validation and After Scenario purge
    * wkorev - Work Order Revision used for validation and After Scenario purge
    * wkolin - Work Order Line used for validation and After Scenario purge
    * system - Integrator host system for transaction. Must be valid enabled system in WMS Integrator
    * tran_name - Name of transaction. Must be valid enabled transaction in WMS Integrator
    * pre_validation - Cycle scenario to run to perform pre_validations logic
    * post_validation - Cycle scenario to run to perform post validation logic
    * detail_file_name - CSV file containing the transactions to process

Test Case Optional Inputs:
    * None

Test Case Detail Input CSV: Test Case Inputs/Details/BASE-INT-2070-01.csv
Test Case Detail Required Inputs:
    * trntyp - Transaction Type (A-Add, C-Change, D-Delete)
    * transaction_file_name - Name of the transaction file
    * field_to_validate_change - Database field used to validate change transaction succeeded. Required for change transactions
    * table_to_validate_change - Database table used to validate change transaction succeeded. Required for change transactions
Test Case Detail Optional Inputs:
    * This test case runs the Work Order download transaction for Add, Change, and Delete
    * This test case runs the Work Order download transaction for Add, Change, and Delete

Test Case Assumptions:
    * Assumption is the event WO_INB_IFD is enabled and mapped to correct system
    * The client_id and wh_id configured in Environment.feature match the data in the inbound IFD and will be used for validation, 
      if they do not match, then define client_id and wh_id in local data override

Test Case Notes:
    * Create an XML file representative of what the host would send for Work Order Download
    * Provide wkonum for the validation step
    * Provide a trntyp variable value indicating "A" for Add record, "C" for Change record, or "D" for Delete record
    * Provide a clause variable value for validating changed Work Order data after processing the Change file

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INT-2080 Integrator Download Part Inbound
Test Case File: BASE-INT-2080 Integrator Download Part Inbound.feature
###############################################################

Test Case Description:
    This test case runs the Download Part Inbound transaction for Add, Change, and Delete

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Integration

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Integration

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Int_Process_Part_Inbound"

Test Case Input CSV: Test Case Inputs/BASE-INT-2080.csv

Test Case Required Inputs:
    * prtnum - Part Number used for validation and After Scenario purge
    * system - Integrator host system for transaction. Must be valid enabled system in WMS Integrator
    * tran_name - Name of transaction. Must be valid enabled transaction in WMS Integrator
    * pre_validation - Cycle scenario to run to perform pre_validations logic
    * post_validation - Cycle scenario to run to perform post validation logic
    * detail_file_name - CSV file containing the transactions to process

Test Case Optional Inputs:
    * clause - Must match file value when used

Test Case Detail Input CSV: Test Case Inputs/Details/BASE-INT-2080-01.csv
Test Case Detail Required Inputs:
    * trntyp - Transaction Type (A-Add, C-Change, D-Delete)
    * transaction_file_name - Name of the transaction file
    * field_to_validate_change - Database field used to validate change transaction succeeded. Required for change transactions
Test Case Detail Optional Inputs:
    * This test case runs the Download Part Inbound transaction for Add, Change, and Delete
    * This test case runs the Download Part Inbound transaction for Add, Change, and Delete

Test Case Assumptions:
    * Assumption is the event PART_INB_IFD is enabled and mapped to correct system
    * The client_id and wh_id configured in Environment.feature match the data in the inbound IFD and will be used for validation, 
      if they do not match, then define client_id and wh_id in local data override

Test Case Notes:
    * Create an XML file representative of what the host would send for Customer Download
    * Provide prtnum for the validation step
    * Provide a trntyp variable value indicating "A" for Add record, "C" for Change record, or "D" for Delete record
    * Provide a clause variable value for validating changed Part data after processing the Change file

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INT-2090 Integrator Download PO Inbound
Test Case File: BASE-INT-2090 Integrator Download PO Inbound.feature
###############################################################

Test Case Description:
    This test case runs the PO Inbound Transaction for Add, Change, and Delete

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Integration

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Integration

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Int_PO_Download"

Test Case Input CSV: Test Case Inputs/BASE-INT-2090.csv

Test Case Required Inputs:
    * invnum - Planned Inbound Order Number used for validation and After Scenario purge
    * system - Integrator host system for transaction. Must be valid enabled system in WMS Integrator
    * tran_name - Name of transaction. Must be valid enabled transaction in WMS Integrator
    * pre_validation - Cycle scenario to run to perform pre_validations logic
    * post_validation - Cycle scenario to run to perform post validation logic
    * detail_file_name - CSV file containing the transactions to process

Test Case Optional Inputs:
    * None

Test Case Detail Input CSV: Test Case Inputs/Details/BASE-INT-2090-01.csv
Test Case Detail Required Inputs:
    * trntyp - Transaction Type (A-Add, C-Change, D-Delete)
    * transaction_file_name - Name of the transaction file
    * field_to_validate_change - Database field used to validate change transaction succeeded. Required for change transactions
    * table_to_validate_change - Database table used to validate change transaction succeeded. Required for change transactions
Test Case Detail Optional Inputs:
    * This test case runs the PO Inbound Transaction for Add, Change, and Delete
    * This test case runs the PO Inbound Transaction for Add, Change, and Delete

Test Case Assumptions:
    * Assumption is the event RA_INB_IFD is enabled and mapped to correct system
    * The client_id and wh_id configured in Environment.feature match the data in the inbound IFD and will be used for validation, 
      if they do not match, then define client_id and wh_id in local data override

Test Case Notes:
    * Create an XML file representative of what the host would send for PO Download
    * Provide invnum for the validation step
    * Provide a trntyp variable value indicating "A" for Add record, "C" for Change record, or "D" for Delete record
    * Provide a clause variable value for validating changed PO data after processing the Change file

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INT-2100 Integrator Download Shipment Order Inbound
Test Case File: BASE-INT-2100 Integrator Download Shipment Order Inbound.feature
###############################################################

Test Case Description:
    This test case runs the Download Shipment Order Inbound transaction for Add, Change, and Delete

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Integration

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Integration

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Int_ShpOrd_Inbound"

Test Case Input CSV: Test Case Inputs/BASE-INT-2100.csv

Test Case Required Inputs:
    * ordnum - Order Number used for validation and After Scenario purge
    * system - Integrator host system for transaction. Must be valid enabled system in WMS Integrator
    * tran_name - Name of transaction. Must be valid enabled transaction in WMS Integrator
    * pre_validation - Cycle scenario to run to perform pre_validations logic
    * post_validation - Cycle scenario to run to perform post validation logic
    * detail_file_name - CSV file containing the transactions to process

Test Case Optional Inputs:
    * clause - This is the 'where' clause used in validation to confirm the transaction completed

Test Case Detail Input CSV: Test Case Inputs/Details/BASE-INT-2100-01.csv
Test Case Detail Required Inputs:
    * trntyp - Transaction Type (A-Add, C-Change, D-Delete)
    * transaction_file_name - Name of the transaction file
    * field_to_validate_change - Database field used to validate change transaction succeeded. Required for change transactions
Test Case Detail Optional Inputs:
    * This test case runs the Download Shipment Order Inbound transaction for Add, Change, and Delete
    * This test case runs the Download Shipment Order Inbound transaction for Add, Change, and Delete

Test Case Assumptions:
    * Assumption is the event SHIPORD_INB_IFD is enabled and mapped to correct system
    * The client_id and wh_id configured in Environment.feature match the data in the inbound IFD and will be used for validation, 
      if they do not match, then define client_id and wh_id in local data override

Test Case Notes:
    * Create an XML file representative of what the host would send for Shipment Order Download
    * Provide a trntyp variable value indicating "A" for Add record, "C" for Change record, or "D" for Delete record
    * Provide a clause variable value for validating changed Shipment Order data after processing the Change file

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-CNT-0010 Terminal Inventory Count LPN Undirected
Test Case File: BASE-CNT-0010 Terminal Inventory Count LPN Undirected.feature
###############################################################

Test Case Description:
    This test case performs an LPN count on Terminal for undirected work.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Inv_Count_LPN"
Test Case Dataset cleanup scripts: "Inv_Count_LPN"

Test Case Input CSV: Test Case Inputs/BASE-CNT-0010.csv

Test Case Required Inputs:
    * cntbat - Count Batch we are working on. Must be a valid count batch with released counts
    * cnttyp - Count Type. For this script, it has to be a count type that has the 'Detail Count' setting to On
    * stoloc - Where the count will take place. Must be a valid location in the system that has a count in the count batch cntbat. 
               Script will get next eligible location if not defined
    * committed_inventory_in_count_loc - count if committed inventory in location? Y or N

Test Case Optional Inputs:
    * lodnum - The LPN to count in a location. Must be a valid LPN in the location we want to count (or another one to create a mismatch). 
               Script will get next eligible LPNs in location if not defined

Test Case Assumptions:
    * Setup LPN counting correctly: The WMS lets you setup a combination of count types and count zones that result in errors while executing the LPN counts. 
      When a location in a zone that allows LPN counting, but the count type itself does not allow for LPN counting (eg. ABC Cycle Count), the Terminal still 
      goes into LPN counting screens but errors at some point, complaining that an operation code is needed. When setting up the test data, both the count 
      type and count zone should be eligible for LPN counting. Detail: the problem is really because of an empty cnttyp.lpncnt_oprcod.
    * Locations, parts, clients, reason codes are set up for counting
    * The cnttyp specified in is set up for LPN counting

Test Case Notes:
    * None

Test Case Examples:
    * specifying stoloc and lodnum
    * specifying stoloc but not lodnum


###############################################################
Test Case Name: BASE-CNT-0011 Terminal Inventory Count LPN Directed
Test Case File: BASE-CNT-0011 Terminal Inventory Count LPN Directed.feature
###############################################################

Test Case Description:
    This test case performs an LPN count on Terminal for Directed work.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Inv_Count_LPN"
Test Case Dataset cleanup scripts: "Inv_Count_LPN"

Test Case Input CSV: Test Case Inputs/BASE-CNT-0011.csv

Test Case Required Inputs:
    * cntbat - Count Batch we are working on. Must be a valid count batch with released counts
    * cnttyp - Count Type. For this script, it has to be a count type that has the 'Detail Count' setting to On
    * stoloc - Where the count will take place. Must be a valid location in the system that has a count in the count batch cntbat. 
      Script will get next eligible location if not defined
    * committed_inventory_in_count_loc - count if committed inventory in location? Y or N

Test Case Optional Inputs:
    * lodnum - The LPN to count in a location. Must be a valid LPN in the location we want to count (or another one to create a mismatch). 
      Script will get next eligible LPNs in location if not defined

Test Case Assumptions:
    * Setup LPN counting correctly: The WMS lets you setup a combination of count types and count zones that result in errors while executing the LPN counts. 
      When a location in a zone that allows LPN counting, but the count type itself does not allow for LPN counting (eg. ABC Cycle Count), the Terminal still 
      goes into LPN counting screens but errors at some point, complaining that an operation code is needed. When setting up the test data, both the count type
      and count zone should be eligible for LPN counting. Detail: the problem is really because of an empty cnttyp.lpncnt_oprcod.
    * For Directed work, the user and terminal need to be setup to do cycle count work. And there should be no other directed work in the system that the 
      user and device are eligible for. Only count work should show up on the terminal.
    * Locations, parts, clients, reason codes are set up for counting
    * The cnttyp specified in is set up for LPN counting

Test Case Notes:
    * None

Test Case Examples:
    * specifying stoloc and lodnum
    * specifying stoloc but not lodnum


###############################################################
Test Case Name: BASE-CNT-0021 Terminal Inventory Count Summary Directed
Test Case File: BASE-CNT-0021 Terminal Inventory Count Summary Directed.feature
###############################################################

Test Case Description:
    This test case performs a cycle summary count on the terminal in Directed work mode.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Inv_Count_Summary"
Test Case Dataset cleanup scripts: "Inv_Count_Summary"

Test Case Input CSV: Test Case Inputs/BASE-CNT-0021.csv

Test Case Required Inputs:
    * cnttyp - Count Type. Important to find the next eligible piece of work when we have multiple count batches for different count types. 
      For this script, it has to be a count type that has the 'Detail Count' setting to On.
    * blind_counting - blind counting.
    * create_mismatch - create a mismatch count. Only used when no $untqty or $numOUMS are passed in. In that case it will use those quantities and you 
      can create a mismatch count by using 'wrong' quantities.
    * untqty_mismatch_increment - amount to increment for mismatch quantity (untqty + untqty_mismatch_increment)
    * cntbat - Count Batch we are working on. Must be a valid count batch with released counts
    * stoloc - Location where the count will take place. Must be a valid location in the system that has a count in the count batch cntbat.

Test Case Optional Inputs:
    * prtnum - Item we are going to count. Must be a valid item number for the location and count batch or invalid if we want to create a count discrepancy. 
      Must be specified in tandem with prt_client_id
    * prt_client_id - Item Client ID we are going to count. Must be a valid item client id or invalid if we want to create a count discrepancy. 
      Must be specified in tandem with prtnum
    * numUOMs - number of UOMs assigned in the part footprint detail number field
    * untqty - qty to count number field

Test Case Assumptions:
    * For Directed work, the user and terminal need to be setup to do count work. And there should be no other directed work in the system that the user and device are eligible for. Only count work should show up on the terminal.
    * Locations, parts, clients, reason codes are set up for counting
    * The cnttyp specified in is set up for summary counting
    * Some example rows require SERIALIZED CRDL_TO_GRAVE parts to be available in the WMS
    * This test cases does not create inventory to be counted in the dataset, it relies on inventory being in the WMS

Test Case Notes:
    * None

Test Case Examples:
    * specifying stoloc and specifying prtnum/prt_client_id/untqty/numUOMs
    * specifying stoloc, but not prtnum/prt_client_id/untqty/numUOMs
    * specifying stoloc and mismatch creation, but not prtnum/prt_client_id/untqty/numUOMs
    * specifying stoloc and blind counting, but not prtnum/prt_client_id/untqty/numUOMs


###############################################################
Test Case Name: BASE-CNT-0030 Terminal Inventory Count Detail Undirected
Test Case File: BASE-CNT-0030 Terminal Inventory Count Detail Undirected.feature
###############################################################

Test Case Description:
    This test case performs a Undirected detail count in the terminal. The screen flow is almost identical to an Audit Count, but the detail count does not adjust inventory

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Inv_Count_Detail"
Test Case Dataset cleanup scripts: "Inv_Count_Detail"

Test Case Input CSV: Test Case Inputs/BASE-CNT-0030.csv

Test Case Required Inputs:
    * cnttyp - Count Type. Important to find the next eligible piece of work when we have multiple count batches for different count types. 
      For this script, it has to be a count type that has the 'Detail Count' setting to On.
    * blind_counting - blind counting.
    * create_mismatch - create a mismatch count. Only used when no $untqty or $numOUMS are passed in. In that case it will use those quantities and
      you can create a mismatch count by using 'wrong' quantities.
    * untqty_mismatch_increment - amount to increment for mismatch quantity (untqty + untqty_mismatch_increment)
    * cntbat - Count Batch we are working on. Must be a valid count batch with released counts
    * stoloc - Location where the count will take place. Must be a valid location in the system that has a count in the count batch cntbat.

Test Case Optional Inputs:
    * lodnum - The LPN to count in a location. Must be a valid LPN in the location we want to count (or another one to create a mismatch)
    * prtnum - Item we are going to count. Must be a valid item number for the location and count batch or invalid if we want to create a
      count discrepancy. Must be specified in tandem with prt_client_id
    * prt_client_id - Item Client ID we are going to count. Must be a valid item client id or invalid if we want to create a count discrepancy. 
      Must be specified in tandem with prtnum
    * numUOMs - number of UOMs assigned in the part footprint detail number field
    * untqty - qty to count number field
    * adjref1 - adjustment reference 1
    * adjref2 - adjustment reference 2
    * reacod - reason code

Test Case Assumptions:
    * Locations, parts, clients, reason codes are set up for counting
    * The cnttyp specified in is set up for detail counting
    * Some example rows require SERIALIZED CRDL_TO_GRAVE parts to be available in the WMS
    * This test cases does not create inventory to be counted in the dataset, it relies on inventory being in the WMS

Test Case Notes:
    * None

Test Case Examples:
    * specifying stoloc and lodnum/serialized prtnum with inventory mismatch
    * specifying stoloc, but not specifying lodnum/prtnum/prt_client_id/untqty/numUOMs
    * specifying stoloc, but not specifying lodnum/prtnum/prt_client_id/untqty/numUOMs with inventory mismatch
    * specifying stoloc and lodnum/prtnum/prt_client_id/untqty/numUOMs with blind counting
    * specifying stoloc and lodnum/prtnum/prt_client_id/untqty/numUOMs


###############################################################
Test Case Name: BASE-CNT-0031 Terminal Inventory Count Detail Directed
Test Case File: BASE-CNT-0031 Terminal Inventory Count Detail Directed.feature
###############################################################

Test Case Description:
    This test case performs a Directed detail count in the terminal. The screen flow is almost identical to an Audit Count, but the detail count does not adjust inventory

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Inv_Count_Detail"
Test Case Dataset cleanup scripts: "Inv_Count_Detail"

Test Case Input CSV: Test Case Inputs/BASE-CNT-0031.csv

Test Case Required Inputs:
    * cnttyp - Count Type. Important to find the next eligible piece of work when we have multiple count batches for different count types. 
      For this script, it has to be a count type that has the 'Detail Count' setting to On.
    * blind_counting - blind counting.
    * create_mismatch - create a mismatch count. Only used when no $untqty or $numOUMS are passed in. In that case it will use those quantities and you
      can create a mismatch count by using 'wrong' quantities.
    * untqty_mismatch_increment - amount to increment for mismatch quantity (untqty + untqty_mismatch_increment)
    * cntbat - Count Batch we are working on. Must be a valid count batch with released counts
    * stoloc - Location where the count will take place. Must be a valid location in the system that has a count in the count batch cntbat.

Test Case Optional Inputs:
    * lodnum - The LPN to count in a location. Must be a valid LPN in the location we want to count (or another one to create a mismatch)
    * prtnum - Item we are going to count. Must be a valid item number for the location and count batch or invalid if we want to create a count discrepancy. 
      Must be specified in tandem with prt_client_id
    * prt_client_id - Item Client ID we are going to count. Must be a valid item client id or invalid if we want to create a count discrepancy. 
      Must be specified in tandem with prtnum
    * numUOMs - number of UOMs assigned in the part footprint detail number field
    * untqty - qty to count number field
    * adjref1 - adjustment reference 1
    * adjref2 - adjustment reference 2
    * reacod - reason code

Test Case Assumptions:
    * For Directed work, the user and terminal need to be setup to do detail count work. And there should be no other directed work in the systemi
      that the user and device are eligible for. Only detailed count work should show up on the terminal.
    * Locations, parts, clients, reason codes are set up for counting
    * The cnttyp specified in is set up for detail counting
    * Some example rows require SERIALIZED CRDL_TO_GRAVE parts to be available in the WMS
    * This test cases does not create inventory to be counted in the dataset, it relies on inventory being in the WMS

Test Case Notes:
    * None

Test Case Examples:
    * specifying stoloc and lodnum/serialized prtnum with inventory mismatch
    * specifying stoloc, but not specifying lodnum/prtnum/prt_client_id/untqty/numUOMs
    * specifying stoloc, but not specifying lodnum/prtnum/prt_client_id/untqty/numUOMs with inventory mismatch
    * specifying stoloc and lodnum/prtnum/prt_client_id/untqty/numUOMs with blind counting
    * specifying stoloc and lodnum/prtnum/prt_client_id/untqty/numUOMs


###############################################################
Test Case Name: BASE-CNT-0040 Terminal Inventory Audit Count Undirected
Test Case File: BASE-CNT-0040 Terminal Inventory Audit Count Undirected.feature
###############################################################

Test Case Description:
    This test case performs a audit count in the terminal

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Inv_Terminal_Adjustment"
Test Case Dataset cleanup scripts: "Inv_Terminal_Adjustment, Audit_Count_Creation"

Test Case Input CSV: Test Case Inputs/BASE-CNT-0040.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Inventory quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * actcod - Activity Code. Used by 'create inventory' command
    * cnt_sysdate - Used as the schedule date during dataset count batch creation
    * cntbat - Used to name the count batch
    * cnttyp - type of count (A)
    * cnt_qty - audit count quantity (value specified in count) to use for the test

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case loads inventory into a location and performs an audit count in the terminal
    * Note that user permissions must all be set up to run successfully
    * This test does create inventory to be counted in the dataset, but does require serialized parts in the WMS

Test Case Notes:
    * None

Test Case Examples:
    * Run with serialized part and cnt_qty = inventory untqty
    * Run with serialized part and inventory untqty + 1
    * Run with serialized part and inventory untqty - 1
    * Run with audit cnt_qty = inventory untqty
    * Run with audit cnt_qty = inventory untqty - 1
    * Run with audit cnt_qty = inventory untqty + 1


###############################################################
Test Case Name: BASE-CNT-0041 Terminal Inventory Audit Count Directed
Test Case File: BASE-CNT-0041 Terminal Inventory Audit Count Directed.feature
###############################################################

Test Case Description:
    This test case performs a audit count in the terminal

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Inv_Terminal_Adjustment"
Test Case Dataset cleanup scripts: "Audit_Count_Creation, Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-CNT-0041.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Inventory quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * actcod - Activity Code. Used by 'create inventory' command
    * cnt_sysdate - Used as the schedule date during dataset count batch creation
    * cntbat - Used to name the count batch
    * cnttyp - type of count (A)
    * cnt_qty - audit count quantity (value specified in count) to use for the test

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case loads inventory into a location and performs an audit count in the terminal
    * Note that user permissions must all be set up to run successfully
    * This test does create inventory to be counted in the dataset, but does require serialized parts in the WMS

Test Case Notes:
    * None

Test Case Examples:
    * Run with serialized part and cnt_qty = inventory untqty
    * Run with serialized part and inventory untqty + 1
    * Run with serialized part and inventory untqty - 1
    * Run with audit cnt_qty = inventory untqty
    * Run with with audit cnt_qty = inventory untqty - 1
    * Run with audit cnt_qty = inventory untqty + 1


###############################################################
Test Case Name: BASE-CNT-0042 Terminal Inventory Audit Count Add LPN Directed
Test Case File: BASE-CNT-0042 Terminal Inventory Audit Count Add LPN Directed.feature
###############################################################

Test Case Description:
    This test case performs a audit count adding a new LPN not originally in the location in the Terminal

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Audit_Count_Creation"
Test Case Dataset cleanup scripts: "Audit_Count_Creation, Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-CNT-0042.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being newly created. Can be a fabricated number. Used in Terminal and datasets processing.
    * new_lodnum - Load number of the newly added inventory created during audit count by user
    * prtnum - Needs to be a valid part number that is assigned in your system but not in the location
    * new_prtnum - prtnum being used as part of new_lodnum in stoloc for newly added inventory created during audit count by user
    * untqty - Inventory quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * cnt_sysdate - Used as the schedule date during dataset count batch creation
    * cntbat - Used to name the count batch
    * cnttyp - type of count (A)

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case loads inventory into a location and performs an audit count in the Terminal
    * Note that user permissions must all be set up to run successfully
    * This test does create inventory to be counted in the dataset, but does require serialized parts in the WMS

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-CNT-0050 Terminal Inventory Count Manual Undirected
Test Case File: BASE-CNT-0050 Terminal Inventory Count Manual Undirected.feature
###############################################################

Test Case Description:
    This test case performs a manual count in the Terminal

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Manual_Count"

Test Case Input CSV: Test Case Inputs/BASE-CNT-0050.csv

Test Case Required Inputs:
    * stoloc - location where the manual count is desired
    * create_mismatch - specifies whether to create a count mismatch
    * committed_inventory_in_count_loc - Specifies whether to proceed or not if selected LPN or location has committed inventory
    * man_cnt_mode - Specifies whether the manual count should be performed at "LOAD", "SUB" or "DETAIL" level.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Setup manual counting correctly: The WMS lets you setup a combination of count types and count zones that result in errors while executing the manual counts.
    * Locations, parts, clients, reason codes are set up for counting
    * The location where the count is desired has inventory. There should not be more than one load in the specified location, for load level counting. 
      While capturing quantity for detail level counts, the untqty can either be 0 or 1.
    * Configuration to generate audit count after a mismatched count

Test Case Notes:
    * None

Test Case Examples:
    * Performs a load level matched count on the specified location - item in location must be tracked at load level.
    * Performs a load level mismatched count on the specified location - item in location must be tracked at load level.
    * Performs a sub-load level matched count on the specified location - item in location must be tracked at sub-load level.
    * Performs a sub-load level mismatched count on the specified location - item in location must be tracked at sub-load level.
    * Performs a detail level matched count on the specified location - item in location must be tracked at detail level. 
      The detail can take untqty value of either 0 or 1 - needs to be considered if mismatch is desired at the detail level.


###############################################################
Test Case Name: BASE-CNT-1010 Web Inventory Count Create Batch
Test Case File: BASE-CNT-1010 Web Inventory Count Create Batch.feature
###############################################################

Test Case Description:
    Create a Count Batch using the Web using ad-hoc selection parameters like location range, client_id etc.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Inv_Count_Batch"

Test Case Input CSV: Test Case Inputs/BASE-CNT-1010.csv

Test Case Required Inputs:
    * requestCountBy - Method of requesting counts
    * beginLocation - Start of count location range
    * endLocation - End of count location range
    * cntbat - Count Batch we are creating
    * cnttyp_desc - Count type description
    * gencod_desc - Generate code description

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Locations to be counted that are EMPTY - MUST have the configuration in Inventory -> Counts Types -> Cycle Count -> Empty Location set to Yes, 
      without this if the location used for the test is empty, the test will fail.
    * Locations to be counted should have a Count Zone assigned, otherwise they can't be selected for a count batch. 
      Setup one or more Count Zones and assign it to all locations eligible for counting
    * No Data load is used for this test

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-CNT-4010 Mobile Inventory Count LPN Undirected
Test Case File: BASE-CNT-4010 Mobile Inventory Count LPN Undirected.feature
###############################################################

Test Case Description:
    This test case performs an LPN count on Mobile for undirected work.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Inv_Count_LPN"
Test Case Dataset cleanup scripts: "Inv_Count_LPN"

Test Case Input CSV: Test Case Inputs/BASE-CNT-4010.csv

Test Case Required Inputs:
    * cntbat - Count Batch we are working on. Must be a valid count batch with released counts
    * cnttyp - Count Type. For this script, it has to be a count type that has the 'Detail Count' setting to On
    * stoloc - Where the count will take place. Must be a valid location in the system that has a count in the count batch cntbat. 
      Script will get next eligible location if not defined
    * committed_inventory_in_count_loc - count if committed inventory in location? Y or N

Test Case Optional Inputs:
    * lodnum - The LPN to count in a location. Must be a valid LPN in the location we want to count (or another one to create a mismatch). 
      Script will get next eligible LPNs in location if not defined

Test Case Assumptions:
    * Setup LPN counting correctly: The WMS lets you setup a combination of count types and count zones that result in errors while executing the LPN counts. 
      When a location in a zone that allows LPN counting, but the count type itself does not allow for LPN counting (eg. ABC Cycle Count), the Mobile App
      still goes into LPN counting screens but errors at some point, complaining that an operation code is needed. When setting up the test data, 
      both the count type and count zone should be eligible for LPN counting. Detail: the problem is really because of an empty cnttyp.lpncnt_oprcod.
    * Locations, parts, clients, reason codes are set up for counting
    * The cnttyp specified in is set up for LPN counting

Test Case Notes:
    * None

Test Case Examples:
    * specifying stoloc and lodnum
    * specifying stoloc but not lodnum


###############################################################
Test Case Name: BASE-CNT-4011 Mobile Inventory Count LPN Directed
Test Case File: BASE-CNT-4011 Mobile Inventory Count LPN Directed.feature
###############################################################

Test Case Description:
    This test case performs an LPN count on Mobile App using Directed work.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Inv_Count_LPN"
Test Case Dataset cleanup scripts: "Inv_Count_LPN"

Test Case Input CSV: Test Case Inputs/BASE-CNT-4011.csv

Test Case Required Inputs:
    * cntbat - Count Batch we are working on. Must be a valid count batch with released counts
    * cnttyp - Count Type. For this script, it has to be a count type that has the 'Detail Count' setting to On
    * stoloc - Where the count will take place. Must be a valid location in the system that has a count in the count batch cntbat. 
      Script will get next eligible location if not defined
    * committed_inventory_in_count_loc - count if committed inventory in location? Y or N

Test Case Optional Inputs:
    * lodnum - The LPN to count in a location. Must be a valid LPN in the location we want to count (or another one to create a mismatch). 
      Script will get next eligible LPNs in location if not defined

Test Case Assumptions:
    * Setup LPN counting correctly: The WMS lets you setup a combination of count types and count zones that result in errors while executing the LPN counts. 
      When a location in a zone that allows LPN counting, but the count type itself does not allow for LPN counting (eg. ABC Cycle Count), 
      the Mobile App still goes into LPN counting screens but errors at some point, complaining that an operation code is needed. When setting up the test data, 
      both the count type and count zone should be eligible for LPN counting. Detail: the problem is really because of an empty cnttyp.lpncnt_oprcod.
    * For Directed work, the user and Mobile App need to be setup to do cycle count work. And there should be no other directed work in the system that
      the user and device are eligible for. Only count work should show up on the Mobile App.
    * Locations, parts, clients, reason codes are set up for counting
    * The cnttyp specified in is set up for LPN counting

Test Case Notes:
    * None

Test Case Examples:
    * specifying stoloc and lodnum
    * specifying stoloc but not lodnum


###############################################################
Test Case Name: BASE-CNT-4021 Mobile Inventory Count Summary Directed
Test Case File: BASE-CNT-4021 Mobile Inventory Count Summary Directed.feature
###############################################################

Test Case Description:
    This test case performs a cycle summary count on the Mobile App using Directed work mode.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Inv_Count_Summary"
Test Case Dataset cleanup scripts: "Inv_Count_Summary"

Test Case Input CSV: Test Case Inputs/BASE-CNT-4021.csv

Test Case Required Inputs:
    * cnttyp - Count Type. Important to find the next eligible piece of work when we have multiple count batches for different count types. 
      For this script, it has to be a count type that has the 'Detail Count' setting to On.
    * blind_counting - blind counting.
    * create_mismatch - create a mismatch count. Only used when no $untqty or $numOUMS are passed in. In that case it will use those quantities
      and you can create a mismatch count by using 'wrong' quantities.
    * untqty_mismatch_increment - amount to increment for mismatch quantity (untqty + untqty_mismatch_increment)
    * cntbat - Count Batch we are working on. Must be a valid count batch with released counts
    * stoloc - Location where the count will take place. Must be a valid location in the system that has a count in the count batch cntbat.

Test Case Optional Inputs:
    * prtnum - Item we are going to count. Must be a valid item number for the location and count batch or invalid if we want to create a count discrepancy. 
      Must be specified in tandem with prt_client_id
    * prt_client_id - Item Client ID we are going to count. Must be a valid item client id or invalid if we want to create a count discrepancy. 
      Must be specified in tandem with prtnum
    * numUOMs - number of UOMs assigned in the part footprint detail number field
    * untqty - qty to count number field

Test Case Assumptions:
    * For Directed work, the user and Mobile App need to be setup to do count work. And there should be no other directed work in the system that the user
      and device are eligible for. Only count work should show up on the Mobile App.
    * Locations, parts, clients, reason codes are set up for counting
    * The cnttyp specified in is set up for summary counting
    * Some example rows require SERIALIZED CRDL_TO_GRAVE parts to be available in the WMS
    * This test cases does not create inventory to be counted in the dataset, it relies on inventory being in the WMS

Test Case Notes:
    * None

Test Case Examples:
    * specifying stoloc and specifying prtnum/prt_client_id/untqty/numUOMs
    * specifying stoloc, but not prtnum/prt_client_id/untqty/numUOMs
    * specifying stoloc and mismatch creation, but not prtnum/prt_client_id/untqty/numUOMs
    * specifying stoloc and blind counting, but not prtnum/prt_client_id/untqty/numUOMs


###############################################################
Test Case Name: BASE-CNT-4030 Mobile Inventory Count Detail Undirected
Test Case File: BASE-CNT-4030 Mobile Inventory Count Detail Undirected.feature
###############################################################

Test Case Description:
    This test case performs a Undirected detail count in the Mobile App. The screen flow is almost identical to an Audit Count, but the detail count does not adjust inventory

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Inv_Count_Detail"
Test Case Dataset cleanup scripts: "Inv_Count_Detail"

Test Case Input CSV: Test Case Inputs/BASE-CNT-4030.csv

Test Case Required Inputs:
    * cnttyp - Count Type. Important to find the next eligible piece of work when we have multiple count batches for different count types. 
      For this script, it has to be a count type that has the 'Detail Count' setting to On.
    * blind_counting - blind counting.
    * create_mismatch - create a mismatch count. Only used when no $untqty or $numOUMS are passed in. In that case it will use those quantities
      and you can create a mismatch count by using 'wrong' quantities.
    * untqty_mismatch_increment - amount to increment for mismatch quantity (untqty + untqty_mismatch_increment)
    * cntbat - Count Batch we are working on. Must be a valid count batch with released counts
    * stoloc - Location where the count will take place. Must be a valid location in the system that has a count in the count batch cntbat.

Test Case Optional Inputs:
    * lodnum - The LPN to count in a location. Must be a valid LPN in the location we want to count (or another one to create a mismatch)
    * prtnum - Item we are going to count. Must be a valid item number for the location and count batch or invalid if we want to create a count discrepancy. 
      Must be specified in tandem with prt_client_id
    * prt_client_id - Item Client ID we are going to count. Must be a valid item client id or invalid if we want to create a count discrepancy. 
      Must be specified in tandem with prtnum
    * numUOMs - number of UOMs assigned in the part footprint detail number field
    * untqty - qty to count number field
    * djref1 - adjustment reference 1
    * djref2 - adjustment reference 2
    * reacod - reason code

Test Case Assumptions:
    * Locations, parts, clients, reason codes are set up for counting
    * The cnttyp specified in is set up for detail counting
    * Some example rows require SERIALIZED CRDL_TO_GRAVE parts to be available in the WMS
    * This test cases does not create inventory to be counted in the dataset, it relies on inventory being in the WMS

Test Case Notes:
    * None

Test Case Examples:
    * specifying stoloc and lodnum/serialized prtnum with inventory mismatch
    * specifying stoloc, but not specifying lodnum/prtnum/prt_client_id/untqty/numUOMs
    * specifying stoloc, but not specifying lodnum/prtnum/prt_client_id/untqty/numUOMs with inventory mismatch
    * specifying stoloc and lodnum/prtnum/prt_client_id/untqty/numUOMs with blind counting
    * specifying stoloc and lodnum/prtnum/prt_client_id/untqty/numUOMs


###############################################################
Test Case Name: BASE-CNT-4031 Mobile Inventory Count Detail Directed
Test Case File: BASE-CNT-4031 Mobile Inventory Count Detail Directed.feature
###############################################################

Test Case Description:
    This test case performs a Directed detail count in the Mobile App. The screen flow is almost identical to an Audit Count, but the detail count does not adjust inventory

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Inv_Count_Detail"
Test Case Dataset cleanup scripts: "Inv_Count_Detail"

Test Case Input CSV: Test Case Inputs/BASE-CNT-4031.csv

Test Case Required Inputs:
    * cnttyp - Count Type. Important to find the next eligible piece of work when we have multiple count batches for different count types. 
      For this script, it has to be a count type that has the 'Detail Count' setting to On.
    * blind_counting - blind counting.
    * create_mismatch - create a mismatch count. Only used when no $untqty or $numOUMS are passed in. In that case it will use those quantities
      and you can create a mismatch count by using 'wrong' quantities.
    * untqty_mismatch_increment - amount to increment for mismatch quantity (untqty + untqty_mismatch_increment)
    * cntbat - Count Batch we are working on. Must be a valid count batch with released counts
    * stoloc - Location where the count will take place. Must be a valid location in the system that has a count in the count batch cntbat.

Test Case Optional Inputs:
    * lodnum - The LPN to count in a location. Must be a valid LPN in the location we want to count (or another one to create a mismatch)
    * prtnum - Item we are going to count. Must be a valid item number for the location and count batch or invalid if we want to create a count discrepancy. 
      Must be specified in tandem with prt_client_id
    * prt_client_id - Item Client ID we are going to count. Must be a valid item client id or invalid if we want to create a count discrepancy. 
      Must be specified in tandem with prtnum
    * numUOMs - number of UOMs assigned in the part footprint detail number field
    * untqty - qty to count number field
    * adjref1 - adjustment reference 1
    * adjref2 - adjustment reference 2
    * reacod - reason code

Test Case Assumptions:
    * For Directed work, the user and Mobile App need to be setup to do detail count work. And there should be no other directed work in the 
      system that the user and device are eligible for. Only detailed count work should show up on the Mobile App.
    * Locations, parts, clients, reason codes are set up for counting
    * The cnttyp specified in is set up for detail counting
    * Some example rows require SERIALIZED CRDL_TO_GRAVE parts to be available in the WMS
    * This test cases does not create inventory to be counted in the dataset, it relies on inventory being in the WMS

Test Case Notes:
    * None

Test Case Examples:
    * specifying stoloc and lodnum/serialized prtnum with inventory mismatch
    * specifying stoloc, but not specifying lodnum/prtnum/prt_client_id/untqty/numUOMs
    * specifying stoloc, but not specifying lodnum/prtnum/prt_client_id/untqty/numUOMs with inventory mismatch
    * specifying stoloc and lodnum/prtnum/prt_client_id/untqty/numUOMs with blind counting
    * specifying stoloc and lodnum/prtnum/prt_client_id/untqty/numUOMs


###############################################################
Test Case Name: BASE-CNT-4040 Mobile Inventory Audit Count Undirected
Test Case File: BASE-CNT-4040 Mobile Inventory Audit Count Undirected.feature
###############################################################

Test Case Description:
    This test case performs a audit count in the Mobile App

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Inv_Terminal_Adjustment"
Test Case Dataset cleanup scripts: "Inv_Terminal_Adjustment, Audit_Count_Creation"

Test Case Input CSV: Test Case Inputs/BASE-CNT-4040.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Mobile App and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Inventory quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * actcod - Activity Code. Used by 'create inventory' command
    * cnt_sysdate - Used as the schedule date during dataset count batch creation
    * cntbat - Used to name the count batch
    * cnttyp - type of count (A)
    * cnt_qty - audit count quantity (value specified in count) to use for the test

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case loads inventory into a location and performs an audit count in the Mobile App
    * Note that user permissions must all be set up to run successfully
    * This test does create inventory to be counted in the dataset, but does require serialized parts in the WMS

Test Case Notes:
    * None

Test Case Examples:
    * Run with serialized part and cnt_qty = inventory untqty
    * Run with serialized part and inventory untqty + 1
    * Run with serialized part and inventory untqty - 1
    * Run with audit cnt_qty = inventory untqty
    * Run with audit cnt_qty = inventory untqty - 1
    * Run with audit cnt_qty = inventory untqty + 1


###############################################################
Test Case Name: BASE-CNT-4041 Mobile Inventory Audit Count Directed
Test Case File: BASE-CNT-4041 Mobile Inventory Audit Count Directed.feature
###############################################################

Test Case Description:
    This test case performs a audit count in the Mobile App

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Inv_Terminal_Adjustment"
Test Case Dataset cleanup scripts: "Audit_Count_Creation, Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-CNT-4041.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Mobile App and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Inventory quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * actcod - Activity Code. Used by 'create inventory' command
    * cnt_sysdate - Used as the schedule date during dataset count batch creation
    * cntbat - Used to name the count batch
    * cnttyp - type of count (A)
    * cnt_qty - audit count quantity (value specified in count) to use for the test

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case loads inventory into a location and performs an audit count in the Mobile App
    * Note that user permissions must all be set up to run successfully
    * This test does create inventory to be counted in the dataset, but does require serialized parts in the WMS

Test Case Notes:
    * None

Test Case Examples:
    * Run with serialized part and cnt_qty = inventory untqty
    * Run with serialized part and inventory untqty + 1
    * Run with serialized part and inventory untqty - 1
    * Run with audit cnt_qty = inventory untqty
    * Run with with audit cnt_qty = inventory untqty - 1
    * Run with audit cnt_qty = inventory untqty + 1


###############################################################
Test Case Name: BASE-CNT-4042 Mobile Inventory Audit Count Add LPN Directed
Test Case File: BASE-CNT-4042 Mobile Inventory Audit Count Add LPN Directed.feature
###############################################################

Test Case Description:
    This test case performs a audit count adding a new LPN not originally in the location in the Mobile App

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Audit_Count_Creation"
Test Case Dataset cleanup scripts: "Audit_Count_Creation, Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-CNT-4042.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being newly created. Can be a fabricated number. Used in Mobile App and datasets processing.
    * new_lodnum - Load number of the newly added inventory created during audit count by user
    * prtnum - Needs to be a valid part number that is assigned in your system but not in the location
    * new_prtnum - prtnum being used as part of new_lodnum in stoloc for newly added inventory created during audit count by user
    * untqty - Inventory quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * cnt_sysdate - Used as the schedule date during dataset count batch creation
    * cntbat - Used to name the count batch
    * cnttyp - type of count (A)

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case loads inventory into a location and performs an audit count in the Mobile App
    * Note that user permissions must all be set up to run successfully
    * This test does create inventory to be counted in the dataset, but does require serialized parts in the WMS

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-CNT-4050 Mobile Inventory Count Manual Undirected
Test Case File: BASE-CNT-4050 Mobile Inventory Count Manual Undirected.feature
###############################################################

Test Case Description:
    This test case performs a manual count in the Mobile App.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Manual_Count"

Test Case Input CSV: Test Case Inputs/BASE-CNT-4050.csv

Test Case Required Inputs:
    * stoloc - location where the manual count is desired
    * create_mismatch - specifies whether to create a count mismatch
    * committed_inventory_in_count_loc - Specifies whether to proceed or not if selected LPN or location has committed inventory
    * man_cnt_mode - Specifies whether the manual count should be performed at "LOAD", "SUB" or "DETAIL" level.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Setup manual counting correctly: The WMS lets you setup a combination of count types and count zones that result in errors while executing the manual counts.
    * Locations, parts, clients, reason codes are set up for counting
    * The location where the count is desired has inventory. There should not be more than one load in the specified location, for load level counting. 
      While capturing quantity for detail level counts, the untqty can either be 0 or 1.
    * Configuration to generate audit count after a mismatched count

Test Case Notes:
    * None

Test Case Examples:
    * Performs a load level matched count on the specified location - item in location must be tracked at load level.
    * Performs a load level mismatched count on the specified location - item in location must be tracked at load level.
    * Performs a sub-load level matched count on the specified location - item in location must be tracked at sub-load level.
    * Performs a sub-load level mismatched count on the specified location - item in location must be tracked at sub-load level.
    * Performs a detail level matched count on the specified location - item in location must be tracked at detail level. 
      The detail can take untqty value of either 0 or 1 - needs to be considered if mismatch is desired at the detail level.


###############################################################
Test Case Name: BASE-INV-0010 Terminal Inventory Adjustment Add
Test Case File: BASE-INV-0010 Terminal Inventory Adjustment Add.feature
###############################################################

Test Case Description:
    This test case adds inventory to an empty location or a location that holds more than one pallet via terminal

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-0010.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for a single load add to a location
    * Locations, parts, clients, reason codes are set up for an Add
    * Data load is not required
    * The location is either empty or can take a new pallet
    * The adjustment approval required will be acknowledged if approval thresholds are configured and adjustment exceeds threshold

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-0020 Terminal Inventory Adjustment Delete
Test Case File: BASE-INV-0020 Terminal Inventory Adjustment Delete.feature
###############################################################

Test Case Description:
    This test case deletes a single load of inventory on the terminal

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Inv_Terminal_Adjustment"
Test Case Dataset cleanup scripts: "Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-0020.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * actcod - Activity Code. Used by 'create inventory' command

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for a single load Delete of location containing 1 pallet
    * Locations, parts, clients, reason codes are set up for an Delete
    * Adjustment approval required will be acknowledged if approval thresholds are configured and adjustment exceeds threshold
    * A cycle purge is needed to remove pending adjustment approval when the adjustment exceeds configured threshold

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-0030 Terminal Inventory Adjustment Increase
Test Case File: BASE-INV-0030 Terminal Inventory Adjustment Increase.feature
###############################################################

Test Case Description:
    This test case adds additional quantity to an existing load in a location on the terminal

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Inv_Terminal_Adjustment"
Test Case Dataset cleanup scripts: "Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-0030.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * actcod - Activity Code. Used by 'create inventory' command
    * new_qty - Quantity for the increase. Must be greater than untqty

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for adding qty to an existing load in a location
    * Locations, parts, clients, reason codes are set up for adjustment
    * Adjustment approval required will be acknowledged if approval thresholds are configured and adjustment exceeds threshold

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-0040 Terminal Inventory Adjustment Decrease
Test Case File: BASE-INV-0040 Terminal Inventory Adjustment Decrease.feature
###############################################################

Test Case Description:
    This test case decrements inventory on an existing load in a location on the terminal

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Inv_Terminal_Adjustment"
Test Case Dataset cleanup scripts: "Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-0040.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * actcod - Activity Code. Used by 'create inventory' command
    * new_qty - Quantity for the increase. Must be greater than untqty

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for adding qty to an existing load in a location
    * Locations, parts, clients, reason codes are set up for adjustment
    * Adjustment approval required will be acknowledged if approval thresholds are configured and adjustment exceeds threshold

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-0050 Terminal Inventory Transfer Directed
Test Case File: BASE-INV-0050 Terminal Inventory Transfer Directed.feature
###############################################################

Test Case Description:
    This test case performs a full inventory move as Directed work in the terminal

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Inv_Transfer"
Test Case Dataset cleanup scripts: "Inv_Transfer"

Test Case Input CSV: Test Case Inputs/BASE-INV-0050.csv

Test Case Required Inputs:
    * srcloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * dstloc - Destination Location. Where we deposit the inventory.
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing. 
      (Note: When lodnum = 'CYC-LOAD-XFER', Cycle will generate a new LPN when processing the dataset. otherwise, it will use the input lodnum.)
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity for the dataset to add inventory . Must be a number.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * The Terminal/User used is ineligible for directed work

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-0060 Terminal Inventory Transfer Undirected
Test Case File: BASE-INV-0060 Terminal Inventory Transfer Undirected.feature
###############################################################

Test Case Description:
    This test case performs a full inventory move as Undirected work.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Inv_Transfer"
Test Case Dataset cleanup scripts: "Inv_Transfer"

Test Case Input CSV: Test Case Inputs/BASE-INV-0060.csv

Test Case Required Inputs:
    * srcloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * dstloc - Destination Location. Where we deposit the inventory.
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing. 
      (Note: When lodnum = 'CYC-LOAD-XFER', Cycle will generate a new LPN when processing the dataset. otherwise, it will use the input lodnum.)
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity for the dataset to add inventory . Must be a number.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the destination location.
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Process ends with the inventory being moved to assign dstloc

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-0070 Terminal Inventory Status Change
Test Case File: BASE-INV-0070 Terminal Inventory Status Change.feature
###############################################################

Test Case Description:
    This test case changes the status of an inventory identifier in the terminal

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Inv_Terminal_Adjustment"
Test Case Dataset cleanup scripts: "Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-0070.csv

Test Case Required Inputs:
    * stoloc - Location where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal/WEB and datasets processing
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * reacod - System reason code for status change. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * actcod - Activity Code, used by 'create inventory command'
    * new_sts - Status change value

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Locations, parts, clients, reason codes are set up for status change

Test Case Notes:
    * None

Test Case Examples:
    * one representing Available status and then typing new_sts (D) directly into terminal field
    * one representing Damaged status and then typing new_sts (A) directly into terminal field


###############################################################
Test Case Name: BASE-INV-0080 Terminal Inbound Directed Putaway from Inventory Override
Test Case File: BASE-INV-0080 Terminal Inbound Directed Putaway from Inventory Override.feature
###############################################################

Test Case Description:
    This Test Case generates an LPN to perform a putaway and during operation overrides the putaway location.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Putaway"
Test Case Dataset cleanup scripts: "Putaway"

Test Case Input CSV: Test Case Inputs/BASE-INV-0080.csv

Test Case Required Inputs:
    * wh_id - Warehouse ID
    * trlr_num - Trailer Number
    * inv_num - Inventory number. Can be set to match the trlr_num
    * yard_loc - Yard location
    * invtyp - Inventory type
    * rcvsts - Receive status
    * expqty - Expected quantity for the receipt
    * supnum - Supplier Number
    * rec_loc - Receive location. Where the load will be received
    * uomcod - UOM Code
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * dep_loc - Deposit location. Where the load will be deposited
    * prtnum - Needs to be a valid part number that is assigned in your system
    * ftpcod - Footprint Code. Must be a valid footprint code for the given prtnum
    * untqty - Quantity being added
    * allocate - Boolean specifying whether to allocate
    * override - Boolean specifying whether there exists an override
    * over_code - Overage code
    * over_dep_loc - Overage deposit location. Where overages will be deposited to (if allowed).
    * actcod - Action code
    * override_f2 - use F2 to display override code during putway and selects one
    * carcod - Carrier code of the trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Receiving can continue whether there are overages or shorts.

Test Case Notes:
    * Regression runs require parts and enough config to deposit inventory into the receive stage location
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Processing ends with the deposit into the over_dep_loc

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-0090 Terminal Inventory Location Display
Test Case File: BASE-INV-0090 Terminal Inventory Location Display.feature
###############################################################

Test Case Description:
    This Test Case will perform an inventory location display given a stoloc in the terminal

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "N/A"

Test Case Input CSV: Test Case Inputs/BASE-INV-0090.csv

Test Case Required Inputs:
    * stoloc - A valid storage location in the system
    * generate_screenshot - generate screen shot of location display screen

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * No dataset is used, relies on location in the system

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-0100 Terminal Inventory Display
Test Case File: BASE-INV-0100 Terminal Inventory Display.feature
###############################################################

Test Case Description:
    This Test Case will perform an inventory display given a lodnum and prtnum in the terminal

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "N/A"

Test Case Input CSV: Test Case Inputs/BASE-INV-0100.csv

Test Case Required Inputs:
    * stoloc - Location where the inventory display will come from. Must be a valid location in the system
    * lodnum - Load number being displayed. Must be from actual inventory in the system
    * prtnum - A valid part number in the systen relative to the specified lodnum
    * generate_screenshot - generate screen shot of inventory display screen

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * No dataset is used, relies on location and inventory in the system

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-0120 Terminal Partial Inventory Move
Test Case File: BASE-INV-0120 Terminal Partial Inventory Move.feature
###############################################################

Test Case Description:
    This test case will perform a terminal inventory move of a partial quantity in a load and verify that the move was successful.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Terminal

Test Case Dataset setup scripts: "Inv_Part_Move"
Test Case Dataset cleanup scripts: "Inv_Part_Move"

Test Case Input CSV: Test Case Inputs/BASE-INV-0120.csv

Test Case Required Inputs:
    * srcloc - The source location of the LPN (load number) to be moved. Must be a valid adjustable/storable location in the system. Used in load dataset processing.
    * dstloc - The destination location of the LPN to be moved. Must be a valid adjustable/storable location in the system. 
      Must be a different location than the source location. Used in Terminal interactions and post move validation.
    * srclod - Load number added by dataset and moved by the main scenario. Can be a fabricated number. Used in dataset processing and in Web interactions.
    * prtnum - This needs to be a valid part number that is defined in your system. 
      The part will use the default client_id defined in Environment.feature. Used in load dataset processing and Terminal validation.
    * untqty - Quantity for the dataset to add inventory. Must be a number. Used in load dataset processing and Web validation.
    * ftpcod - Footprint code for item to be adjusted. Must be a valid footprint for the item. Used in load dataset processing.
    * move_qty - Qty to be moved from source to destination if moving less than a full load. Used in terminal interactions and post move validation.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for moving a single item LPN (load number) from a source location to a destination location
    * Locations, parts, clients, reason codes are set up for an inventory movement
    * If moving a partial quantity, the move_qty variable is populated and is less than the untqty variable used by the load dataset
    * If moving a partial qty, the dstlod variable is populated for the new LPN that is created with the partial move qty

Test Case Notes:
    * None

Test Case Examples:
    * one representing a complete move of inventory
    * one representing a partial move of inventory


###############################################################
Test Case Name: BASE-INV-0130 Terminal Inventory Transfer Invalid
Test Case File: BASE-INV-0130 Terminal Inventory Transfer Invalid.feature
###############################################################

Test Case Description:
    This test case will attempt to move inventory to an invalid location in the Terminal.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Create_Trailer"
Test Case Dataset cleanup scripts: "Create_Trailer, Inv_Transfer"

Test Case Input CSV: Test Case Inputs/BASE-INV-0130.csv

Test Case Required Inputs:
    * srcloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * dstloc - Destination Location. Where we deposit the inventory. This will be an invalid storage trailer.
    * valid_dstloc - secondary location to complete transfer.
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing. 
      (Note: When lodnum = 'CYC-LOAD-XFER', Cycle will generate a new LPN when processing the dataset. otherwise, it will use the input lodnum.)
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity for the dataset to add inventory . Must be a number.
    * trlr_id - This will be used as the trailer ID for the trailer
    * carcod - This will be used as the carrier for the shipment
    * yard_loc - Yard Location
    * trlr_cod - Transport Equipment Code

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the destination location.
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Process ends with the inventory being moved to assign dstloc

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-0140 Terminal Inventory Transfer Multiple LPNs Undirected
Test Case File: BASE-INV-0140 Terminal Inventory Transfer Multiple LPNs Undirected.feature
###############################################################

Test Case Description:
    This test case performs a full inventory move of multiple LPNs as Undirected work in the Terminal

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Inv_Transfer"
Test Case Dataset cleanup scripts: "Inv_Transfer"

Test Case Input CSV: Test Case Inputs/BASE-INV-0140.csv

Test Case Required Inputs:
    * srcloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * dstloc - Destination Location. Where we deposit the inventory.
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing. 
      (Note: When lodnum = 'CYC-LOAD-XFER', Cycle will generate a new LPN when processing the dataset. otherwise, it will use the input lodnum.)
    * prtnum_list - Comma separated list of valid part numbers that are assigned in your system and will use to generated inventory
    * untqty - Quantity for the dataset to add inventory . Must be a number. Quantity used for all prtnums in prtnum_list

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the destination location.
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Process ends with the inventory being moved to assign dstloc

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-0150 Terminal Inventory Partial Move Multiple LPNs
Test Case File: BASE-INV-0150 Terminal Inventory Partial Move Multiple LPNs.feature
###############################################################

Test Case Description:
    This test case will perform a Terminal inventory move of a partial quantity in a load for multiple LPNs and verify that the moves were successful.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Terminal

Test Case Dataset setup scripts: "Inv_Transfer"
Test Case Dataset cleanup scripts: "Inv_Transfer"

Test Case Input CSV: Test Case Inputs/BASE-INV-0150.csv

Test Case Required Inputs:
    * srcloc - The source location of the LPN (load number) to be moved. Must be a valid adjustable/storable location in the system. Used in load dataset processing.
    * dstloc - The destination location of the LPN to be moved. Must be a valid adjustable/storable location in the system. 
      Must be a different location than the source location. Used in Terminal interactions and post move validation.
    * srclod - Load number added by dataset and moved by the main scenario. Can be a fabricated number.
    * prtnum_list - Comma separated list of valid part numbers that are assigned in your system and will use to generated
    * untqty - Quantity for the dataset to add inventory . Must be a number. Quantity used for all prtnums in prtnum_list
    * move_qty - Qty to be moved from source to destination if moving less than a full load. Used in Terminal interactions and post move validation.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for moving a single or multiple item LPN (load number) from a source location to a destination location
    * Locations, parts, clients, reason codes are set up for an inventory movement
    * If moving a partial quantity, the move_qty variable is populated and is less than the untqty variable used by the load dataset
    * If moving a partial qty, the dstlod variable is populated for the new LPN that is created with the partial move qty

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1010 Web Inventory Adjustment Add
Test Case File: BASE-INV-1010 Web Inventory Adjustment Add.feature
###############################################################

Test Case Description:
    This test case will handle using the Web to complete an inventory adjustment to add inventory and confirm the inventory has been 
    adjusted into the system. If adjustment approvals are enabled and the adjustment exceeds the threshold, this test case will acknowledge
    approval if required and confirm the inventory adjustment is pending approval.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Web_Inv_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-1010.csv

Test Case Required Inputs:
    * stoloc - Location where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal/WEB and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * uom - Unit of measure to be added. Must be a valid UOM for the item This test case expects to add 1 LPN, 
      if a UOM is defined that results in multiple LPNs being added, the feature will fail. The uom defined should be the UOM as it appears in the web UI
    * ftpcod - Footprint code for item to be added. Must be a valid footprint for the item
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for a single load add to location
    * Locations, parts, clients, reason codes are set up for an Add
    * A data load is not required
    * The location is either empty or can take a new pallet (is not full, locked, or in inventory error)
    * Adjustment approval required will be acknowledged if approval thresholds are configured and adjustment exceeds threshold

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1020 Web Inventory Adjustment Delete
Test Case File: BASE-INV-1020 Web Inventory Adjustment Delete.feature
###############################################################

Test Case Description:
    This test case will handle using the Web to complete an inventory adjustment to delete existing inventory and confirm the inventory has 
    been deleted from the system. If adjustment approvals are enabled and the adjustment exceeds the threshold, this feature will acknowledge 
    approval if required and confirm the inventory adjustment is pending approval.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Web_Inv_Adjustment"
Test Case Dataset cleanup scripts: "Web_Inv_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-1020.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal/WEB and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * uom - Unit of measure to be added. Must be a valid UOM for the item This test case expects to add 1 LPN, 
      if a UOM is defined that results in multiple LPNs being added, the feature will fail. The uom defined should be the UOM as it appears in the Web
    * ftpcod - Footprint code for item to be added. Must be a valid footprint for the item
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system This Web readable value (this input value)
      is translated to the system code value for use in the dataset
    * invsts - Inventory status. This needs to be a valid inventory status in your system This Web readable value (this input value) 
      is translated to the system code value for use in the dataset
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for deleting an existing load in a location
    * Locations, parts, clients, reason codes are set up for an inventory delete
    * The location is either full or partially full and can take an adjustment (is not empty, locked, or in inventory error)
    * Adjustment approval required will be acknowledged if approval thresholds are configured and adjustment exceeds threshold

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1030 Web Inventory Adjustment Increase
Test Case File: BASE-INV-1030 Web Inventory Adjustment Increase.feature
###############################################################

Test Case Description:
    This test case will handle using the Web to complete an inventory adjustment to increase existing inventory and confirm the inventory 
    has been adjusted into the system. If adjustment approvals are enabled and the adjustment exceeds the threshold, this test case will 
    acknowledge approval if required and confirm the inventory adjustment is pending approval.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Web_Inv_Adjustment"
Test Case Dataset cleanup scripts: "Web_Inv_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-1030.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal/WEB and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * uom - Unit of measure to be added. Must be a valid UOM for the item
    * ftpcod - Footprint code for item to be added. Must be a valid footprint for the item
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system This Web readable value (this input value) 
      is translated to the system code value for use in the dataset
    * invsts - Inventory status. This needs to be a valid inventory status in your system This Web readable value (this input value) 
      is translated to the system code value for use in the dataset
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * new_qty - Quantity for the increase. Must be more than QTY (untqty used by dataset)

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for a increasing inventory on an existing load in a location
    * Locations, parts, clients, reason codes are set up for an Increase
    * The location is either full or partially full and can take an adjustment (is not empty, locked, or in inventory error)
    * Adjustment approval required will be acknowledged if approval thresholds are configured and adjustment exceeds threshold

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1040 Web Inventory Adjustment Decrease
Test Case File: BASE-INV-1040 Web Inventory Adjustment Decrease.feature
###############################################################

Test Case Description:
    This test case will handle using the Web to complete an inventory adjustment to decrease existing inventory and confirm the inventory
    has been adjusted into the system. If adjustment approvals are enabled and the adjustment exceeds the threshold, this test case will
    acknowledge approval if required and confirm the inventory adjustment is pending approval

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Web_Inv_Adjustment"
Test Case Dataset cleanup scripts: "Web_Inv_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-1040.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal/WEB and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * uom - Unit of measure to be added. Must be a valid UOM for the item
    * ftpcod - Footprint code for item to be added. Must be a valid footprint for the item
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system This Web readable value (this input value) 
      is translated to the system code value for use in the dataset
    * invsts - Inventory status. This needs to be a valid inventory status in your system This Web readable value (this input value) 
      is translated to the system code value for use in the dataset
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * new_qty - Quantity for the increase. Must be more than QTY (untqty used by dataset)

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for a decreasing inventory on an existing load in a location
    * Locations, parts, clients, reason codes are set up for a decrease
    * The location is either full or partially full and can take an adjustment (is not empty, locked, or in inventory error)
    * Adjustment approval required will be acknowledged if approval thresholds are configured and adjustment exceeds threshold

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1050 Web Inventory Move
Test Case File: BASE-INV-1050 Web Inventory Move.feature
###############################################################

Test Case Description:
    This test case will utilize the Web to complete an inventory movement from a source location to a destination location and confirm the 
    inventory has been moved to the destination location.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Web_Inventory_Move"
Test Case Dataset cleanup scripts: "Web_Inventory_Move"

Test Case Input CSV: Test Case Inputs/BASE-INV-1050.csv

Test Case Required Inputs:
    * srcloc - The source location of the LPN (load number) to be moved. Must be a valid adjustable/storable location in the system. Used in load dataset processing.
    * dstloc - The destination location of the LPN to be moved. Must be a valid adjustable/storable location in the system. 
      Must be a different location than the source location. Used in Web interactions and post move validation.
    * srclod - Load number added by dataset and moved by the main scenario. Can be a fabricated number. Used in dataset processing and in Web interactions.
    * prtnum - This needs to be a valid part number that is defined in your system. The part will use the default client_id defined in Environment.feature. 
      Used in load dataset processing and Web validation.
    * untqty - Quantity for the dataset to add inventory. Must be a number. Used in load dataset processing and Web validation.
    * ftpcod - Footprint code for item to be adjusted. Must be a valid footprint for the item. Used in load dataset processing.
    * move_qty - Qty to be moved from source to destination if moving less than a full load. Used in Web interactions and post move validation.
    * dstlod - New load number (LPN) for the partial qty if performing a partial qty movement. Used in Web interactions, post move validation, and cleanup dataset processing.
    * inventory_move_mode - set to IMMEDIATE for this test

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for moving a single item LPN (load number) from a source location to a destination location
    * Locations, parts, clients, reason codes are set up for an inventory movement
    * If moving a partial quantity, the move_qty variable is populated and is less than the untqty variable used by the load dataset
    * If moving a partial qty, the dstlod variable is populated for the new LPN that is created with the partial move qty
    * The Web inventory transfer will be an immediate move and not utilize RF directed work

Test Case Notes:
    * None

Test Case Examples:
    * one representing a complete move of inventory
    * one representing a partial move of inventory


###############################################################
Test Case Name: BASE-INV-1060 Web Inventory Status Change
Test Case File: BASE-INV-1060 Web Inventory Status Change
###############################################################

Test Case Description:
    This test case will change the Inventory Status from the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Inv_Terminal_Adjustment"
Test Case Dataset cleanup scripts: "Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-1060.csv

Test Case Required Inputs:
    * stoloc - Location where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal/WEB and datasets processing
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * actcod - Activity Code, used by 'create inventory command'
    * newinvsts - New Inventory Status. Used to set the inventory to this status
    * reacodfull - Reason Code Full. Used for the reason code of the inventory status change. Must be full description

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1070 Web Inventory Display
Test Case File: BASE-INV-1070 Web Inventory Display.feature
###############################################################

Test Case Description:
    This test case will perform an inventory display in the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "N/A"

Test Case Input CSV: Test Case Inputs/BASE-INV-1070.csv

Test Case Required Inputs:
    * stoloc - Location where the inventory display will come from. Must be a valid location in the system
    * lodnum - Load number being displayed. Must be from actual inventory in the system
    * prtnum - A valid part number in the systen relative to the specified lodnum
    * generate_screenshot - generate screen shot of inventory display screen

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * This feature does not used a dataset for load or cleanup

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1080 Web Inventory Add Hold
Test Case File: BASE-INV-1080 Web Inventory Add Hold.feature
###############################################################

Test Case Description:
    This test case will add a hold to inventory from the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Inv_Add_Hold"
Test Case Dataset cleanup scripts: "Inv_Add_Hold"

Test Case Input CSV: Test Case Inputs/BASE-INV-1080.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal/WEB and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * actcod - Activity Code. Used by 'create inventory' command
    * hldnum - Hold Number. Hold Number to be applied to inventory
    * reacodfull - Reason Code Full. Used for the reason code of the inventory status change. Must be full description.
    * hold_mode - Used for processing logic. 1 = Add Hold, 0 = Release Hold

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * Note that user permissions, Hold Definition, Hold Reason, etc. must all be set up to run successfully

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1090 Web Inventory Release Hold
Test Case File: BASE-INV-1090 Web Inventory Release Hold.feature
###############################################################

Test Case Description:
    This test case will release hold of Inventory from the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Inv_Release_Hold"
Test Case Dataset cleanup scripts: "Inv_Release_Hold"

Test Case Input CSV: Test Case Inputs/BASE-INV-1090.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal/WEB and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * actcod - Activity Code. Used by 'create inventory' command
    * hldnum - Hold Number. Hold Number to be applied to inventory
    * reacodfull - Reason Code Full. Used for the reason code of the inventory status change. Must be full description.
    * hold_mode - Used for processing logic. 1 = Add Hold, 0 = Release Hold

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * Note that user permissions, Hold Definition, Hold Reason, etc. must all be set up to run successfully

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1100 Web Inventory Adjust With Approval Limits
Test Case File: BASE-INV-1100 Web Inventory Adjust With Approval Limits.feature
###############################################################

Test Case Description:
    This test case will Adjust Inventory with Approval Limits

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Create_Inventory"
Test Case Dataset cleanup scripts: "Create_Inventory"

Test Case Input CSV: Test Case Inputs/BASE-INV-1100.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number.
    * prtnum - Need to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * actcod - Used by 'create inventory' command
    * ftpcod - Footprint Code
    * srcloc - Source Location
    * dstloc - Destination Location
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * adj_untqty - adjust inventory quantity to this value
    * adjust_approval_reason - reason code used for the inventory adjustment approval
    * web_credentials - Both WMS User and Cycle Credentials named INV_ADJ_USR
    * username - WEB username (INV_ADJ_USR) to perform WEB logout
    * approval_needed - TRUE indicates that WEB dialog will be presented to note approval is needed

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test requires a WMS User and generated Cycle Credentials for INV_ADJ_USR
    * User must have permission to setup and approve Inventory Adjustments
    * setting adj_thr_unit = 1, adj_thr_cst = 1 in les_usr_ath table for INV_ADJ_USR

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1110 Web Inventory Location Display
Test Case File: BASE-INV-1110 Web Inventory Location Display.feature
###############################################################

Test Case Description:
    This test case will examine a storage location for Configuration/Storage Locations area in the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "N/A"

Test Case Input CSV: Test Case Inputs/BASE-INV-1110.csv

Test Case Required Inputs:
    * stoloc - valid storage location in the system
    * generate_screenshot - generate screen shot of storage location screen

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * This feature does not use a dataset for load or cleanup

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1120 Web Inventory Error Location
Test Case File: BASE-INV-1120 Web Inventory Error Location.feature
###############################################################

Test Case Description:
    This Test Case sets a location status to error and resets it to the original status.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Web_Location_Status_Change"
Test Case Dataset cleanup scripts: "Web_Location_Status_Change"

Test Case Input CSV: Test Case Inputs/BASE-INV-1120.csv

Test Case Required Inputs:
    * stoloc - valid storage location in the system

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Location is not locked, or in inventory error state

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1130 Web Inventory Change Lot
Test Case File: BASE-INV-1130 Web Inventory Change Lot.feature
###############################################################

Test Case Description:
    This test case will change the lot number for an Inventory from the Web.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Create_Inventory_Load"
Test Case Dataset cleanup scripts: "Create_Inventory_Load"

Test Case Input CSV: Test Case Inputs/BASE-INV-1130.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * actcod - Used by 'create inventory' command
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * new_lotnum - Used to set the inventory's lotnum to this value
    * reacodfull - Used for the reason code of the lotnum change. Must be full description

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1140 Web Inventory Relabel LPN
Test Case File: BASE-INV-1140 Web Inventory Relabel LPN.feature
###############################################################

Test Case Description:
    This test case will relabel an LPN for an Inventory from the Web.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Create_Inventory_Load"
Test Case Dataset cleanup scripts: "Create_Inventory_Load"

Test Case Input CSV: Test Case Inputs/BASE-INV-1140.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing
    * new_lodnum - Used to set the inventory's lodnum to this value
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * actcod - Used by 'create inventory' command
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1150 Web Inventory Adjustment Reject Approval
Test Case File: BASE-INV-1150 Web Inventory Adjustment Reject Approval.feature
###############################################################

Test Case Description:
    This test case will reject a Inventory Adjustment approval in the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Create_Inventory"
Test Case Dataset cleanup scripts: "Create_Inventory"

Test Case Input CSV: Test Case Inputs/BASE-INV-1150.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number.
    * prtnum - Need to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * actcod - Used by 'create inventory' command
    * ftpcod - Footprint Code
    * srcloc - Source Location
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * adj_untqty - adjust inventory quantity to this value
    * adjust_approval_reason - reason code used for the inventory adjustment approval
    * web_credentials - Both WMS User and Cycle Credentials named INV_ADJ_USR
    * username - WEB username (INV_ADJ_USR) to perform WEB logout
    * approval_needed - TRUE indicates that WEB dialog will be presented to note approval is needed

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test requires a WMS User and generated Cycle Credentials for INV_ADJ_USR
    * User must have permission to setup and approve Inventory Adjustments
    * setting adj_thr_unit = 1, adj_thr_cst = 1 in les_usr_ath table for INV_ADJ_USR

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1160 Web Inventory Add Hold Multiple LPNs
Test Case File: BASE-INV-1160 Web Inventory Add Hold Multiple LPNs.feature
###############################################################

Test Case Description:
    This test case will add a hold to multiple pieces of inventory from the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Create_INV_Hold_Release"
Test Case Dataset cleanup scripts: "Create_INV_Hold_Release"

Test Case Input CSV: Test Case Inputs/BASE-INV-1160.csv

Test Case Required Inputs:
    * num_loads - Should pass number of loads
    * lodnum_1 - Load number being adjusted in. Can be a fabricated number. Used in Terminal/WEB and datasets processing.
    * lodnum_2 - Load number being adjusted in. Can be a fabricated number. Used in Terminal/WEB and datasets processing.
    * lodnum_3 - Load number being adjusted in. Can be a fabricated number. Used in Terminal/WEB and datasets processing.
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * actcod - Activity Code. Used by 'create inventory' command
    * hldnum - Hold Number. Hold Number to be applied to inventory
    * reacodfull - Reason Code Full. Used for the reason code of the inventory status change. Must be full description.
    * hold_mode - Used for processing logic. 1 = Add Hold, 0 = Release Hold
    * hold_multi - used if we are selecting multiple LPNs to search for and hold (if TRUE)
    * lodnum - LPN to be used for validation and filtering in the inventory screen

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * Note that user permissions, Hold Definition, Hold Reason, etc. must all be set up to run successfully

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1170 Web Inventory Remove Hold Multiple LPNs
Test Case File: BASE-INV-1170 Web Inventory Remove Hold Multiple LPNs.feature
###############################################################

Test Case Description:
    This test case will release holds on multiple pieces of multiple inventory from the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Create_INV_Hold_Release"
Test Case Dataset cleanup scripts: "Create_INV_Hold_Release"

Test Case Input CSV: Test Case Inputs/BASE-INV-1170.csv

Test Case Required Inputs:
    * num_loads - Number of loads
    * lodnum_1 - Load number being adjusted in. Can be a fabricated number. Used in Terminal/WEB and datasets processing.
    * lodnum_2 - Load number being adjusted in. Can be a fabricated number. Used in Terminal/WEB and datasets processing.
    * lodnum_3 - Load number being adjusted in. Can be a fabricated number. Used in Terminal/WEB and datasets processing.
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * actcod - Activity Code. Used by 'create inventory' command
    * hldnum - Hold Number. Hold Number to be applied to inventory
    * reacodfull - Reason Code Full. Used for the reason code of the inventory status change. Must be full description.
    * hold_mode - Used for processing logic. 1 = Add Hold, 0 = Release Hold
    * hold_multi - Used if we are selecting multiple LPNs to search for and release holds (if TRUE)
    * lodnum - Any lodnum which we passed earlier which is used for validating

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * Note that user permissions, Hold Definition, Hold Reason, etc. must all be set up to run successfully

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-1180 Web Inventory Adjustment Approval from Cost
Test Case File: BASE-INV-1180 Web Inventory Adjustment Approval from Cost.feature
###############################################################

Test Case Description:
    This test case will generate a Inventory Adjustment based on cost. It will choose adjustment quantities at an allowable amount, 
    below that allowable amount, and above the allowable amount.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Create_Inventory"
Test Case Dataset cleanup scripts: "Create_Inventory"

Test Case Input CSV: Test Case Inputs/BASE-INV-1180.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number.
    * prtnum - Need to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * actcod - Used by 'create inventory' command
    * ftpcod - Footprint Code
    * srcloc - Source Location
    * lotnum - Lot Number
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * adjust_approval_reason - reason code used for the inventory adjustment approval
    * web_credentials - Both WMS User and Cycle Credentials named INV_ADJ_USR_COST
    * username - WEB username (INV_ADJ_USR_COST) to perform WEB logout
    * adj_thresh - should adjustment quantity be set MAX_ALLOWABLE|LESS_THAN|GREATER_THAN based on cost threshold allowed
    * adj_max_cost - maximum threshold the user can adjust without approval ($500 for INV_ADJ_USR_COST user)

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test requires a WMS User and generated Cycle Credentials for INV_ADJ_USR_COST
    * User must have permission to setup and approve Inventory Adjustments
    * setting adj_thr_unit = 0, adj_thr_cst = 500 in les_usr_ath table for INV_ADJ_USR_COST

Test Case Notes:
    * None

Test Case Examples:
    * Adjustment at maximum allowable limit based on adj_max_cost without needing approval
    * Adjustment at maximum allowable limit - 1 based on adj_max_cost without needing approval
    * Adjustment at maximum allowable limit + 1 based on adj_max_cost needing and detecting needed approval


###############################################################
Test Case Name: BASE-INV-1190 Web Inventory Adjust Case Level UOM
Test Case File: BASE-INV-1190 Web Inventory Adjust Case Level UOM.feature
###############################################################

Test Case Description:
    This test case will Adjust inventory Case quantity below threshold level in the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Create_Inventory"
Test Case Dataset cleanup scripts: "Create_Inventory"

Test Case Input CSV: Test Case Inputs/BASE-INV-1190.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number.
    * prtnum - Need to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * actcod - Used by 'create inventory' command
    * ftpcod - Footprint Code
    * srcloc - Source Location
    * lotnum - Lot Number
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * adj_untqty - adjust inventory quantity (case UOM level) to this value.
    * adjust_approval_reason - reason code used for the inventory adjustment approval
    * web_credentials - Both WMS User and Cycle Credentials named INV_ADJ_USR_COST
    * username - WEB username (INV_ADJ_USR_COST) to perform WEB logout
    * needs_approval - specifies that the adjustment needs approval and Web Dialog should present approval required
    * uomcod - Unit of Measure Code (CASE for this test)

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test requires a WMS User and generated Cycle Credentials for INV_ADJ_USR_COST
    * User must have permission to setup and approve Inventory Adjustments
    * setting adj_thr_unit = 0, adj_thr_cst = 500 in les_usr_ath table for INV_ADJ_USR_COST

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-4010 Mobile Inventory Adjustment Add
Test Case File: BASE-INV-4010 Mobile Inventory Adjustment Add.feature
###############################################################

Test Case Description:
    This test case adds inventory to an empty location or a location that holds more than one pallet via Mobile

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-4010.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Mobile App and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * client_id - Client for the adjustment inventory. Must be a valid client
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for a single load add to a location
    * Locations, parts, clients, reason codes are set up for an Add
    * Data load is not required
    * The location is either empty or can take a new pallet
    * The adjustment approval required will be acknowledged if approval thresholds are configured and adjustment exceeds threshold

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-4020 Mobile Inventory Adjustment Delete
Test Case File: BASE-INV-4020 Mobile Inventory Adjustment Delete.feature
###############################################################

Test Case Description:
    This test case deletes a single load of inventory on the Mobile App

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Inv_Terminal_Adjustment"
Test Case Dataset cleanup scripts: "Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-4020.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Mobile App and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * client_id - Client for the adjustment inventory. Must be a valid client
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * actcod - Activity Code. Used by 'create inventory' command

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for a single load Delete of location containing 1 pallet
    * Locations, parts, clients, reason codes are set up for an Delete
    * Adjustment approval required will be acknowledged if approval thresholds are configured and adjustment exceeds threshold
    * A cycle purge is needed to remove pending adjustment approval when the adjustment exceeds configured threshold

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-4030 Mobile Inventory Adjustment Increase
Test Case File: BASE-INV-4030 Mobile Inventory Adjustment Increase.feature
###############################################################

Test Case Description:
    This test case adds additional quantity to an existing load in a location on the Mobile App

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Inv_Terminal_Adjustment"
Test Case Dataset cleanup scripts: "Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-4030.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Mobile App and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * client_id - Client for the adjustment inventory. Must be a valid client
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * actcod - Activity Code. Used by 'create inventory' command
    * new_qty - Quantity for the increase. Must be greater than untqty

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for adding qty to an existing load in a location
    * Locations, parts, clients, reason codes are set up for adjustment
    * Adjustment approval required will be acknowledged if approval thresholds are configured and adjustment exceeds threshold

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-4040 Mobile Inventory Adjustment Decrease
Test Case File: BASE-INV-4040 Mobile Inventory Adjustment Decrease.feature
###############################################################

Test Case Description:
    This test case decrements inventory on an existing load in a location on the Mobile App

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Inv_Terminal_Adjustment"
Test Case Dataset cleanup scripts: "Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-4040.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Mobile App and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * client_id - Client for the adjustment inventory. Must be a valid client
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * actcod - Activity Code. Used by 'create inventory' command
    * new_qty - Quantity for the increase. Must be greater than untqty

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for adding qty to an existing load in a location
    * Locations, parts, clients, reason codes are set up for adjustment
    * Adjustment approval required will be acknowledged if approval thresholds are configured and adjustment exceeds threshold

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-4050 Mobile Inventory Transfer Directed
Test Case File: BASE-INV-4050 Mobile Inventory Transfer Directed.feature
###############################################################

Test Case Description:
    This test case performs a full inventory move as Directed work in Mobile

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Inv_Transfer"
Test Case Dataset cleanup scripts: "Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-4050.csv

Test Case Required Inputs:
    * srcloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * dstloc - Destination Location. Where we deposit the inventory.
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing. 
      (Note: When lodnum = 'CYC-LOAD-XFER', Cycle will generate a new LPN when processing the dataset. otherwise, it will use the input lodnum.)
    * prtnum - Needs to be a valid part number that is assigned in your system
    * ftpcod - Footprint code for this part. Must be a valid footprint code
    * untqty - Quantity for the dataset to add inventory . Must be a number.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * The Mobile/User used is ineligible for directed work

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-4060 Mobile Inventory Transfer Undirected
Test Case File: BASE-INV-4060 Mobile Inventory Transfer Undirected.feature
###############################################################

Test Case Description:
    This test case performs a full inventory move as Undirected work in the Mobile App

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Inv_Transfer"
Test Case Dataset cleanup scripts: "Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-4060.csv

Test Case Required Inputs:
    * srcloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * dstloc - Destination Location. Where we deposit the inventory.
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing. 
      (Note: When lodnum = 'CYC-LOAD-XFER', Cycle will generate a new LPN when processing the dataset. otherwise, it will use the input lodnum.)
    * prtnum - Needs to be a valid part number that is assigned in your system

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the destination location.
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Process ends with the inventory being moved to assign dstloc

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-4070 Mobile Inventory Status Change
Test Case File: BASE-INV-4070 Mobile Inventory Status Change.feature
###############################################################

Test Case Description:
    This test case changes the status of an inventory identifier in the Mobile App

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Inv_Terminal_Adjustment"
Test Case Dataset cleanup scripts: "Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-4070.csv

Test Case Required Inputs:
    * stoloc - Location where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Mobile App/WEB and datasets processing
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * reacod - System reason code for status change. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * actcod - Activity Code, used by 'create inventory command'
    * new_sts - Status change value
    * new_sts_full_string - Full string representing the new status code (i.e. Damaged Product)
    * new_sts_use_f2 - use F2 to chooose new_sts value from value lookup list

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Locations, parts, clients, reason codes are set up for status change

Test Case Notes:
    * None

Test Case Examples:
    * one representing Available status and then typing new_sts (D) directly into Mobile element
    * one representing Available status and then selecting new_sts (Damaged Product) from F2 generated values list
    * one representing Damaged status and then typing new_sts (A) directly into Mobile element
    * one representing Damaged status and selecting new_sts (Available) from F2 generated values list


###############################################################
Test Case Name: BASE-INV-4080 Mobile Inbound Directed Putaway from Inventory Override
Test Case File: BASE-INV-4080 Mobile Inbound Directed Putaway from Inventory Override.feature
###############################################################

Test Case Description:
    This Test Case generates an LPN to perform a putaway and during operation overrides the putaway location.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Putaway"
Test Case Dataset cleanup scripts: "Putaway"

Test Case Input CSV: Test Case Inputs/BASE-INV-4080.csv

Test Case Required Inputs:
    * wh_id - Warehouse ID
    * trlr_num - Trailer Number
    * inv_num - Inventory number. Can be set to match the trlr_num
    * yard_loc - Yard location
    * invtyp - Inventory type
    * rcvsts - Receive status
    * expqty - Expected quantity for the receipt
    * supnum - Supplier Number
    * rec_loc - Receive location. Where the load will be received
    * uomcod - UOM Code
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Mobile App and datasets processing
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * dep_loc - Deposit location. Where the load will be deposited
    * prtnum - Needs to be a valid part number that is assigned in your system
    * ftpcod - Footprint Code. Must be a valid footprint code for the given prtnum
    * untqty - Quantity being added
    * allocate - Boolean specifying whether to allocate
    * override - Boolean specifying whether there exists an override
    * over_code - Overage code
    * over_dep_loc - Overage deposit location. Where overages will be deposited to (if allowed).
    * actcod - Action code
    * override_f2 - use F2 to display override code during putway and selects one
    * carcod - Carrier code of the trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Receiving can continue whether there are overages or shorts.

Test Case Notes:
    * Regression runs require parts and enough config to deposit inventory into the receive stage location
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Processing ends with the deposit into the over_dep_loc

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-4090 Mobile Inventory Location Display
Test Case File: BASE-INV-4090 Mobile Inventory Location Display.feature
###############################################################

Test Case Description:
    This Test Case will perform an inventory location display given a stoloc in the Mobile App

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "N/A"

Test Case Input CSV: Test Case Inputs/BASE-INV-4090.csv

Test Case Required Inputs:
    * stoloc - A valid storage location in the system
    * generate_screenshot - generate screen shot of location display screen

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * No dataset is used, relies on location in the system

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-4100 Mobile Inventory Display
Test Case File: BASE-INV-4100 Mobile Inventory Display.feature
###############################################################

Test Case Description:
    This Test Case will perform an inventory display given a lodnum and prtnum in the Mobile App

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "N/A"

Test Case Input CSV: Test Case Inputs/BASE-INV-4100.csv

Test Case Required Inputs:
    * stoloc - Location where the inventory display will come from. Must be a valid location in the system
    * lodnum - Load number being displayed. Must be from actual inventory in the system
    * prtnum - A valid part number in the systen relative to the specified lodnum
    * generate_screenshot - generate screen shot of inventory display screen

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * No dataset is used, relies on location and inventory in the system

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-4120 Mobile Inventory Partial Move
Test Case File: BASE-INV-4120 Mobile Inventory Partial Move.feature
###############################################################

Test Case Description:
    This test case will perform a Mobile inventory move of a partial quantity in a load, verify that the move was successful.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Mobile

Test Case Dataset setup scripts: "Inv_Part_Move"
Test Case Dataset cleanup scripts: "Inv_Part_Move"

Test Case Input CSV: Test Case Inputs/BASE-INV-4120.csv

Test Case Required Inputs:
    * srcloc - The source location of the LPN (load number) to be moved. Must be a valid adjustable/storable location in the system. Used in load dataset processing.
    * dstloc - The destination location of the LPN to be moved. Must be a valid adjustable/storable location in the system. 
      Must be a different location than the source location. Used in Mobile App interactions and post move validation.
    * srclod - Load number added by dataset and moved by the main scenario. Can be a fabricated number. Used in dataset processing and in Web interactions.
    * prtnum - This needs to be a valid part number that is defined in your system. The part will use the default client_id defined in Environment.feature. 
      Used in load dataset processing and Mobile App validation.
    * untqty - Quantity for the dataset to add inventory. Must be a number.
    * ftpcod - Footprint code for item to be adjusted. Must be a valid footprint for the item. Used in load dataset processing.
    * move_qty - Qty to be moved from source to destination if moving less than a full load. Used in Mobile App interactions and post move validation.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for moving a single item LPN (load number) from a source location to a destination location
    * Locations, parts, clients, reason codes are set up for an inventory movement
    * If moving a partial quantity, the move_qty variable is populated and is less than the untqty variable used by the load dataset
    * If moving a partial qty, the dstlod variable is populated for the new LPN that is created with the partial move qty

Test Case Notes:
    * None

Test Case Examples:
    * one representing a complete move of inventory
    * one representing a partial move of inventory


###############################################################
Test Case Name: BASE-INV-4130 Mobile Inventory Transfer Invalid
Test Case File: BASE-INV-4130 Mobile Inventory Transfer Invalid.feature
###############################################################

Test Case Description:
    This test case will attempt to move inventory to an invalid location in the Mobile App.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Create_Trailer"
Test Case Dataset cleanup scripts: "Create_Trailer, Inv_Transfer"

Test Case Input CSV: Test Case Inputs/BASE-INV-4130.csv

Test Case Required Inputs:
    * srcloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * dstloc - Destination Location. Where we deposit the inventory. This will be an invalid storage trailer.
    * valid_dstloc - secondary location to complete transfer.
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Mobile App and datasets processing. 
      (Note: When lodnum = 'CYC-LOAD-XFER', Cycle will generate a new LPN when processing the dataset. otherwise, it will use the input lodnum.)
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity for the dataset to add inventory . Must be a number.
    * trlr_id - This will be used as the trailer ID for the trailer
    * carcod - This will be used as the carrier for the shipment
    * yard_loc - Yard Location
    * trlr_cod - Transport Equipment Code

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-4140 Mobile Inventory Transfer Multiple LPNs Undirected
Test Case File: BASE-INV-4140 Mobile Inventory Transfer Multiple LPNs Undirected.feature
###############################################################

Test Case Description:
    This test case performs a full inventory move of multiple LPNs as Undirected work in the Mobile App

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Inv_Transfer"
Test Case Dataset cleanup scripts: "Inv_Transfer"

Test Case Input CSV: Test Case Inputs/BASE-INV-4140.csv

Test Case Required Inputs:
    * srcloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * dstloc - Destination Location. Where we deposit the inventory.
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing. 
      (Note: When lodnum = 'CYC-LOAD-XFER', Cycle will generate a new LPN when processing the dataset. otherwise, it will use the input lodnum.)
    * prtnum_list - Comma separated list of valid part numbers that are assigned in your system and will use to generated inventory
    * untqty - Quantity for the dataset to add inventory . Must be a number. Quantity used for all prtnums in prtnum_list

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Regression runs require parts and enough config to deposit inventory into the destination location.
    * Processing will handle standard LPN flow for blind receipts, over receipts, multi-client, multi-wh, lot tracking, aging, qa directed
    * Process ends with the inventory being moved to assign dstloc

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-4150 Mobile Inventory Partial Move Multiple LPNs
Test Case File: BASE-INV-4150 Mobile Inventory Partial Move Multiple LPNs.feature
###############################################################

Test Case Description:
    This test case will perform a Mobile inventory move of a partial quantity in a load for multiple LPNs, and verify that the moves were successful.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Mobile

Test Case Dataset setup scripts: "Inv_Transfer"
Test Case Dataset cleanup scripts: "Inv_Transfer"

Test Case Input CSV: Test Case Inputs/BASE-INV-4150.csv

Test Case Required Inputs:
    * srcloc - The source location of the LPN (load number) to be moved. Must be a valid adjustable/storable location in the system. Used in load dataset processing.
    * dstloc - The destination location of the LPN to be moved. Must be a valid adjustable/storable location in the system. 
      Must be a different location than the source location. Used in Mobile App interactions and post move validation.
    * srclod - Load number added by dataset and moved by the main scenario. Can be a fabricated number.
    * prtnum_list - Comma separated list of valid part numbers that are assigned in your system and will use to generated
    * untqty - Quantity for the dataset to add inventory . Must be a number. Quantity used for all prtnums in prtnum_list
    * move_qty - Qty to be moved from source to destination if moving less than a full load. Used in Mobile App interactions and post move validation.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for moving a single or multiple item LPN (load number) from a source location to a destination location
    * Locations, parts, clients, reason codes are set up for an inventory movement
    * If moving a partial quantity, the move_qty variable is populated and is less than the untqty variable used by the load dataset
    * If moving a partial qty, the dstlod variable is populated for the new LPN that is created with the partial move qty

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-5000 Flow Inventory Move
Test Case File: BASE-INV-5000 Flow Inventory Move.feature
###############################################################

Test Case Description:
    This test case will utilize the Web to request an inventory movement from a source location to a destination location as directed work, 
    perform the inventory movement on the terminal, and confirm the inventory has been moved to the destination location.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB, Terminal

Test Case Dataset setup scripts: "Flow_Inventory_Move"
Test Case Dataset cleanup scripts: "Flow_Inventory_Move"

Test Case Input CSV: Test Case Inputs/BASE-INV-5000.csv

Test Case Required Inputs:
    * srcloc - The source location of the LPN (load number) to be moved. Must be a valid adjustable/storable location in the system. Used in load dataset processing.
    * dstloc - The destination location of the LPN to be moved. Must be a valid adjustable/storable location in the system. 
      Must be a different location than the source location. Used in Web interactions and post move validation.
    * srclod - Load number added by dataset and moved by the main scenario. Can be a fabricated number. Used in dataset processing and in Web interactions.
    * prtnum - This needs to be a valid part number that is defined in your system. The part will use the default client_id defined in Environment.feature. 
      Used in load dataset processing and Web validation.
    * untqty - Quantity for the dataset to add inventory. Must be a number. Used in load dataset processing and Web validation.
    * ftpcod - Footprint code for item to be adjusted. Must be a valid footprint for the item. Used in load dataset processing.
    * move_qty - Qty to be moved from source to destination if moving less than a full load. Used in Web interactions and post move validation.
    * dstlod - New load number (LPN) for the partial qty if performing a partial qty movement. Used in Web interactions, post move validation, and cleanup dataset processing.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for moving a single item LPN (load number) from a source location to a destination location
    * Locations, parts, clients, reason codes are set up for an inventory movement
    * If moving a partial quantity, the move_qty variable is populated and is less than the untqty variable used by the load dataset
    * If moving a partial qty, the dstlod variable is populated for the new LPN that is created with the partial move qty
    * Sufficient configuration to allow stock transfer
    * The Flow inventory transfer will be not be an immediate move and will utilize RF directed work

Test Case Notes:
    * representing a full move of inventory (LPN)

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-5010 Flow Inventory Adjust With Approval Limits
Test Case File: BASE-INV-5010 Flow Inventory Adjust With Approval Limits.feature
###############################################################

Test Case Description:
    This test case will Adjust Inventory with Approval Limits via terminal

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA, Web

Test Case Dataset setup scripts: "Create_Inventory"
Test Case Dataset cleanup scripts: "Create_Inventory"

Test Case Input CSV: Test Case Inputs/BASE-INV-5010.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * actcod - Used by 'create inventory' command
    * ftpcod - Footprint Code
    * srcloc - Source Location
    * dstloc - Destination Location
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * adjust_approval_reason - reason code used for the inventory adjustment approval
    * adj_qty - adjust inventory quantity to this value
    * web_credentials - Both WMS User and Cycle Credentials named INV_ADJ_USR
    * username - WEB username (INV_ADJ_USR) to perform WEB logout

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test requires a WMS User and generated Cycle Credentials for INV_ADJ_USR
    * User must have permission to setup and approve Inventory Adjustments
    * setting adj_thr_unit = 1, adj_thr_cst = 1 in les_usr_ath table for INV_ADJ_USR

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-6000 Flow Mobile Inventory Move
Test Case File: BASE-INV-6000 Flow Mobile Inventory Move.feature
###############################################################

Test Case Description:
    This test case will utilize the Web to request an inventory movement from a source location to a destination location as directed work, 
    perform the inventory movement in the Mobile App, and confirm the inventory has been moved to the destination location.

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB, Mobile

Test Case Dataset setup scripts: "Flow_Inventory_Move"
Test Case Dataset cleanup scripts: "Flow_Inventory_Move"

Test Case Input CSV: Test Case Inputs/BASE-INV-6000.csv

Test Case Required Inputs:
    * srcloc - The source location of the LPN (load number) to be moved. Must be a valid adjustable/storable location in the system. Used in load dataset processing.
    * dstloc - The destination location of the LPN to be moved. Must be a valid adjustable/storable location in the system. 
      Must be a different location than the source location. Used in Web interactions and post move validation.
    * srclod - Load number added by dataset and moved by the main scenario. Can be a fabricated number. Used in dataset processing and in Web interactions.
    * prtnum - This needs to be a valid part number that is defined in your system. The part will use the default client_id defined in Environment.feature. 
      Used in load dataset processing and Web validation.
    * untqty - Quantity for the dataset to add inventory. Must be a number. Used in load dataset processing and Web validation.
    * ftpcod - Footprint code for item to be adjusted. Must be a valid footprint for the item. Used in load dataset processing.
    * move_qty - Qty to be moved from source to destination if moving less than a full load. Used in Web interactions and post move validation.
    * dstlod - New load number (LPN) for the partial qty if performing a partial qty movement. Used in Web interactions, post move validation, and cleanup dataset processing.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for moving a single item LPN (load number) from a source location to a destination location
    * Locations, parts, clients, reason codes are set up for an inventory movement
    * If moving a partial quantity, the move_qty variable is populated and is less than the untqty variable used by the load dataset
    * If moving a partial qty, the dstlod variable is populated for the new LPN that is created with the partial move qty
    * Sufficient configuration to allow stock transfer
    * The Flow inventory transfer will be not be an immediate move and will utilize directed work

Test Case Notes:
    * representing a full move of inventory (LPN)

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-6010 Flow Mobile Inventory Adjust With Approval Limits
Test Case File: BASE-INV-6010 Flow Mobile Inventory Adjust With Approval Limits.feature
###############################################################

Test Case Description:
    This test case will Adjust Inventory in Mobile App and Approve in the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB, Mobile

Test Case Dataset setup scripts: "Create_Inventory"
Test Case Dataset cleanup scripts: "Create_Inventory"

Test Case Input CSV: Test Case Inputs/BASE-INV-6010.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * actcod - Used by 'create inventory' command
    * ftpcod - Footprint Code
    * srcloc - Source Location
    * dstloc - Destination Location
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * adjust_approval_reason - reason code used for the inventory adjustment approval
    * adj_qty - adjust inventory quantity to this value
    * web_credentials - Both WMS User and Cycle Credentials named INV_ADJ_USR
    * username - WEB username (INV_ADJ_USR) to perform WEB logout

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test requires a WMS User and generated Cycle Credentials for INV_ADJ_USR
    * User must have permission to setup and approve Inventory Adjustments
    * setting adj_thr_unit = 1, adj_thr_cst = 1 in les_usr_ath table for INV_ADJ_USR

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-INV-8020 API Remove Inventory
Test Case File: BASE-INV-8020 API Remove Inventory.feature
###############################################################

Test Case Description:
    This test case deletes a single load of inventory using the API

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Inventory

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: API, MOCA

Test Case Dataset setup scripts: "Inv_Terminal_Adjustment"
Test Case Dataset cleanup scripts: "Inv_Terminal_Adjustment"

Test Case Input CSV: Test Case Inputs/BASE-INV-8020.csv

Test Case Required Inputs:
    * stoloc - Where the adjustment will take place. Must be a valid adjustable location in the system
    * lodnum - Load number being adjusted in. Can be a fabricated number. Used in Terminal and datasets processing.
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added
    * reacod - System reason code for adjustment. Must exist as a valid reason code in the system
    * invsts - Inventory status. This needs to be a valid inventory status in your system
    * lotnum - Lot Number. This needs to be a valid lot/lot format based on config
    * adjref1 - Adjustment reference 1 (defaults to stoloc value)
    * adjref2 - Adjustment reference 2 (defaults to prtnum value)
    * actcod - Activity Code. Used by 'create inventory' command

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * This test case is for a single load Delete of location containing 1 pallet
    * Locations, parts, clients, reason codes are set up for an Delete
    * Adjustment approval required will be acknowledged if approval thresholds are configured and adjustment exceeds threshold
    * A cycle purge is needed to remove pending adjustment approval when the adjustment exceeds configured threshold

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RPL-1010 Web Inventory Generate Triggered Replenishment
Test Case File: BASE-RPL-1010 Web Inventory Generate Triggered Replenishment.feature
###############################################################

Test Case Description:
    This test case will generate a triggered replenishment for a location in the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Replenishment

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Triggered_Replen"
Test Case Dataset cleanup scripts: "Triggered_Replen"

Test Case Input CSV: Test Case Inputs/BASE-RPL-1010.csv

Test Case Required Inputs:
    * client_id - Needs to be a valid client id that is assigned in your system
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added to caslod
    * invsts_prg - Needs to be a valid invsts_prg configured in the system
    * caslod - This will be used as the load number that will be used for the replenishment
    * srcloc - This will be used as the location that will be used for the replenishment
    * adjrea - This will be used as the adjustment reason when creating load to replen
    * adjact - This will be used as the adjustment activity code when creating load to replen
    * dst_untqty - This will be used as the qty to adjust in to fulfill 20% of location capacity
    * dst_caslod - This will be used as the load number that will be used to create inventory in repl_loc
    * repl_loc - This will be the location used to generate a top-off replenishment
    * reacodfull - System reason code for adjustment. Must exist as a valid reason code in the system. 
      This Web readable value (this input value) is translated to the system code value for use in the dataset

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * The warehouse is configured for Triggered Replenishment

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RPL-1030 Web Inventory Generate Top-Off Replenishment
Test Case File: BASE-RPL-1030 Web Inventory Generate Top-Off Replenishment.feature
###############################################################

Test Case Description:
    This test case will generate a top-off replenishment for a location in the Web

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Replenishment

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Top_Off_Replen"
Test Case Dataset cleanup scripts: "Top_Off_Replen"

Test Case Input CSV: Test Case Inputs/BASE-RPL-1030.csv

Test Case Required Inputs:
    * client_id - Needs to be a valid client id that is assigned in your system
    * prtnum - Needs to be a valid part number that is assigned in your system
    * untqty - Quantity being added to caslod
    * invsts_prg - Needs to be a valid invsts_prg configured in the system
    * caslod - This will be used as the load number that will be used for the replenishment
    * srcloc - This will be used as the location that will be used for the replenishment
    * adjrea - This will be used as the adjustment reason when creating load to replen
    * adjact - This will be used as the adjustment activity code when creating load to replen
    * repl_loc - This will be the location used to generate a top-off replenishment

Test Case Optional Inputs:
    * validate_sucess - If YES validates success message in web
    * retry_replenishment - If YES try to generate top-off replenishment for a pending replenishment location in web

Test Case Assumptions:
    * The warehouse is configured for Top-off Replenishment

Test Case Notes:
    * None

Test Case Examples:
    * Successful Top Off Replenishment from reserve to location
    * Failed Top Off Replenishment with "failed to generate replenishments" message


###############################################################
Test Case Name: BASE-BLD-0010 Terminal Outbound Pallet Building Undirected
Test Case File: BASE-BLD-0010 Terminal Outbound Pallet Building Undirected.feature
###############################################################

Test Case Description:
    This Test Case performs terminal undirected pallet building in the Terminal

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Pallet Building

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Pallet_Building_Undirected"
Test Case Dataset cleanup scripts: "Pallet_Building_Undirected"

Test Case Input CSV: Datasets/Test Case Inputs/BASE-PCK-0010.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton/ list pick data
    * ship_id - This will be used as the ship_id when creating carton/ list pick data
    * adr_id - This will be used as the adr_id when creating carton/ list pick data
    * cstnum - This will be used as the cstnum when creating carton/ list pick data
    * carcod - This will be used as the carrier for the shipment when creating carton/ list pick data - this needs to be a 
      valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton/ list pick data - this needs to be 
      a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton/ list pick data - this needs to be a 
      valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - 
      there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton/ list pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton/ list pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton/ list pick data
    * dock - This will be used as the dock location for the trailer when creating carton/ list pick data
    * pck_dstloc - This will be used as the location the order is picked to, this number must be a valid location that can be picked to in the 
      warehouse such as an RDT location
    * pb_stage_loc - Pallet building staging location. This is the location inventory is deposited to before pallet building. Inventory in this 
      location is eligible for pallet building.

Test Case Optional Inputs:
    * pb_max_carton_count - This variable can be used to set a maximum number of cartons to pallet build onto a given pallet. 
      Once the max number of cartons has been added to the pallet, the feature will close the pallet. If this value is not defined, 
      or if the number of cartons to pallet build is less than this value, then the system will automatically close the pallet once all cases have been added to the pallet

Test Case Assumptions:
    * Pass the pallet building staging location where cartons will be built into a pallet
    * System is configured to have movement paths that will force a pallet building hop before final staging for sub load level picks.
    * There is sufficient inventory in the correct location (derived in accordance with pick zone and pick method to create sub load level pick)
      to fulfill the order that is created with the dataset.

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-BLD-4010 Mobile Outbound Pallet Building Undirected
Test Case File: BASE-BLD-4010 Mobile Outbound Pallet Building Undirected.feature
###############################################################

Test Case Description:
    This Test Case performs Mobile App undirected pallet building

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Pallet Building

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Pallet_Building_Undirected"
Test Case Dataset cleanup scripts: "Pallet_Building_Undirected"

Test Case Input CSV: Datasets/Test Case Inputs/BASE-PCK-4010.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton/ list pick data
    * ship_id - This will be used as the ship_id when creating carton/ list pick data
    * adr_id - This will be used as the adr_id when creating carton/ list pick data
    * cstnum - This will be used as the cstnum when creating carton/ list pick data
    * carcod - This will be used as the carrier for the shipment when creating carton/ list pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton/ list pick data - this needs to be a valid service level
      for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton/ list pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable
      and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton/ list pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton/ list pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton/ list pick data
    * dock - This will be used as the dock location for the trailer when creating carton/ list pick data
    * pck_dstloc - This will be used as the location the order is picked to, this number must be a valid location that can be picked to in the warehouse
      such as an RDT location
    * pb_stage_loc - Pallet building staging location. This is the location inventory is deposited to before pallet building. Inventory in this location
      is eligible for pallet building.

Test Case Optional Inputs:
    * pb_max_carton_count - This variable can be used to set a maximum number of cartons to pallet build onto a given pallet. Once the max number of cartons
      has been added to the pallet, the feature will close the pallet. If this value is not defined, or if the number of cartons to pallet build is less
      than this value, then the system will automatically close the pallet once all cases have been added to the pallet

Test Case Assumptions:
    * Pass the pallet building staging location where cartons will be built into a pallet
    * System is configured to have movement paths that will force a pallet building hop before final staging for sub load level picks.
    * There is sufficient inventory in the correct location (derived in accordance with pick zone and pick method to create sub load level pick) to 
      fulfill the order that is created with the dataset.

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-LDG-0010 Terminal Outbound Loading LTL Directed
Test Case File: BASE-LDG-0010 Terminal Outbound Loading LTL Directed.feature
###############################################################

Test Case Description:
    This test case is Standard Directed LTL Loading using the terminal

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Terminal

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-LDG-0010.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. 
      There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock_door - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse
    * pck_dstloc - This will be used as the location the order is picked to The location must be a valid location that can be 
      picked to in the warehouse such as an RDT location

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-LDG-0020 Terminal Outbound Loading LTL Undirected
Test Case File: BASE-LDG-0020 Terminal Outbound Loading LTL Undirected.feature
###############################################################

Test Case Description:
    This test case is Standard LTL Loading - Undirected using the terminal

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Terminal

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-LDG-0020.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. 
      There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock_door - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse
    * pck_dstloc - This will be used as the location the order is picked to The location must be a valid location that can be picked to in the warehouse such as an RDT location

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Inventory in staging lanes ready to load to the trailers
    * A checked in trailer with the same carrier code.

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-LDG-0030 Terminal Outbound Loading TL Directed
Test Case File: BASE-LDG-0030 Terminal Outbound Loading TL Directed.feature
###############################################################

Test Case Description:
    This test case is Standard Directed TL Loading using the Terminal

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Terminal

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-LDG-0030.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. 
      There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock_door - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse
    * pck_dstloc - This will be used as the location the order is picked to The location must be a valid location that can be picked to in the warehouse such as an RDT location

Test Case Optional Inputs:
    * bol_num - You can give the feature a bol_num variable, and it will enter that as the BOL Number
    * pro_num - You can give the feature a pro_num variable, and it will enter that as the PRO Number
    * seal_num - You can give the feature a seal_num variable, and it will enter that as the Seal Number
    * trlr_num - You can give the feature a trlr_num variable, and it will only load that trailer number

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-LDG-0040 Terminal Outbound Loading TL Undirected
Test Case File: BASE-LDG-0040 Terminal Outbound Loading TL Undirected.feature
###############################################################

Test Case Description:
    This test case is Standard Undirected TL Loading using the terminal

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Terminal

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-LDG-0040.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. 
      There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock_door - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse
    * pck_dstloc - This will be used as the location the order is picked to The location must be a valid location that can be picked to in the warehouse such as an RDT location

Test Case Optional Inputs:
    * bol_num - You can give the feature a bol_num variable, and it will enter that as the BOL Number
    * pro_num - You can give the feature a pro_num variable, and it will enter that as the PRO Number
    * seal_num - You can give the feature a seal_num variable, and it will enter that as the Seal Number
    * trlr_num - You can give the feature a trlr_num variable, and it will only load that trailer number

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-LDG-4010 Mobile Outbound Loading LTL Directed
Test Case File: BASE-LDG-4010 Mobile Outbound Loading LTL Directed.feature
###############################################################

Test Case Description:
    This test case is Standard Directed LTL Loading using the Mobile App

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Mobile

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-LDG-4010.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. 
      There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock_door - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse
    * pck_dstloc - This will be used as the location the order is picked to The location must be a valid location that can be picked to in the warehouse such as an RDT location

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-LDG-4020 Mobile Outbound Loading LTL Undirected
Test Case File: BASE-LDG-4020 Mobile Outbound Loading LTL Undirected.feature
###############################################################

Test Case Description:
    This test case is Standard LTL Loading - Undirected using the Mobile App

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Mobile

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-LDG-4020.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. 
      There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock_door - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse
    * pck_dstloc - This will be used as the location the order is picked to The location must be a valid location that can be picked to in the warehouse such as an RDT location

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Inventory in staging lanes ready to load to the trailers
    * A checked in trailer with the same carrier code.

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-LDG-4030 Mobile Outbound Loading TL Directed
Test Case File: BASE-LDG-4030 Mobile Outbound Loading TL Directed.feature
###############################################################

Test Case Description:
    This test case is Standard Directed TL Loading using the Mobile App

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Mobile

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-LDG-4030.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. 
      There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock_door - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse
    * pck_dstloc - This will be used as the location the order is picked to The location must be a valid location that can be picked to in the warehouse such as an RDT location

Test Case Optional Inputs:
    * bol_num - You can give the feature a bol_num variable, and it will enter that as the BOL Number
    * pro_num - You can give the feature a pro_num variable, and it will enter that as the PRO Number
    * seal_num - You can give the feature a seal_num variable, and it will enter that as the Seal Number
    * trlr_num - You can give the feature a trlr_num variable, and it will only load that trailer number

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-LDG-4040 Mobile Outbound Loading TL Undirected
Test Case File: BASE-LDG-4040 Mobile Outbound Loading TL Undirected.feature
###############################################################

Test Case Description:
    This test case is Standard Undirected TL Loading using the Mobile App

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Mobile

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-LDG-4040.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock_door - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse
    * pck_dstloc - This will be used as the location the order is picked to The location must be a valid location that can be picked to in the warehouse such as an RDT location

Test Case Optional Inputs:
    * bol_num - You can give the feature a bol_num variable, and it will enter that as the BOL Number
    * pro_num - You can give the feature a pro_num variable, and it will enter that as the PRO Number
    * seal_num - You can give the feature a seal_num variable, and it will enter that as the Seal Number
    * trlr_num - You can give the feature a trlr_num variable, and it will only load that trailer number

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-LDG-5000 Flow Outbound Audit
Test Case File: BASE-LDG-5000 Flow Outbound Audit.feature
###############################################################

Test Case Description:
    This test case performs an outbound inventory audit in the terminal. If a discrepancy is found, a re-count will occur, followed by a release of hold completed in the Web. 
    It will also check the RF Outbound audit history and load, close, dispatch the trailer.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Terminal, Web

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-LDG-5000.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * audqty - Quantity to use when asked during outbound audit
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock_door - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse
    * discrepancy_action - if an audit discrepancy is found, what action to take (valid values: fail | recount)
    * reacod - reason code (Web string) to provide when releasing hold
    * invsts - inventory status (Web string) to provide when releasing hold

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * No discrepancy found, untqty is equal to audqty 
    * Discrepancy is found, untqty is NOT equal to audqty


###############################################################
Test Case Name: BASE-LDG-6000 Flow Mobile Outbound Audit
Test Case File: BASE-LDG-6000 Flow Mobile Outbound Audit.feature
###############################################################

Test Case Description:
    This test case performs an outbound inventory audit in the Mobile App. If a discrepancy is found, a re-count will occur, followed by a release of hold completed in the Web. 
    It will also check the RF Outbound audit history and loads, closes, and dispatches the trailer.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Mobile, Web

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-LDG-6000.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. 
      There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * audqty - Quantity to use when asked during outbound audit
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock_door - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse
    * discrepancy_action - if an audit discrepancy is found, what action to take (valid values: fail | recount)
    * reacod - reason code (Web string) to provide when releasing hold
    * invsts - inventory status (Web string) to provide when releasing hold

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * No discrepancy found, untqty is equal to audqty 
    * Discrepancy is found, untqty is NOT equal to audqty


###############################################################
Test Case Name: BASE-PCK-0010 Terminal Outbound Carton Picking Undirected
Test Case File: BASE-PCK-0010 Terminal Outbound Carton Picking Undirected.feature
###############################################################

Test Case Description:
    This Test Case performs Terminal Undirected Carton Picking

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Allocate_Carton_Picks"
Test Case Dataset cleanup scripts: "Allocate_Carton_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-0010.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable
      and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * cancel_pick_flag - This determines if cancelling and reallocating picks inline

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Pass the order number and all cartons for that order will be included in a batch for Undirected Carton Picking
    * There is sufficient inventory in the warehouse to allocate a carton pick of the assigned prtnum if using the dataset
    * If picking serialized inventory the requirements for serial picking detailed in Serialization Utilities.feature are met

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * Carton Picking Undirected work with CRADLE_TO_GRAVE serialization
    * Carton Picking Undirected work with OUTCAP_ONLY serialization
    * Carton Picking Undirected work with no serialization


###############################################################
Test Case Name: BASE-PCK-0020 Terminal Outbound Carton Picking Undirected Cancel and Reallocate
Test Case File: BASE-PCK-0020 Terminal Outbound Carton Picking Undirected Cancel and Reallocate.feature
###############################################################

Test Case Description:
    This test case performs Terminal Undirected Carton Picking and a Cancel Pick

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Allocate_Carton_Picks"
Test Case Dataset cleanup scripts: "Allocate_Carton_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-0020.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable
      and pickable inventory of this item in the warehouse
    * unqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * cancel_pick_flag - This determines if cancelling and reallocating picks inline
    * cancel_code - This is the WMS cancel code used for cancelling picks

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Pass the Order Number in and all cartons for that order will be batched for Undirected Carton Picking.
    * Will cancel and reallocate the first carton pick and continue picking the remaining carton picks.
    * There is sufficient inventory in the warehouse to allocate a carton pick of the assigned prtnum.
    * If picking serialized inventory, the requirements for serial picking detailed in Serialization Utilities.feature are met.

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-PCK-0030 Terminal Outbound Pallet Picking Directed
Test Case File: BASE-PCK-0030 Terminal Outbound Pallet Picking Directed.feature
###############################################################

Test Case Description:
    This Test Case performs Terminal Directed Pallet Picking

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Allocate_Pallet_Picks"
Test Case Dataset cleanup scripts: "Allocate_Pallet_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-0030.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable
      and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * There is sufficient inventory in the warehouse to allocate a Pallet pick of the assigned prtnum if using the dataset
    * If picking serialized inventory the requirements for serial picking detailed in Serialization_Utilities.feature are met

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-PCK-0040 Terminal Outbound Pallet Picking Cancel Directed
Test Case File: BASE-PCK-0040 Terminal Outbound Pallet Picking Cancel Directed.feature
###############################################################

Test Case Description:
    This test case performs Terminal Outbound Pallet Picking Cancel Directed

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Allocate_Pallet_Picks"
Test Case Dataset cleanup scripts: "Allocate_Pallet_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-0040.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable
      and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * There is sufficient inventory in the warehouse to allocate a carton pick of the assigned prtnum.
    * If picking serialized inventory, the requirements for serial picking detailed in Terminal Serialization Utilities.feature are met.

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-PCK-0050 Terminal Outbound List Pick Case To Pallet Directed Cancel and Reallocate
Test Case File: BASE-PCK-0050 Terminal Outbound List Pick Case To Pallet Directed Cancel and Reallocate.feature
###############################################################

Test Case Description:
    This Test Case performs Terminal Outbound List Pick Case To Pallet Directed Cancel and Reallocate

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Allocate_List_Picks"
Test Case Dataset cleanup scripts: "Allocate_List_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-0050.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable
      and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * bckflg - This is what the backorder flag will be set as on the order line. It defaults to 0 if nothing is passed in

Test Case Optional Inputs:
    * cancel_pick_flag - This determines if cancelling and reallocating picks inline (default is FALSE)
    * cancod - Cancel Code controls if picks are reallocated during a cancel (C-N-R Cancel not reallocation)

Test Case Assumptions:
    * There is sufficient inventory in the warehouse to allocate a List pick of the assigned prtnum if using the dataset

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-PCK-0060 Terminal Outbound List Pick Case To Pallet Directed
Test Case File: BASE-PCK-0060 Terminal Outbound List Pick Case To Pallet Directed.feature
###############################################################

Test Case Description:
    This Test Case performs Terminal Directed List Pick Case To Pallet

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Allocate_List_Picks"
Test Case Dataset cleanup scripts: "Allocate_List_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-0060.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable
      and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * bckflg - This is what the backorder flag will be set as on the order line. It defaults to 0 if nothing is passed in
    * cancel_and_reallocate - This determines if cancelling and reallocating picks inline

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * There is sufficient inventory in the warehouse to allocate a List pick of the assigned prtnum if using the dataset

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * List Pick Case To Pallet Direct work with CRADLE_TO_GRAVE serialization
    * List Pick Case To Pallet Direct work with OUTCAP_ONLY serialization
    * List Pick Case To Pallet Direct work with no serialization


###############################################################
Test Case Name: BASE-PCK-0070 Terminal Outbound Pallet Picking Undirected
Test Case File: BASE-PCK-0070 Terminal Outbound Pallet Picking Undirected.feature
###############################################################

Test Case Description:
    This Test Case performs Terminal Outbound Pallet Picking Undirected

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Allocate_Pallet_Picks"
Test Case Dataset cleanup scripts: "Allocate_Pallet_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-0070.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable
      and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * oprcod - This will be used to validate the type of operation performed

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * There is sufficient inventory in the warehouse to allocate a Pallet pick of the assigned prtnum if using the dataset

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-PCK-0080 Terminal Outbound Unpicking
Test Case File: BASE-PCK-0080 Terminal Outbound Unpicking.feature
###############################################################

Test Case Description:
    This test case performs terminal Unpicking functions

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Unpicking"
Test Case Dataset cleanup scripts: "Unpicking"

Test Case Input CSV: Test Case Inputs/BASE-PCK-0080.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable
      and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * pck_dstloc - This will be used as the location the order is picked to and must be a valid location that can be picked to in the warehouse
    * pck_lodnum - This will be used as the load number the dataset order is picked onto and will be the load we unpick
    * unpick_to_lodnum - When unpicking partial qty, we will unpick the item to this destination lodnum. Override to "" to unpick to a system generated load number
    * unpick_partial - if set to Y then we will unpick a partial quantity, otherwise the entire load will be unpicked
    * unpick_qty - quantity to unpick, this quantity is used if unpick_partial = Y, if unpick_partial != Y then the entire lodnum will be unpicked
    * cancod - cancel code to use when unpicking, this should be a valid cancel code configured in the system
    * putaway_method - Terminal Option for putaway 1) Directed 2) Sorted 3) Undirected
    * dep_loc - Deposit location for putaway after unpick
    * validate_loc - Location to be validated for Directed putaway

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Load, part, client, qty, uomcod reason code are configured for unpicking
    * The instance contains sufficient inventory for allocation

Test Case Notes:
    * If not using the dataset, values must be defined for pck_lodnum, and prtnum/unpick_qty (if unpicking_partial is set to Y)
    * By default, this Test Case uses Undirected Putaway. Additional variables may be added to the CSV to support Directed Putaway

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-PCK-0090 Terminal Outbound List Pick Case To Pallet Undirected
Test Case File: BASE-PCK-0090 Terminal Outbound List Pick Case To Pallet Undirected.feature
###############################################################

Test Case Description:
    This Test Case performs Terminal Directed List Pick Case To Pallet

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Allocate_List_Picks"
Test Case Dataset cleanup scripts: "Allocate_List_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-0090.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * bckflg - This is what the backorder flag will be set as on the order line. It defaults to 0 if nothing is passed in
    * cancel_no_reallocate - This determines if cancelling and reallocating picks inline
    * oprcod - This will be used to validate the type of operation performed

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * There is sufficient inventory in the warehouse to allocate a List pick of the assigned prtnum if using the dataset

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * List Pick Case To Pallet Undirected work with CRADLE_TO_GRAVE serialization
    * List Pick Case To Pallet Undirected work with OUTCAP_ONLY serialization
    * List Pick Case To Pallet Undirected work with no serialization


###############################################################
Test Case Name: BASE-PCK-0100 Terminal Outbound List Pick Short Ship With Reship Directed
Test Case File: BASE-PCK-0100 Terminal Outbound List Pick Short Ship With Reship Directed.feature
###############################################################

Test Case Description:
    This Test Case performs Terminal Outbound List Pick Short Ship With Reship Directed

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Allocate_List_Picks"
Test Case Dataset cleanup scripts: "Allocate_List_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-0100.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * car_move_id - This will be used as the Carrier Move Id
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * trlr_num - Transport Equipment Number used as User identification for the trailer.
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * dock_door - Physical location in the dock location where the trailer is located.
    * oprcod - This will be used to validate the type of operation performed
    * bckflg - This is what the backorder flag will be set as on the order line. It defaults to 0 if nothing is passed in
    * short_pick_flag - The short_pick variable to determine if we should be short picking or not
    * short_pick_qty - The short_pick_qty variable to determine amount of the qty to pick and short ship
    * cancel_code - The cancel code entered after the short pick (for this case is should be C-N-R)
    * create_order - The create_order variable to determine if we should be create_order or not
    * detail_file_name - csv file that contains variables for reship and cleanup
    * pck_dstloc - This will be used as the location the order is picked to
    * trac_ref - tracking reference for dispatch information
    * driver_lic - drivers license for dispatch information
    * driver_nam - drivers name for dispatch information

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * There is sufficient inventory in the warehouse to allocate a List pick of the assigned prtnum if using the dataset

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-PCK-0110 Terminal Count Near Zero
Test Case File: BASE-PCK-0110 Terminal Count Near Zero.feature
###############################################################

Test Case Description:
    This Test Case performs Terminal Directed Pallet Picking in a location that has count near zero enabled - and then performs 
    count near zero with different scenarios 
    (i) Pick and count near zero - no mismatch 
    (ii) Pick and count near zero - mismatch and match 
    (iii) Pick and count near zero - mismatch and mismatch - generate audit

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Count_Near_Zero"
Test Case Dataset cleanup scripts: "Count_Near_Zero"

Test Case Input CSV: Test Case Inputs/BASE-PCK-0110.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * srcloc - The location where the picking and count near zero operations will occur

Test Case Optional Inputs:
    * match_count - variable that will drive method of counting.

Test Case Assumptions:
    * The location specified for this test case is configured to allow pallet picks and has sufficient configuration to generate count near zero. 
      Count near zero in this case will be triggered when there is less than 550 units of a product in the count near zero count zone.
    * There is sufficient configuration to allow the user to perform pallet picking and count near zero through directed work.
    * This test case will perform pallet picking for a non-serialized part followed by count near zero.

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * Pallet Pick with Count Near Zero Mode REGULAR
    * Pallet Pick with Count Near Zero Mode REMATCH
    * Pallet Pick with Count Near Zero Mode MISMATCH


###############################################################
Test Case Name: BASE-PCK-0120 Terminal List Pick Equipment Full Set Down Resume
Test Case File: BASE-PCK-0120 Terminal List Pick Equipment Full Set Down Resume.feature
###############################################################

Test Case Description:
    This Test Case performs Terminal List Pick with Equipment Full and Set Down Resume options

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Allocate_Multi_Line_List_Picks"
Test Case Dataset cleanup scripts: "Allocate_Multi_Line_List_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-0120.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * prtnum_ln2 - This will be used as the prtnum for the second order line in the order - this needs to be a valid prtnum configured in the system - there must to be sufficient
      allocatable and pickable inventory of this item in the warehouse
    * untqty_ln2 - This will be used as the order qty for the second order line in the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * bckflg - This is what the backorder flag will be set as on the order line. It defaults to 0 if nothing is passed in
    * cancel_and_reallocate - This determines if cancelling and reallocating picks inline
    * lpck_action - can take VEHICLE_FULL or SET_DOWN as inputs depending.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * There is sufficient inventory in the warehouse to allocate a List pick of the assigned prtnums if using the dataset

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system. down between picks - this triggers deposit of the first pick to staging
      and releasing the other pick under a new list ID. There is one serialized and one non-serialized item in the order picks - this triggers setting down the pallet to a PND
      location, resuming the list pick through directed work by picking up the pallet that was set down. There is one serialized and one non-serialized item in the order

Test Case Examples:
    * List Pick Case To Pallet Direct work with Equipment Full set    
    * List Pick Case To Pallet Direct work with Set Down between      


###############################################################
Test Case Name: BASE-PCK-4010 Mobile Outbound Carton Picking Undirected
Test Case File: BASE-PCK-4010 Mobile Outbound Carton Picking Undirected.feature
###############################################################

Test Case Description:
    This Test Case performs Mobile App Undirected Carton Picking

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Allocate_Carton_Picks"
Test Case Dataset cleanup scripts: "Allocate_Carton_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-4010.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * cancel_pick_flag - This determines if cancelling and reallocating picks inline

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Pass the order number and all cartons for that order will be included in a batch for Undirected Carton Picking
    * There is sufficient inventory in the warehouse to allocate a carton pick of the assigned prtnum if using the dataset
    * If picking serialized inventory the requirements for serial picking detailed in Serialization Utilities.feature are met

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * Carton Picking Undirected work with CRADLE_TO_GRAVE serialization
    * Carton Picking Undirected work with OUTCAP_ONLY serialization
    * Carton Picking Undirected work with no serialization


###############################################################
Test Case Name: BASE-PCK-4020 Mobile Outbound Carton Picking Undirected Cancel and Reallocate
Test Case File: BASE-PCK-4020 Mobile Outbound Carton Picking Undirected and Reallocate.feature
###############################################################

Test Case Description:
    This test case performs Mobile App Undirected Carton Picking and a Cancel Pick

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Allocate_Carton_Picks"
Test Case Dataset cleanup scripts: "Allocate_Carton_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-4020.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * unqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * cancel_pick_flag - This determines if cancelling and reallocating picks inline
    * cancel_code - This is the WMS cancel code used for cancelling picks

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Pass the Order Number in and all cartons for that order will be batched for Undirected Carton Picking.
    * Will cancel and reallocate the first carton pick and continue picking the remaining carton picks.
    * There is sufficient inventory in the warehouse to allocate a carton pick of the assigned prtnum.
    * If picking serialized inventory, the requirements for serial picking detailed in Serialization Utilities.feature are met.

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-PCK-4030 Mobile Outbound Pallet Picking Directed
Test Case File: BASE-PCK-4030 Mobile Outbound Pallet Picking Directed.feature
###############################################################

Test Case Description:
    This Test Case performs Mobile App Directed Pallet Picking

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Allocate_Pallet_Picks"
Test Case Dataset cleanup scripts: "Allocate_Pallet_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-4030.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * There is sufficient inventory in the warehouse to allocate a Pallet pick of the assigned prtnum if using the dataset
    * If picking serialized inventory the requirements for serial picking detailed in Serialization_Utilities.feature are met

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-PCK-4040 Mobile Outbound Pallet Picking Cancel and Reallocate Directed
Test Case File: BASE-PCK-4040 Mobile Outbound Pallet Picking Cancel and Reallocate Directed.feature
###############################################################

Test Case Description:
    This test case performs Mobile App Outbound Pallet Picking Cancel and Reallocate Directed work

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Allocate_Pallet_Picks"
Test Case Dataset cleanup scripts: "Allocate_Pallet_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-4040.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * There is sufficient inventory in the warehouse to allocate a carton pick of the assigned prtnum.
    * If picking serialized inventory, the requirements for serial picking detailed in Serialization_Utilities.feature are met.

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-PCK-4050 Mobile Outbound List Pick Case To Pallet Directed Cancel and Reallocate
Test Case File: BASE-PCK-4050 Mobile Outbound List Pick Case To Pallet Directed Cancel and Reallocate.feature
###############################################################

Test Case Description:
    This Test Case performs Mobile App Outbound List Pick Case To Pallet Directed Cancel and Reallocate

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Allocate_List_Picks"
Test Case Dataset cleanup scripts: "Allocate_List_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-4050.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * bckflg - This is what the backorder flag will be set as on the order line. It defaults to 0 if nothing is passed in

Test Case Optional Inputs:
    * cancel_pick_flag - This determines if cancelling and reallocating picks inline (default is FALSE)
    * cancod - Cancel Code controls if picks are reallocated during a cancel (C-N-R Cancel not reallocation)

Test Case Assumptions:
    * There is sufficient inventory in the warehouse to allocate a List pick of the assigned prtnum if using the dataset

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-PCK-4060 Mobile Outbound List Pick Case To Pallet Directed
Test Case File: BASE-PCK-4060 Mobile Outbound List Pick Case To Pallet Directed.feature
###############################################################

Test Case Description:
    This Test Case performs Mobile App Directed List Pick Case To Pallet

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Allocate_List_Picks"
Test Case Dataset cleanup scripts: "Allocate_List_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-4060.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * bckflg - This is what the backorder flag will be set as on the order line. It defaults to 0 if nothing is passed in
    * cancel_and_reallocate - This determines if cancelling and reallocating picks inline

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * There is sufficient inventory in the warehouse to allocate a List pick of the assigned prtnum if using the dataset

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * List Pick Case To Pallet Direct work with CRADLE_TO_GRAVE serialization
    * List Pick Case To Pallet Direct work with OUTCAP_ONLY serialization
    * List Pick Case To Pallet Direct work with no serialization


###############################################################
Test Case Name: BASE-PCK-4070 Mobile Outbound Pallet Picking Undirected
Test Case File: BASE-PCK-4070 Mobile Outbound Pallet Picking Undirected.feature
###############################################################

Test Case Description:
    This Test Case performs Mobile App Outbound Pallet Picking Undirected

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Allocate_Pallet_Picks"
Test Case Dataset cleanup scripts: "Allocate_Pallet_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-4070.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * oprcod - This will be used to validate the type of operation performed

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * There is sufficient inventory in the warehouse to allocate a Pallet pick of the assigned prtnum if using the dataset

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-PCK-4080 Mobile Outbound Unpicking
Test Case File: BASE-PCK-4080 Mobile Outbound Unpicking.feature
###############################################################

Test Case Description:
    This test case performs Mobile App Unpicking functions

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Unpicking"
Test Case Dataset cleanup scripts: "Unpicking"

Test Case Input CSV: Test Case Inputs/BASE-PCK-4080.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * pck_dstloc - This will be used as the location the order is picked to and must be a valid location that can be picked to in the warehouse
    * pck_lodnum - This will be used as the load number the dataset order is picked onto and will be the load we unpick
    * unpick_to_lodnum - When unpicking partial qty, we will unpick the item to this destination lodnum. Override to "" to unpick to a system generated load number
    * unpick_partial - if set to Y then we will unpick a partial quantity, otherwise the entire load will be unpicked
    * unpick_qty - quantity to unpick, this quantity is used if unpick_partial = Y, if unpick_partial != Y then the entire lodnum will be unpicked
    * cancod - cancel code to use when unpicking, this should be a valid cancel code configured in the system
    * putaway_method - Mobile App Option for putaway 1) Directed 2) Sorted 3) Undirected
    * dep_loc - Deposit location for putaway after unpick
    * validate_loc - Location to be validated for Directed putaway

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Load, part, client, qty, uomcod reason code are configured for unpicking
    * The instance contains sufficient inventory for allocation

Test Case Notes:
    * If not using the dataset, values must be defined for pck_lodnum, and prtnum/unpick_qty (if unpicking_partial is set to Y)
    * By default, this Test Case uses Undirected Putaway. Additional variables may be added to the CSV to support Directed Putaway

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-PCK-4090 Mobile Outbound List Pick Case To Pallet Undirected
Test Case File: BASE-PCK-4090 Mobile Outbound List Pick Case To Pallet Undirected.feature
###############################################################

Test Case Description:
    This Test Case performs Mobile App Directed List Pick Case To Pallet

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Allocate_List_Picks"
Test Case Dataset cleanup scripts: "Allocate_List_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-4090.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * bckflg - This is what the backorder flag will be set as on the order line. It defaults to 0 if nothing is passed in
    * cancel_no_reallocate - This determines if cancelling and reallocating picks inline
    * oprcod - This will be used to validate the type of operation performed

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * There is sufficient inventory in the warehouse to allocate a List pick of the assigned prtnum if using the dataset

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * List Pick Case To Pallet Undirected work with CRADLE_TO_GRAVE serialization
    * List Pick Case To Pallet Undirected work with OUTCAP_ONLY serialization
    * List Pick Case To Pallet Undirected work with no serialization


###############################################################
Test Case Name: BASE-PCK-4100 Mobile Outbound List Pick Short Ship With Reship Directed
Test Case File: BASE-PCK-4100 Mobile Outbound List Pick Short Ship With Reship Directed.feature
###############################################################

Test Case Description:
    This Test Case performs Mobile App Outbound List Pick Short Ship With Reship Directed

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Allocate_List_Picks"
Test Case Dataset cleanup scripts: "Allocate_List_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-4100.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * car_move_id - This will be used as the Carrier Move Id
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * trlr_num - Transport Equipment Number used as User identification for the trailer.
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * dock_door - Physical location in the dock location where the trailer is located.
    * oprcod - This will be used to validate the type of operation performed
    * bckflg - This is what the backorder flag will be set as on the order line. It defaults to 0 if nothing is passed in
    * short_pick_flag - The short_pick variable to determine if we should be short picking or not
    * short_pick_qty - The short_pick_qty variable to determine amount of the qty to pick and short ship
    * cancel_code - The cancel code entered after the short pick (for this case is should be C-N-R)
    * create_order - The create_order variable to determine if we should be create_order or not
    * detail_file_name - csv file that needs to be assigned for variables for reship and cleanup
    * pck_dstloc - This will be used as the location the order is picked to
    * trac_ref - tracking reference for dispatch information
    * driver_lic - drivers license for dispatch information
    * driver_nam - drivers name for dispatch information

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * There is sufficient inventory in the warehouse to allocate a List pick of the assigned prtnum if using the dataset

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-PCK-4110 Mobile Outbound Count Near Zero
Test Case File: BASE-PCK-4110 Mobile Outbound Count Near Zero.feature
###############################################################

Test Case Description:
    This Test Case performs Mobile App Directed Pallet Picking in a location that has count near zero enabled and then performs count near zero with different scenarios: 
    (i) Pick and count near zero - no mismatch 
    (ii) Pick and count near zero - mismatch and match 
    (iii) Pick and count near zero - mismatch and mismatch - generate audit

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Count_Near_Zero"
Test Case Dataset cleanup scripts: "Count_Near_Zero"

Test Case Input CSV: Test Case Inputs/BASE-PCK-4110.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * srcloc - The location where the picking and count near zero operations will occur

Test Case Optional Inputs:
    * match_count - variable that will drive method of counting.

Test Case Assumptions:
    * The location specified for this test case is configured to allow pallet picks and has sufficient configuration to generate count near zero. 
      Count near zero in this case will be triggered when there is less than 550 units of a product in the count near zero count zone.
    * There is sufficient configuration to allow the user to perform pallet picking and count near zero through directed work.
    * This test case will perform pallet picking for a non-serialized part followed by count near zero.

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system.

Test Case Examples:
    * Pallet Pick with Count Near Zero Mode REGULAR
    * Pallet Pick with Count Near Zero Mode REMATCH
    * Pallet Pick with Count Near Zero Mode MISMATCH


###############################################################
Test Case Name: BASE-PCK-4120 Mobile Outbound List Pick Equipment Full Set Down Resume
Test Case File: BASE-PCK-4120 Mobile Outbound List Pick Equipment Full Set Down Resume.feature
###############################################################

Test Case Description:
    This Test Case performs Mobile App List Pick with Equipment Full and Set Down Resume options

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Picking

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Allocate_Multi_Line_List_Picks"
Test Case Dataset cleanup scripts: "Allocate_Multi_Line_List_Picks"

Test Case Input CSV: Test Case Inputs/BASE-PCK-4120.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating when creating carton pick data
    * ship_id - This will be used as the ship_id when creating carton pick data
    * adr_id - This will be used as the adr_id when creating carton pick data
    * cstnum - This will be used as the cstnum when creating carton pick data
    * carcod - This will be used as the carrier for the shipment when creating carton pick data - this needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating carton pick data - this needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating carton pick data - this needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order - this needs to be a valid number
    * prtnum_ln2 - This will be used as the prtnum for the second order line in the order - this needs to be a valid prtnum configured in the system - there must to be sufficient allocatable
      and pickable inventory of this item in the warehouse
    * untqty_ln2 - This will be used as the order qty for the second order line in the order - this needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line - this needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating carton pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating carton pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating carton pick data
    * dock - This will be used as the dock location for the trailer when creating carton pick data
    * bckflg - This is what the backorder flag will be set as on the order line. It defaults to 0 if nothing is passed in
    * cancel_and_reallocate - This determines if cancelling and reallocating picks inline
    * lpck_action - can take VEHICLE_FULL or SET_DOWN as inputs depending.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * There is sufficient inventory in the warehouse to allocate a List pick of the assigned prtnums if using the dataset

Test Case Notes:
    * Supply values for required and desired variables that adhere to the requirements of the system. down between picks - this triggers deposit of the first pick
      to staging and releasing the other pick under a new list ID. There is one serialized and one non-serialized item in the order picks - this triggers setting down the pallet
      to a PND location, resuming the list pick through directed work by picking up the pallet that was set down. There is one serialized and one non-serialized item in the order

Test Case Examples:
    * List Pick Case To Pallet Direct work with Equipment Full set    
    * List Pick Case To Pallet Direct work with Set Down between      


###############################################################
Test Case Name: BASE-RPL-0010 Terminal Outbound Pallet Replenishment
Test Case File: BASE-RPL-0010 Terminal Outbound Pallet Replenishment.feature
###############################################################

Test Case Description:
    This test case performs a pallet replenishment in the terminal

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Replenishment

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Allocate_Pallet_Replen"
Test Case Dataset cleanup scripts: "Allocate_Pallet_Replen"

Test Case Input CSV: Test Case Inputs/BASE-RPL-0020.csv

Test Case Required Inputs:
    * oprcod - Operation code
    * vehtyp - Vehicle type
    * ordnum - The ordnum when creating when creating data
    * ship_id - This will be used as the ship_id when creating data
    * adr_id - This will be used as the adr_id when creating data
    * cstnum - This will be used as the cstnum when creating data
    * carcod - This will be used as the carrier for the shipment when creating data. This needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating pick data This needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating pick data. This needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order. This needs to be a valid prtnum configured in the system. There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order. This needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line This needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating pick data
    * dock - This will be used as the dock location for the trailer when creating pick data
    * pallod - This will be used as the load number for the pallet that will be used for the replenishment
    * palloc - This will be used as the location for the pallet that will be used for the replenishment
    * palqty - This will be used as the qty when creating the pallet to replenish
    * adjrea - This will be used as the adjustment reason when creating the pallet to replen
    * adjact - This will be used as the adjustment activity code when creating the pallet to replen

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * There is not sufficient allocatable/pickable inventory of the item number in the warehouse and an emergency replen will be created
    * The dataset will create a pallet to fulfill the replenishment
    * The warehouse is configured to allocate emergency replenishments and create directed work on replenishment pick release

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RPL-0020 Terminal Outbound Case Replenishment
Test Case File: BASE-RPL-0020 Terminal Outbound Case Replenishment.feature
###############################################################

Test Case Description:
    This test case performs a case replenishment in the terminal

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Replenishment

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Allocate_Case_Replen"
Test Case Dataset cleanup scripts: "Allocate_Case_Replen"

Test Case Input CSV: Test Case Inputs/BASE-RPL-0020.csv

Test Case Required Inputs:
    * oprcod - Operation code
    * vehtyp - Vehicle type
    * ordnum - The ordnum when creating when creating data
    * ship_id - This will be used as the ship_id when creating data
    * adr_id - This will be used as the adr_id when creating data
    * cstnum - This will be used as the cstnum when creating data
    * carcod - This will be used as the carrier for the shipment when creating data. This needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating pick data This needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating pick data. This needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order. This needs to be a valid prtnum configured in the system. There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order. This needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line This needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating pick data
    * dock - This will be used as the dock location for the trailer when creating pick data
    * caslod - This will be used as the load number for the case that will be used for the replenishment
    * cassub - This will be used as the case number for the case that will be used for the replenishment
    * casloc - This will be used as the location for the case that will be used for the replenishment
    * casqty - This will be used as the qty when creating the case to replenish
    * adjrea - This will be used as the adjustment reason when creating the pallet to replen
    * adjact - This will be used as the adjustment activity code when creating the pallet to replen

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Testing using a dataset will generate an emergency replenishment for an order
    * There is not sufficient allocatable/pickable inventory of the item number in the warehouse and an emergency replen will be created
    * The warehouse is configured to allocate emergency replenishments and create directed work on replenishment pick release

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RPL-1020 Web Outbound Cancel Replenishment Task
Test Case File: BASE-RPL-1020 Web Outbound Cancel Replenishment Task.feature
###############################################################

Test Case Description:
    This Test Case cancels a replenishment task generated by the system due to other circumstances in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Replenishment

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Allocate_Pallet_Replen"
Test Case Dataset cleanup scripts: "Allocate_Pallet_Replen"

Test Case Input CSV: Test Case Inputs/BASE-RPL-1020.csv

Test Case Required Inputs:
    * oprcod - Operation code
    * vehtyp - Vehicle type
    * ordnum - The ordnum when creating when creating data
    * ship_id - This will be used as the ship_id when creating data
    * adr_id - This will be used as the adr_id when creating data
    * cstnum - This will be used as the cstnum when creating data
    * carcod - This will be used as the carrier for the shipment when creating data. This needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating pick data This needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating pick data. This needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order. This needs to be a valid prtnum configured in the system. There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order. This needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line This needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating pick data
    * dock - This will be used as the dock location for the trailer when creating pick data
    * pallod - This will be used as the load number for the pallet that will be used for the replenishment
    * palloc - This will be used as the location for the pallet that will be used for the replenishment
    * palqty - This will be used as the qty when creating the pallet to replenish
    * adjrea - This will be used as the adjustment reason when creating the pallet to replen
    * adjact - This will be used as the adjustment activity code when creating the pallet to replenish
    * cancel_code - This will be used as the reason code to be given while cancelling the picks

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * User has permissions for functions

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RPL-4010 Mobile Outbound Pallet Replenishment
Test Case File: BASE-RPL-4010 Mobile Outbound Pallet Replenishment.feature
###############################################################

Test Case Description:
    This test case performs a pallet replenishment in the Mobile App

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Replenishment

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Allocate_Pallet_Replen"
Test Case Dataset cleanup scripts: "Allocate_Pallet_Replen"

Test Case Input CSV: Test Case Inputs/BASE-RPL-4020.csv

Test Case Required Inputs:
    * oprcod - Operation code
    * vehtyp - Vehicle type
    * ordnum - The ordnum when creating when creating data
    * ship_id - This will be used as the ship_id when creating data
    * adr_id - This will be used as the adr_id when creating data
    * cstnum - This will be used as the cstnum when creating data
    * carcod - This will be used as the carrier for the shipment when creating data. This needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating pick data This needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating pick data. This needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order. This needs to be a valid prtnum configured in the system. There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order. This needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line This needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating pick data
    * dock - This will be used as the dock location for the trailer when creating pick data
    * pallod - This will be used as the load number for the pallet that will be used for the replenishment
    * palloc - This will be used as the location for the pallet that will be used for the replenishment
    * palqty - This will be used as the qty when creating the pallet to replenish
    * adjrea - This will be used as the adjustment reason when creating the pallet to replen
    * adjact - This will be used as the adjustment activity code when creating the pallet to replen

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * There is not sufficient allocatable/pickable inventory of the item number in the warehouse and an emergency replen will be created
    * The dataset will create a pallet to fulfill the replenishment
    * The warehouse is configured to allocate emergency replenishments and create directed work on replenishment pick release

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-RPL-4020 Mobile Outbound Case Replenishment
Test Case File: BASE-RPL-4020 Mobile Outbound Case Replenishment.feature
###############################################################

Test Case Description:
    This test case performs a case replenishment in the Mobile App

Test Case Author: Tryon Solutions
Test Case Type: Regression
Functional Area: Replenishment

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Allocate_Case_Replen"
Test Case Dataset cleanup scripts: "Allocate_Case_Replen"

Test Case Input CSV: Test Case Inputs/BASE-RPL-4020.csv

Test Case Required Inputs:
    * oprcod - Operation code
    * vehtyp - Vehicle type
    * ordnum - The ordnum when creating when creating data
    * ship_id - This will be used as the ship_id when creating data
    * adr_id - This will be used as the adr_id when creating data
    * cstnum - This will be used as the cstnum when creating data
    * carcod - This will be used as the carrier for the shipment when creating data. This needs to be a valid carrier configured in the system
    * srvlvl - This will be used as the service level for the shipment when creating pick data This needs to be a valid service level for the carrier configured in the system
    * ordtyp - This will be used as the order type for the order when creating pick data. This needs to be a valid ordtyp configured in the system
    * prtnum - This will be used as the prtnum for the order. This needs to be a valid prtnum configured in the system. There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - This will be used as the order qty for the order. This needs to be a valid number
    * invsts_prg - This will be used as the inventory status progression on the order line This needs to be a valid invsts_prg configured in the system
    * wave_num - This will be used as the wave number for the shipment when creating pick data
    * move_id - This will be used as the move ID assigned to the trailer when creating pick data
    * trlr_id - This will be used as the trailer ID for the trailer when creating pick data
    * dock - This will be used as the dock location for the trailer when creating pick data
    * caslod - This will be used as the load number for the case that will be used for the replenishment
    * cassub - This will be used as the case number for the case that will be used for the replenishment
    * casloc - This will be used as the location for the case that will be used for the replenishment
    * casqty - This will be used as the qty when creating the case to replenish
    * adjrea - This will be used as the adjustment reason when creating the pallet to replen
    * adjact - This will be used as the adjustment activity code when creating the pallet to replen

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Testing using a dataset will generate an emergency replenishment for an order
    * There is not sufficient allocatable/pickable inventory of the item number in the warehouse and an emergency replen will be created
    * The warehouse is configured to allocate emergency replenishments and create directed work on replenishment pick release

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-0010 Terminal Outbound Trailer Close
Test Case File: BASE-SHP-0010 Terminal Outbound Trailer Close.feature
###############################################################

Test Case Description:
    This test case performs Standard Terminal Trailer closing in the terminal

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Terminal

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-SHP-0010.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock_door - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse

Test Case Optional Inputs:
    * bol_num - You can give the feature a bol_num variable, and it will enter that as the BOL Number
    * pro_num - You can give the feature a pro_num variable, and it will enter that as the PRO Number
    * seal_num1 - You can give the feature a seal_num variable, and it will enter that as the Seal Number1
    * seal_num2 - You can give the feature a seal_num variable, and it will enter that as the Seal Number2
    * seal_num3 - You can give the feature a seal_num variable, and it will enter that as the Seal Number3
    * seal_num4 - You can give the feature a seal_num variable, and it will enter that as the Seal Number4
    * trlr_num - You can give the feature a trlr_num variable, and it will only load that trailer number

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-0020 Terminal Outbound Reopen Closed Transport Equipment
Test Case File: BASE-SHP-0020 Terminal Outbound Reopen Closed Transport Equipment.feature
###############################################################

Test Case Description:
    This test case will reopen closed transport equipment in the terminal

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Terminal

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-SHP-0020.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse
    * load_stop - If we want to create a load stop
    * close_trailer - If we want to close the trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-0030 Terminal Unload and Unpick Shipment
Test Case File: BASE-SHP-0030 Terminal Unload and Unpick Shipment.feature
###############################################################

Test Case Description:
    This test case will unload a shipping trailer, and unpick the inventory that was picked for the shipment.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Terminal

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common, Unpicking"

Test Case Input CSV: Test Case Inputs/BASE-SHP-0030.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse
    * load_stop - If we want to create a load stop
    * close_trailer - If we want to close the trailer
    * shpstg_loc - Shipment staging location to unload the inventory to.
    * ok_to_unpick - If we want to unpick inventory after unloading trailer. Can take only 'Y' or 'N'
    * unpick_partial - If we want to unpick partial inventory where applicable.
    * cancod - cancel code used for unpicking. Must be a valid code defined in the system.
    * putaway_method - 1 for directed, 2 for sorted, 3 for undirected.
    * dep_loc - Location to deposit unpicked inventory.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-1010 Web Outbound Trailer Close
Test Case File: BASE-SHP-1010 Web Outbound Trailer Close.feature
###############################################################

Test Case Description:
    This test case will handle closing and dispatching a trailer in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-SHP-1010.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating the order to be loaded onto the trailer
    * ship_id - This will be used as the ship_id when creating the shipment to be loaded onto the trailer
    * adr_id - This will be used as the adr_id when creating the order to be loaded onto the trailer
    * cstnum - This will be used as the cstnum when creating the order to be loaded onto the trailer
    * carcod - This will be used as the carrier for the shipment
    * srvlvl - This will be used as the service level for the shipment
    * ordtyp - This will be used as the order type for the order
    * prtnum - This will be used as the prtnum for the order
    * untqty - This will be used as the order qty for the order
    * invsts_prg - This will be used as the inventory status progression on the order line
    * wave_num - This will be used as the wave number for the shipment
    * move_id - This will be used as the move ID assigned to the trailer
    * dock - This will be used as the dock location for the trailer
    * pck_dstloc - This will be used as the location the order is picked to
    * load_stop - This will be used by the dataset to load the stop
    * operation - CLOSE will close and dispatch trailer, CLOSEONLY closes trailer without dispatch

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Sufficient pickable and shippable inventory for the order

Test Case Notes:
    * This Test Case creates a trailer using the web if create_data is set to TRUE
    * This Test Case can use an existing trailer by setting create_data to FALSE and supplying a valid move_id

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-1030 Web Outbound Validate Order
Test Case File: BASE-SHP-1030 Web Outbound Validate Order.feature
###############################################################

Test Case Description:
    This test case will load an incoming order via MSQL and validate it from the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Outbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Ord_Manual_Ship_Plan"
Test Case Dataset cleanup scripts: "Ord_Manual_Ship_Plan"

Test Case Input CSV: Test Case Inputs/BASE-SHP-1030.csv

Test Case Required Inputs:
    * adrnam - Address name to be created
    * adrtyp - Address type. Must exist in system.
    * adrln1 - Address line 1 to be created
    * adrcty - Address city to be created
    * adrstc - Address state code. Must be valid and must exist in system.
    * adrpsz - Address zip code. Must be valid and must exist in system.
    * ctry_name - Country for address. Must exist in system
    * first_name - First name for address to be created
    * locale_id - Language location ID. Must exist in system
    * ordnum - Order number to be created
    * cstnum - Customer number. Must exist in system
    * cponum - Customer PO number
    * ordtyp - Order type. Must exist in system
    * untqty - Order line quantity to ship
    * prtnum - Part number on order line. Must exist in system.
    * carcod - Carrier code. Must exist in system
    * srvlvl - Shipping service level. Must exist in system.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-1040 Web Outbound Validate Shipment
Test Case File: BASE-SHP-1040 Web Outbound Validate Shipment.feature
###############################################################

Test Case Description:
    This test case will load an incoming order and shipment via MSQL and validate shipment from the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Outbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Web_Outbound_Shipment"
Test Case Dataset cleanup scripts: "Web_Outbound_Shipment"

Test Case Input CSV: Test Case Inputs/BASE-SHP-1040.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating the order
    * ship_id - This will be used as the ship_id when creating the shipment
    * adr_id - This will be used as the adr_id when creating the order
    * cstnum - This will be used as the cstnum when creating the order
    * carcod - This will be used as the carrier for the shipment
    * srvlvl - This will be used as the service level for the shipment
    * ordtyp - This will be used as the order type for the order
    * prtnum - This will be used as the prtnum for the order
    * untqty - This will be used as the order qty for the order
    * invsts_prg - This will be used as the inventory status progression on the order line

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-1050 Web Outbound Validate Load
Test Case File: BASE-SHP-1050 Web Outbound Validate Load.feature
###############################################################

Test Case Description:
    This test case will create a order, shipment, and load and will validate that load in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Outbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Web_Outbound_Shipment"
Test Case Dataset cleanup scripts: "Web_Outbound_Shipment"

Test Case Input CSV: Test Case Inputs/BASE-SHP-1050.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating the order
    * ship_id - This will be used as the ship_id when creating the shipment
    * adr_id - This will be used as the adr_id when creating the order
    * cstnum - This will be used as the cstnum when creating the order
    * carcod - This will be used as the carrier for the shipment
    * srvlvl - This will be used as the service level for the shipment
    * ordtyp - This will be used as the order type for the order
    * prtnum - This will be used as the prtnum for the order
    * untqty - This will be used as the order qty for the order
    * invsts_prg - This will be used as the inventory status progression on the order line
    * wave_num - This will be used as the wave number for the shipment
    * move_id - This will be used as the move ID assigned to the trailer
    * dock - This will be used as the dock location for the trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-1060 Web Outbound Create Order
Test Case File: BASE-SHP-1060 Web Outbound Create Order.feature
###############################################################

Test Case Description:
    This test case will create a order and single order line in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Outbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-SHP-1060.csv

Test Case Required Inputs:
    * ordnum - order number you want to use during creation of order
    * ordlin - order line you want to use during creation of an order line
    * prtnum - part number in the order line
    * untqty - quantity of prtnum in the order line
    * alloc_profile - allocation profile UI field input
    * carcod - carrier code field input
    * project_number - project number field input
    * dstloc - destination location field input
    * res_pri - reservation priority field input
    * ftp_dtl - part foot print detail field input
    * cert_origin - certificate of origin field input
    * ui_ordtyp - the Web representation of the order type
    * cstnum - csutomer ID field value
    * cust_po - customer PO field value
    * create_ship_by - create shipment by field value
    * deliver_num - devlivery number field value
    * ord_note - text for creating note for order

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-1070 Web Outbound Assign Transport Equipment to Load
Test Case File: BASE-SHP-1070 Web Outbound Assign Transport Equipment to Load.feature
###############################################################

Test Case Description:
    This test case will Assign Transport Equipment to Load

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Outbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Create_Outbound_Load_Trailer"
Test Case Dataset cleanup scripts: "Create_Outbound_Load_Trailer"

Test Case Input CSV: Test Case Inputs/BASE-SHP-1070.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating the order
    * ship_id - This will be used as the ship_id when creating the shipment
    * adr_id - This will be used as the adr_id when creating the order
    * cstnum - This will be used as the cstnum when creating the order
    * carcod - This will be used as the carrier for the shipment
    * srvlvl - This will be used as the service level for the shipment
    * ordtyp - This will be used as the order type for the order
    * prtnum - This will be used as the prtnum for the order
    * untqty - This will be used as the order qty for the order
    * invsts_prg - This will be used as the inventory status progression on the order line
    * wave_num - Wave Number
    * move_id - Load ID
    * trlr_id - Unique identifier for the trailer in the system.
    * dock_door - Physical location in the yard where the trailer is located.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-1080 Web Outbound Remove Load from Trailer
Test Case File: BASE-SHP-1080 Web Outbound Remove Load from Trailer.feature
###############################################################

Test Case Description:
    This test case will Remove Load from Trailer in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Outbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Web_Outbound_Shipment"
Test Case Dataset cleanup scripts: "Web_Outbound_Shipment"

Test Case Input CSV: Test Case Inputs/BASE-SHP-1080.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating the order
    * ship_id - This will be used as the ship_id when creating the shipment
    * adr_id - This will be used as the adr_id when creating the order
    * cstnum - This will be used as the cstnum when creating the order
    * carcod - This will be used as the carrier for the shipment
    * srvlvl - This will be used as the service level for the shipment
    * ordtyp - This will be used as the order type for the order
    * prtnum - This will be used as the prtnum for the order
    * untqty - This will be used as the order qty for the order
    * invsts_prg - This will be used as the inventory status progression on the order line
    * wave_num - Wave Number
    * move_id - Load ID
    * trlr_id - Unique identifier for the trailer in the system.
    * dock_door - Physical location in the yard where the trailer is located.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-1090 Web Outbound Create Shipment
Test Case File: BASE-SHP-1090 Web Outbound Create Shipment.feature
###############################################################

Test Case Description:
    This test case will create a shipment in the Web and associate with order

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Outbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Web_Outbound_Create_Shipment"
Test Case Dataset cleanup scripts: "Web_Outbound_Create_Shipment"

Test Case Input CSV: Test Case Inputs/BASE-SHP-1090.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating the order
    * ship_id - This will be used as the ship_id when creating the shipment
    * adr_id - This will be used as the adr_id when creating the order (must match route_to_addr)
    * cstnum - This will be used as the cstnum when creating the order
    * carcod - This will be used as the carrier for the shipment
    * srvlvl - This will be used as the service level for the shipment
    * ordtyp - This will be used as the order type for the order
    * prtnum - This will be used as the prtnum for the order
    * untqty - This will be used as the order qty for the order
    * invsts_prg - This will be used as the inventory status progression on the order line
    * route_to_addr - route to address (has to be same as order) used in shipment creation (must match adr_id)
    * eshp_dte - early ship date used in shipment creation
    * lshp_dte - late ship date used in shipment creation
    * edel_dte - early delivery date used in shipment creation
    * ldel_dte - late delivery date used in shipment creation
    * aesnum - aes number used in shipment creation

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-1100 Web Outbound Create Load
Test Case File: BASE-SHP-1100 Web Outbound Create Load.feature
###############################################################

Test Case Description:
    This test case will create a new load in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Outbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Web_Outbound_Shipment"
Test Case Dataset cleanup scripts: "Web_Outbound_Shipment"

Test Case Input CSV: Test Case Inputs/BASE-SHP-1100.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating the order
    * ship_id - This will be used as the ship_id when creating the shipment
    * adr_id - This will be used as the adr_id when creating the order
    * cstnum - This will be used as the cstnum when creating the order
    * carcod - This will be used as the carrier for the shipment
    * srvlvl - This will be used as the service level for the shipment
    * ordtyp - This will be used as the order type for the order
    * prtnum - This will be used as the prtnum for the order
    * untqty - This will be used as the order qty for the order
    * invsts_prg - This will be used as the inventory status progression on the order line
    * ui_move_id - Load ID to use in the web when creating a new load

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-1110 Web Outbound Deassign LPN from Load
Test Case File: BASE-SHP-1110 Web Outbound Deassign LPN from Load.feature
###############################################################

Test Case Description:
    This test case will deassign a LPN from a load in the Web

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Shipping

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, WEB

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-SHP-1110.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-1120 Web Outbound Close Load with Safety Questions
Test Case File: BASE-SHP-1120 Web Outbound Close Load with Safety Questions.feature
###############################################################

Test Case Description:
    This test case will handle closing a trailer with safety check workflow in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-SHP-1120.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating the order to be loaded onto the trailer
    * ship_id - This will be used as the ship_id when creating the shipment to be loaded onto the trailer
    * adr_id - This will be used as the adr_id when creating the order to be loaded onto the trailer
    * cstnum - This will be used as the cstnum when creating the order to be loaded onto the trailer
    * carcod - This will be used as the carrier for the shipment
    * srvlvl - This will be used as the service level for the shipment
    * ordtyp - This will be used as the order type for the order
    * prtnum - This will be used as the prtnum for the order
    * untqty - This will be used as the order qty for the order
    * invsts_prg - This will be used as the inventory status progression on the order line
    * wave_num - This will be used as the wave number for the shipment
    * move_id - This will be used as the move ID assigned to the trailer
    * seal - This will be used as Transport Equipment Seal
    * dock - This will be used as the dock location for the trailer
    * pck_dstloc - This will be used as the location the order is picked to
    * load_stop - This will be used by the dataset to load the stop
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * operation - CLOSE will close and dispatch trailer, CLOSEONLY closes trailer without dispatch

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Sufficient pickable and shippable inventory for the order

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-1130 Web Outbound Trailer Reopen
Test Case File: BASE-SHP-1130 Web Outbound Trailer Reopen.feature
###############################################################

Test Case Description:
    This test case will handle closing and then re-opening a trailer in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-SHP-1130.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating the order to be loaded onto the trailer
    * ship_id - This will be used as the ship_id when creating the shipment to be loaded onto the trailer
    * adr_id - This will be used as the adr_id when creating the order to be loaded onto the trailer
    * cstnum - This will be used as the cstnum when creating the order to be loaded onto the trailer
    * carcod - This will be used as the carrier for the shipment
    * srvlvl - This will be used as the service level for the shipment
    * ordtyp - This will be used as the order type for the order
    * prtnum - This will be used as the prtnum for the order
    * untqty - This will be used as the order qty for the order
    * invsts_prg - This will be used as the inventory status progression on the order line
    * wave_num - This will be used as the wave number for the shipment
    * move_id - This will be used as the move ID assigned to the trailer
    * seal - This will be used as Transport Equipment Seal
    * dock - This will be used as the dock location for the trailer
    * pck_dstloc - This will be used as the location the order is picked to
    * load_stop - This will be used by the dataset to load the stop
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * operation - CLOSE will close and dispatch trailer, CLOSEONLY closes trailer without dispatch

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Sufficient pickable and shippable inventory for the order

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-1140 Web Outbound Close and Dispatch Trailer
Test Case File: BASE-SHP-1140 Web Outbound Close and Dispatch Trailer.feature
###############################################################

Test Case Description:
    This test case will handle closing and dispatching a trailer in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-SHP-1120.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating the order to be loaded onto the trailer
    * ship_id - This will be used as the ship_id when creating the shipment to be loaded onto the trailer
    * adr_id - This will be used as the adr_id when creating the order to be loaded onto the trailer
    * cstnum - This will be used as the cstnum when creating the order to be loaded onto the trailer
    * carcod - This will be used as the carrier for the shipment
    * srvlvl - This will be used as the service level for the shipment
    * ordtyp - This will be used as the order type for the order
    * prtnum - This will be used as the prtnum for the order
    * untqty - This will be used as the order qty for the order
    * invsts_prg - This will be used as the inventory status progression on the order line
    * wave_num - This will be used as the wave number for the shipment
    * move_id - This will be used as the move ID assigned to the trailer
    * seal - This will be used as Transport Equipment Seal
    * dock - This will be used as the dock location for the trailer
    * pck_dstloc - This will be used as the location the order is picked to
    * load_stop - This will be used by the dataset to load the stop
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Sufficient pickable and shippable inventory for the order

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-4010 Mobile Outbound Trailer Close
Test Case File: BASE-SHP-4010 Mobile Outbound Trailer Close.feature
###############################################################

Test Case Description:
    This test case performs Standard Mobile App Trailer Closing

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Mobile

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-SHP-4010.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock_door - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse

Test Case Optional Inputs:
    * bol_num - You can give the feature a bol_num variable, and it will enter that as the BOL Number
    * pro_num - You can give the feature a pro_num variable, and it will enter that as the PRO Number
    * seal_num1 - You can give the feature a seal_num variable, and it will enter that as the Seal Number1
    * seal_num2 - You can give the feature a seal_num variable, and it will enter that as the Seal Number2
    * seal_num3 - You can give the feature a seal_num variable, and it will enter that as the Seal Number3
    * seal_num4 - You can give the feature a seal_num variable, and it will enter that as the Seal Number4
    * trlr_num - You can give the feature a trlr_num variable, and it will only load that trailer number

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-4020 Mobile Outbound Reopen Closed Transport Equipment
Test Case File: BASE-SHP-4020 Mobile Outbound Reopen Closed Transport Equipment.feature
###############################################################

Test Case Description:
    This test case will reopen closed transport equipment in the Mobile App

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Mobile

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-SHP-4020.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse
    * load_stop - If we want to create a load stop
    * close_trailer - If we want to close the trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-4030 Mobile Unload and Unpick Shipment
Test Case File: BASE-SHP-4030 Mobile Unload and Unpick Shipment.feature
###############################################################

Test Case Description:
    This test case will unload a shipping trailer, and unpick the inventory that was picked for the shipment in the Mobile App

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Loading

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA, Mobile

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common, Unpicking"

Test Case Input CSV: Test Case Inputs/BASE-SHP-4030.csv

Test Case Required Inputs:
    * ordnum - Order number when creating the order to be loaded onto the trailer. Must not match any existing ordnum in the warehouse
    * ship_id - Shipment id used when creating the shipment to be loaded onto the trailer. Must not match any existing ship_id in the warehouse
    * adr_id - Address Id used when creating the order to be loaded onto the trailer. Must not match any existing adr_id in the warehouse
    * cstnum - Customer Number when creating the order to be loaded onto the trailer. Must not match any existing cstnum in the warehouse
    * carcod - Carrier Code used for the shipment. Must to be a valid carrier configured in the system
    * srvlvl - Service Level used for the shipment - Must be a valid service level for the carrier configured in the system
    * ordtyp - Order type for the order. Must be a valid ordtyp configured in the system
    * prtnum - Part Number for the order. Must be a valid prtnum configured in the system. There must to be sufficient allocatable and pickable inventory of this item in the warehouse
    * untqty - Order qty for the order line
    * invsts_prg - Inventory status progression on the order line. Must be a valid invsts_prg configured in the system
    * wave_num - Wave number for the shipment. Must not match any existing wave number in the warehouse
    * move_id - Carrier Move ID assigned to the trailer. Must not match any existing carrier move in the warehouse
    * trlr_id - Trailer ID for the trailer. Must not match any existing trailer in the warehouse
    * dock - Dock location for the trailer. Must be a valid and open shipping dock door in the warehouse
    * load_stop - If we want to create a load stop
    * close_trailer - If we want to close the trailer
    * shpstg_loc - Shipment staging location to unload the inventory to.
    * ok_to_unpick - If we want to unpick inventory after unloading trailer. Can take only 'Y' or 'N'
    * unpick_partial - If we want to unpick partial inventory where applicable.
    * cancod - cancel code used for unpicking. Must be a valid code defined in the system.
    * putaway_method - 1 for directed, 2 for sorted, 3 for undirected.
    * dep_loc - Location to deposit unpicked inventory.

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-WAV-1010 Web Outbound Allocate Wave
Test Case File: BASE-WAV-1010 Web Outbound Allocate Wave.feature
###############################################################

Test Case Description:
    This Test Case loads an order and inventory then plans and allocates a wave in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Allocation

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Ord_Allocate_Wave"
Test Case Dataset cleanup scripts: "Ord_Allocate_Wave"

Test Case Input CSV: Test Case Inputs/BASE-WAV-1010.csv

Test Case Required Inputs:
    * wh_id - Warehouse ID
    * adrnam - Address name to be created
    * adrtyp - Address type. Must exist in system.
    * adrln1 - Address line 1 to be created
    * adrcty - Address city to be created
    * adrstc - Address state code. Must be valid and must exist in system.
    * adrpsz - Address zip code. Must be valid and must exist in system.
    * ctry_name - Country for address. Must exist in system
    * first_name - First name for address to be created
    * locale_id - Language location ID. Must exist in system
    * ordnum - Order number to be created
    * cstnum - Customer number. Must exist in system
    * cponum - Customer PO number
    * ordtyp - Order type. Must exist in system
    * untqty - Order line quantity to ship
    * prtnum - Part number on order line. Must exist in system.
    * carcod - Carrier code. Must exist in system
    * srvlvl - Shipping service level. Must exist in system.
    * lodnum - Load number to be created
    * dstloc - Location for inventory creation. Must be valid empty pickable location.
    * invqty - Inventory creation quantity
    * invsts - Inventory status. Must exist in system.

Test Case Optional Inputs:
    * alc_destination_zone - Allocation destination location
    * alc_staging_lane - Allocation staging lane
    * alc_imr_uoms - Allocation list of UOMs to specify
    * alc_wave_priority - Allocate Wave priority

Test Case Assumptions:
    * User has permissions for functions

Test Case Notes:
    * None

Test Case Examples:
    * Allocate Wave with standard allocation
    * Allocaton specifiying specific allocation destination_zone, staging_lane, and uoms


###############################################################
Test Case Name: BASE-WAV-1020 Web Outbound Shipment Planning
Test Case File: BASE-WAV-1020 Web Outbound Shipment Planning.feature
###############################################################

Test Case Description:
    This test case plans and validates an order in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Planning

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Ord_Manual_Ship_Plan"
Test Case Dataset cleanup scripts: "Ord_Manual_Ship_Plan"

Test Case Input CSV: Test Case Inputs/BASE-WAV-1020.csv

Test Case Required Inputs:
    * wh_id - Warehouse ID
    * adrnam - Address name to be created
    * adrtyp - Address type. Must exist in system.
    * adrln1 - Address line 1 to be created
    * adrcty - Address city to be created
    * adrstc - Address state code. Must be valid and must exist in system.
    * adrpsz - Address zip code. Must be valid and must exist in system.
    * ctry_name - Country for address. Must exist in system
    * first_name - First name for address to be created
    * locale_id - Language location ID. Must exist in system
    * ordnum - Order number to be created
    * cstnum - Customer number. Must exist in system
    * cponum - Customer PO number
    * ordtyp - Order type. Must exist in system
    * untqty - Order line quantity to ship
    * prtnum - Part number on order line. Must exist in system.
    * carcod - Carrier code. Must exist in system
    * srvlvl - Shipping service level. Must exist in system.
    * load - Represents the Carrier Move

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * User has permissions for functions

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-WAV-1030 Web Outbound Unallocate Wave
Test Case File: BASE-WAV-1030 Web Outbound Unallocate Wave.feature
###############################################################

Test Case Description:
    This Test Case loads an order, inventory and allocates a wave via MSQL. It then unallocates the wave in the Web.

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Allocation

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Allocate_Carton_Picks"
Test Case Dataset cleanup scripts: "Allocate_Carton_Picks"

Test Case Input CSV: Test Case Inputs/BASE-WAV-1030.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating the order to be loaded onto the trailer
    * ship_id - This will be used as the ship_id when creating the shipment to be loaded onto the trailer
    * adr_id - This will be used as the adr_id when creating the order to be loaded onto the trailer
    * cstnum - This will be used as the cstnum when creating the order to be loaded onto the trailer
    * carcod - This will be used as the carrier for the shipment
    * srvlvl - This will be used as the service level for the shipment
    * ordtyp - This will be used as the order type for the order
    * prtnum - This will be used as the prtnum for the order
    * untqty - This will be used as the order qty for the order
    * invsts_prg - This will be used as the inventory status progression on the order line
    * wave_num - This will be used as the wave number for the shipment
    * move_id - This will be used as the move ID assigned to the trailer
    * dock - This will be used as the dock location for the trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * User has permissions for functions

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-WAV-1040 Web Outbound Plan Wave Remove Stop
Test Case File: BASE-WAV-1040 Web Outbound Plan Wave Remove Stop.feature
###############################################################

Test Case Description:
    This Test Case loads an order, plans a wave, creates a load and assigns a stop to it via MSQL. It then removes stop from the load in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Outbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Web_Outbound_WavePlan"
Test Case Dataset cleanup scripts: "Web_Outbound_WavePlan"

Test Case Input CSV: Test Case Inputs/BASE-WAV-1040.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating the order to be loaded onto the trailer
    * ship_id - This will be used as the ship_id when creating the shipment to be loaded onto the trailer
    * adr_id - This will be used as the adr_id when creating the order to be loaded onto the trailer
    * client_id - This will be used as the client_id for the outbound order
    * cstnum - This will be used as the cstnum when creating the order to be loaded onto the trailer
    * carcod - This will be used as the carrier for the shipment
    * srvlvl - This will be used as the service level for the shipment
    * ordtyp - This will be used as the order type for the order
    * prtnum - This will be used as the prtnum for the order
    * untqty - This will be used as the order qty for the order
    * invsts_prg - This will be used as the inventory status progression on the order line
    * wave_num - This will be used as the wave number for the shipment
    * move_id - This will be used as the move ID assigned to the trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * User has permissions for functions

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-WAV-1050 Web Outbound Plan Wave Delete Load
Test Case File: BASE-WAV-1050 Web Outbound Plan Wave Delete Load.feature
###############################################################

Test Case Description:
    This Test Case loads a carrier move id (load) via MSQL and then removes the load in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Outbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Create_Car_Move"
Test Case Dataset cleanup scripts: "Create_Car_Move"

Test Case Input CSV: Test Case Inputs/BASE-WAV-1050.csv

Test Case Required Inputs:
    * carcod - This will be used as the carrier for the shipment
    * move_id - This will be used as the move ID assigned to the trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * User has permissions for functions

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-WAV-1070 Web Outbound Unplan Wave
Test Case File: BASE-WAV-1070 Web Outbound Unplan Wave.feature
###############################################################

Test Case Description:
    This test case will unplan a wave that was previously planned prior to allocating the wave in the Web.

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Planning

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Web_Outbound_WavePlan"
Test Case Dataset cleanup scripts: "Web_Outbound_WavePlan"

Test Case Input CSV: Test Case Inputs/BASE-WAV-1070.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating the order to be loaded onto the trailer
    * ship_id - This will be used as the ship_id when creating the shipment to be loaded onto the trailer
    * adr_id - This will be used as the adr_id when creating the order to be loaded onto the trailer
    * cstnum - This will be used as the cstnum when creating the order to be loaded onto the trailer
    * carcod - This will be used as the carrier for the shipment
    * srvlvl - This will be used as the service level for the shipment
    * ordtyp - This will be used as the order type for the order
    * prtnum - This will be used as the prtnum for the order
    * untqty - This will be used as the order qty for the order
    * invsts_prg - This will be used as the inventory status progression on the order line
    * wave_num - This will be used as the wave number for the shipment
    * move_id - This will be used as the move ID assigned to the trailer
    * dock - This will be used as the dock location for the trailer
    * pck_dstloc - This will be used as the location the order is picked to
    * load_stop - This will be used by the dataset to load the stop
    * operation - CLOSE will close and dispatch trailer, CLOSEONLY closes trailer without dispatch
    * checkin_trailier - Set to YES to checkin trailer during load of dataset

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-WAV-1090 Web Outbound Cancel Orders from Load
Test Case File: BASE-WAV-1090 Web Outbound Cancel Orders from Load.feature
###############################################################

Test Case Description:
    This test case will create a order and single order line in the Web. It will then cancel the order or order line based on test input

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Outbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Web_Outbound_Shipment"
Test Case Dataset cleanup scripts: "Web_Outbound_Shipment"

Test Case Input CSV: Test Case Inputs/BASE-WAV-1090.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating the order
    * ship_id - This will be used as the ship_id when creating the shipment
    * adr_id - This will be used as the adr_id when creating the order
    * cstnum - This will be used as the cstnum when creating the order
    * carcod - This will be used as the carrier for the shipment
    * srvlvl - This will be used as the service level for the shipment
    * ordtyp - This will be used as the order type for the order
    * prtnum - This will be used as the prtnum for the order
    * untqty - This will be used as the order qty for the order
    * invsts_prg - This will be used as the inventory status progression on the order line
    * wave_num - This will be used as the wave number for the shipment
    * move_id - This will be used as the move ID assigned to the trailer
    * dock - This will be used as the dock location for the trailer
    * pck_dstloc - This will be used as the location the order is picked to
    * load_stop - This will be used by the dataset to load the stop
    * operation - CLOSE will close and dispatch trailer, CLOSEONLY closes trailer without dispatch
    * cancel_mode - variable that specifies to cancel order or order line

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * cancel_mode ORDER - cancels the order from the load
    * cancel_mode ORDER_LINE - cancels the order line from the load


###############################################################
Test Case Name: BASE-PRD-0010 Flow Work Order
Test Case File: BASE-PRD-0010 Flow Work Order.feature
###############################################################

Test Case Description:
    This test case goes through the whole work order processing cycle for one work order. It starts with creating the work order and ends with closing the work order
    and removing all the work order related data in the end, including the finished goods.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Production

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, Web, MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "WKO_Work_Order"

Test Case Input CSV: Test Case Inputs/BASE-PRD-0010.csv

Test Case Required Inputs:
    * wko_typ - Work Order type
    * wkonum - Work Order number
    * wkorev - Work Order revision
    * tlp_prtnum - Top level part number
    * tlp_prt_client_id - Top level part client
    * bomnum - Bill of material number
    * invsts - Inventory Status
    * prdqty - Production Qty
    * prdlin - Production Line
    * rcvqty - Receive Qty
    * pickMethod - Picking Method
    * over_consumption - Over Consumption Allowed
    * oprcod - Operation Code

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * work order production line, staging location and workstation is setup
    * BOM for top level part exists (could be one or many details)
    * inventory for components exist
    * allocation search paths exist to make allocation work
    * there is room to store the finished goods
    * storage search path exists
    * no dataset load is needed

Test Case Notes:
    * Change the input parameters in this feature to the names setup in your environment E.g. the BOM number should match an existing BOM number.
    * Make sure the 'rcvqty' matches the 'prdqty' if you don't want to create a discrepancy in over- or under-consuming inventory.

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-PRD-6010 Flow Mobile Work Order
Test Case File: BASE-PRD-6010 Flow Mobile Work Order.feature
###############################################################

Test Case Description:
    This test case goes through the whole work order processing cycle for one work order. It starts with creating the work order and ends with closing the work order
    and removing all the work order related data in the end, including the finished goods.

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Production

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, Web, MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "WKO_Work_Order"

Test Case Input CSV: Test Case Inputs/BASE-PRD-6010.csv

Test Case Required Inputs:
    * wko_typ - Work Order type
    * wkonum - Work Order number
    * wkorev - Work Order revision
    * tlp_prtnum - Top level part number
    * tlp_prt_client_id - Top level part client
    * bomnum - Bill of material number
    * invsts - Inventory Status
    * prdqty - Production Qty
    * prdlin - Production Line
    * rcvqty - Receive Qty
    * pickMethod - Picking Method
    * over_consumption - Over Consumption Allowed
    * oprcod - Operation Code

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * work order production line, staging location and workstation is setup
    * BOM for top level part exists (could be one or many details)
    * inventory for components exist
    * allocation search paths exist to make allocation work
    * there is room to store the finished goods
    * storage search path exists
    * no dataset load is needed

Test Case Notes:
    * Change the input parameters in this feature to the names setup in your environment E.g. the BOM number should match an existing BOM number.
    * Make sure the 'rcvqty' matches the 'prdqty' if you don't want to create a discrepancy in over- or under-consuming inventory.

Test Case Examples:
    * None


###############################################################
Test Case Name: Base-DD-0010 Dynamic Data Test
Test Case File: Dynamic Data Test
###############################################################

Test Case Description:
    This Test Case tests the Dynamic Data Functionality

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Testing

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "N/A"

Test Case Input CSV: Test Case Inputs/BASE-DD-0010.CSV

Test Case Required Inputs:
    * None

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-VAL-0010 Pre Validation Test
Test Case File: BASE-VAL-0010 Pre Validation Test
###############################################################

Test Case Description:
    This Test Case tests the Validation Functionality

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Testing

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "N/A"

Test Case Input CSV: Test Case Inputs/BASE-VAL-0010.CSV

Test Case Required Inputs:
    * None

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-VAL-0020 Post Validation Test
Test Case File: BASE-VAL-0020 Post Validation Test.feature
###############################################################

Test Case Description:
    This Test Case tests the Validation Functionality

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Testing

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "N/A"

Test Case Input CSV: Test Case Inputs/BASE-VAL-0020.CSV

Test Case Required Inputs:
    * None

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-VAL-0030 Post Validation Test
Test Case File: BASE-VAL-0030 Post Validation Test
###############################################################

Test Case Description:
    This Test Case tests a post validation on an integrator event

Test Case Author: Tryon Solutions 
Test Case Type: Regression
Functional Area: Testing

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "N/A"

Test Case Input CSV: Test Case Inputs/BASE-VAL-0030.CSV

Test Case Required Inputs:
    * None

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-LDG-1010 Web Outbound Trailer Load
Test Case File: BASE-LDG-1010 Web Outbound Trailer Load.feature
###############################################################

Test Case Description:
    This test case will handle loading a trailer in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-LDG-1010.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating the order to be loaded onto the trailer
    * ship_id - This will be used as the ship_id when creating the shipment to be loaded onto the trailer
    * adr_id - This will be used as the adr_id when creating the order to be loaded onto the trailer
    * cstnum - This will be used as the cstnum when creating the order to be loaded onto the trailer
    * carcod - This will be used as the carrier for the shipment
    * srvlvl - This will be used as the service level for the shipment
    * ordtyp - This will be used as the order type for the order
    * prtnum - This will be used as the prtnum for the order
    * untqty - This will be used as the order qty for the order
    * invsts_prg - This will be used as the inventory status progression on the order line
    * wave_num - This will be used as the wave number for the shipment
    * move_id - This will be used as the move ID assigned to the trailer
    * trlr_id - This will be used as the trailer ID for the trailer
    * dock - This will be used as the dock location for the trailer
    * pck_dstloc - This will be used as the location the order is picked to
    * operation - LOAD will load the trailer, LC will load and close the trailer, LCD will load, close, and dispatch the trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Sufficient pickable and shippable inventory for the order
    * Dock door for the dataset is an open and usable dock door
    * The trailer has a single stop assigned and the stop is fully picked and staged
    * Load trailer function will utilize move immediately rather than work queue for loading

Test Case Notes:
    * This Test Case can use an existing trailer by setting create_data to FALSE and supplying a valid move_id

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-SHP-1020 Web Outbound Trailer Dispatch
Test Case File: BASE-SHP-1020 Web Outbound Trailer Dispatch
###############################################################

Test Case Description:
    This test case will handle dispatching a trailer in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Web_Outbound_Trailer_Common"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-SHP-1020.csv

Test Case Required Inputs:
    * ordnum - This will be used as the ordnum when creating the order to be loaded onto the trailer
    * ship_id - This will be used as the ship_id when creating the shipment to be loaded onto the trailer
    * adr_id - This will be used as the adr_id when creating the order to be loaded onto the trailer
    * cstnum - This will be used as the cstnum when creating the order to be loaded onto the trailer
    * carcod - This will be used as the carrier for the shipment
    * srvlvl - This will be used as the service level for the shipment
    * ordtyp - This will be used as the order type for the order
    * prtnum - This will be used as the prtnum for the order
    * untqty - This will be used as the order qty for the order
    * invsts_prg - This will be used as the inventory status progression on the order line
    * wave_num - This will be used as the wave number for the shipment
    * move_id - This will be used as the move ID assigned to the trailer
    * trlr_id - This will be used as the trailer ID for the trailer
    * dock - This will be used as the dock location for the trailer
    * pck_dstloc - This will be used as the location the order is picked to
    * load_stop - This will be used by the dataset to load the stop
    * close_trailer - This will be used by the dataset to close the trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Sufficient pickable and shippable inventory for the order
    * Dock door for the dataset is an open and usable dock door
    * Trailer to be dispatched is fully loaded and closed

Test Case Notes:
    * This Test Case creates a trailer using the dataset if create_data is set to TRUE
    * This Test Case can use an existing trailer by setting create_data to FALSE and supplying a valid move_id

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-YRD-0010 Terminal Trailer Move
Test Case File: BASE-YRD-0010 Terminal Trailer Move.feature
###############################################################

Test Case Description:
    This Test Case assigns a trailer, checks it in, then moves the trailer using the Terminal

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, MOCA

Test Case Dataset setup scripts: "Trailer_Creation"
Test Case Dataset cleanup scripts: "Trailer_Creation"

Test Case Input CSV: Test Case Inputs/BASE-YRD-0010.csv

Test Case Required Inputs:
    * wh_id - Warehouse ID
    * trlr_num - Trailer Number
    * carcod - Carrier Code
    * check_in_dock_loc - Location where trailer will be checked into
    * move_to_dock_loc - Location where trailer will be moved to
    * work_queue_or_immediate - Indicator for how the move is processed

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * User must have permissions to perform trailer moves

Test Case Notes:
    * Both cases will complete and verify the move in the terminal/MOCA

Test Case Examples:
    * One with work_queue_or_immediate set to work_queue
    * One with work_queue_or_immediate set to immediate


###############################################################
Test Case Name: BASE-YRD-1010 Web Trailer Move
Test Case File: BASE-YRD-0010 Trailer Moving.feature
###############################################################

Test Case Description:
    This Test Case assigns a trailer, checks it in, then moves the trailer using the WEB

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "Trailer_Creation"
Test Case Dataset cleanup scripts: "Trailer_Creation"

Test Case Input CSV: Test Case Inputs/BASE-YRD-1010.csv

Test Case Required Inputs:
    * wh_id - Warehouse ID
    * trlr_num - Trailer Number
    * carcod - Carrier Code
    * check_in_dock_loc - Location where the trailer will be checked into
    * move_to_dock_loc - Location where the trailer will be moved to
    * work_queue_or_immediate - Indicator for how the move is processed

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * User must have permissions to perform trailer moves

Test Case Notes:
    * In the case of work_queue, the move is not completed in the terminal as directed work, it is cleaned up as part of the dataset cleanup step.
    * For immediate case the move is completed and is verified in the Web/MOCA.

Test Case Examples:
    * One with work_queue_or_immediate set to work_queue
    * One with work_queue_or_immediate set to immediate


###############################################################
Test Case Name: BASE-YRD-1020 Web Inbound Trailer Check In
Test Case File: BASE-YRD-1020 Web Inbound Trailer Check In.feature
###############################################################

Test Case Description:
    This Test Case checks in an Inbound trailer in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Inbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA 

Test Case Dataset setup scripts: "Inbound_Trailer"
Test Case Dataset cleanup scripts: "Inbound_Trailer"

Test Case Input CSV: Test Case Inputs/BASE-YRD-1020.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in
    * invtyp - This need to be a valid Invoice Type, that is defined in your system
    * prtnum - This needs to be a valid part number that is defined in your system
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - This can be a fabrication, but assumes simple, standard LPN receiving
    * supnum - This needs to be a valid supplier, defined in your system
    * rec_loc - This is the receiving staging lane used for drop

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-YRD-1030 Web Inbound Trailer Check In with Safety Check
Test Case File: BASE-YRD-1030 Web Inbound Trailer Check In with Safety Check.feature
###############################################################

Test Case Description:
    This Test Case checks in an Inbound trailer and processes enabled Safety Checks in he Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Inbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA 

Test Case Dataset setup scripts: "Inbound_Trailer"
Test Case Dataset cleanup scripts: "Inbound_Trailer"

Test Case Input CSV: Test Case Inputs/BASE-YRD-1030.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Trailer. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in
    * invtyp - This need to be a valid Invoice Type, that is defined in your system
    * prtnum - This needs to be a valid part number that is defined in your system
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - This can be a fabrication, but assumes simple, standard LPN receiving
    * supnum - This needs to be a valid supplier, defined in your system
    * rec_loc - This is the receiving staging lane used for drop

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-YRD-1040 Web Outbound Trailer Check In
Test Case File: BASE-YRD-1040 Web Outbound Trailer Check In.feature
###############################################################

Test Case Description:
    This test case creates an outbound trailer in the Web Transport Equipment screen then uses the Web Check In screen to check the outbound trailer into an available dock door

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Outbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-YRD-1040.csv

Test Case Required Inputs:
    * carcod - Carrier Code. Must exist in system
    * trlr_num - Trailer number to be created if creating data or used if already in system
    * dock - This will be used as the dock location for the trailer check in

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Dock door is available for check in
    * Process assumes check in without appointment

Test Case Notes:
    * This Test Case creates a trailer using the web if create_data is set to TRUE (default) and does not do a dataset load
    * This Test Case can check in an existing trailer by setting create_data to FALSE and supplying a valid trlr_num with carcod in Expected status

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-YRD-1050 Web Outbound Trailer Check In with Safety Check
Test Case File: BASE-YRD-1050 Web Outbound Trailer Check In with Safety Check.feature
###############################################################

Test Case Description:
    This test case creates an outbound trailer in the Web Transport Equipment screen then uses the Web Check In screen to check the outbound trailer into an available dock door then processes the safety checks

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Outbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA 

Test Case Dataset setup scripts: "N/A"
Test Case Dataset cleanup scripts: "Web_Outbound_Trailer_Common"

Test Case Input CSV: Test Case Inputs/BASE-YRD-1050.csv

Test Case Required Inputs:
    * carcod - Carrier Code. Must exist in system
    * trlr_num - Trailer number to be created if creating data or used if already in system
    * dock - This will be used as the dock location for the trailer check in

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * Dock door is available for check in
    * Process assumes check in without appointment
    * Trailer safety check workflow is enabled, if not enabled, this feature will fail the scenario if no workflow is found

Test Case Notes:
    * This Test Case creates a trailer using the web if create_data is set to TRUE (default) and does not do a dataset load
    * This Test Case can check in an existing trailer by setting create_data to FALSE and supplying a valid trlr_num with carcod in Expected status

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-YRD-1060 Web Storage Trailer Check In
Test Case File: BASE-YRD-1060 Web Storage Trailer Check In.feature
###############################################################

Test Case Description:
    This Test Case checks in a Storage trailer in the Web

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Inbound

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: WEB, MOCA

Test Case Dataset setup scripts: "YRD_Trailer_Checkin"
Test Case Dataset cleanup scripts: "YRD_Trailer_Checkin"

Test Case Input CSV: Test Case Inputs/BASE-YRD-1060.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the trailer number when receiving by Trailer.
    * inv_num - This will be used as the Invoice Number when receiving by Trailer.
    * yard_loc - If receiving by Trailer, this is where your Trailer needs to be checked in
    * invtyp - This need to be a valid Invoice Type, that is defined in your system
    * prtnum - This needs to be a valid part number that is defined in your system
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - This can be a fabrication, but assumes simple, standard LPN receiving
    * supnum - This needs to be a valid supplier, defined in your system
    * rec_loc - This is the receiving staging lane used for drop
    * carcod - Carrier Code used for the trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-YRD-4010 Mobile Trailer Move
Test Case File: BASE-YRD-4010 Mobile Trailer Move.feature
###############################################################

Test Case Description:
    This Test Case assigns a trailer, checks it in, then moves the trailer using the Mobile App

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, MOCA

Test Case Dataset setup scripts: "Trailer_Creation"
Test Case Dataset cleanup scripts: "Trailer_Creation"

Test Case Input CSV: Test Case Inputs/BASE-YRD-4010.csv

Test Case Required Inputs:
    * wh_id - Warehouse ID
    * trlr_num - Trailer Number
    * carcod - Carrier Code
    * check_in_dock_loc - Location where trailer will be checked into
    * move_to_dock_loc - Location where trailer will be moved to
    * work_queue_or_immediate - Indicator for how the move is processed

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * User must have permissions to perform trailer moves

Test Case Notes:
    * None

Test Case Examples:
    * One with work_queue_or_immediate set to work_queue
    * One with work_queue_or_immediate set to immediate


###############################################################
Test Case Name: BASE-YRD-5000 Flow Yard Audit
Test Case File: BASE-YRD-5000 Flow Yard Audit.feature
###############################################################

Test Case Description:
    Test case for Yard Audit scenarios starting in the Web and completing in the terminal

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Terminal, Web, MOCA

Test Case Dataset setup scripts: "Create_Trailer"
Test Case Dataset cleanup scripts: "Create_Trailer"

Test Case Input CSV: Test Case Inputs/BASE-YRD-5000.csv

Test Case Required Inputs:
    * trlr_id - This will be used as the trailer ID for the trailer
    * carcod - This will be used as the carrier for the shipment
    * yard_loc - Yard Location
    * trlr_cod - Transport Equipment Code
    * audit_start_loc - Starting location from the Yard Audit
    * audit_end_loc - End location of Yard Audit Audit
    * vehtyp - Vehicle Type
    * yard_audit_type - Type of Yard Audit, either with_trailer Or without_trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * Successful Yard Audit of a single yard location
    * Yard Audit of first location fails, trailer then found in Audit of second location


###############################################################
Test Case Name: BASE-YRD-6000 Flow Mobile Yard Audit
Test Case File: BASE-YRD-6000 Flow Mobile Yard Audit.feature
###############################################################

Test Case Description:
    Test case for Yard Audit scenarios starting in the Web and completing in the Mobile App

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: Mobile, Web, MOCA

Test Case Dataset setup scripts: "Create_Trailer"
Test Case Dataset cleanup scripts: "Create_Trailer"

Test Case Input CSV: Test Case Inputs/BASE-YRD-6000.csv

Test Case Required Inputs:
    * trlr_id - This will be used as the trailer ID for the trailer
    * carcod - This will be used as the carrier for the shipment
    * yard_loc - Yard Location
    * trlr_cod - Transport Equipment Code
    * audit_start_loc - Starting location from the Yard Audit
    * audit_end_loc - End location of Yard Audit Audit
    * vehtyp - Vehicle Type
    * yard_audit_type - Type of Yard Audit, either with_trailer Or without_trailer

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * Successful Yard Audit of a single yard location
    * Yard Audit of first location fails, trailer then found in Audit of second location


###############################################################
Test Case Name: BASE-YRD-8010 API List Transport Equipment
Test Case File: BASE-YRD-8010 API List Transport Equipment.feature
###############################################################

Test Case Description:
    This Test Case creates an Inbound transport equipment using MOCA, then verifies it can see it using the API

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: API, MOCA

Test Case Dataset setup scripts: "Inbound_Trailer"
Test Case Dataset cleanup scripts: "Inbound_Trailer"

Test Case Input CSV: Test Case Inputs/BASE-YRD-8010.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the transport equipment number when receiving by Transport Equipment. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Transport Equipment. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Transport Equipment, this is where your Transport Equipment needs to be checked in
    * invtyp - This need to be a valid Invoice Type, that is defined in your system
    * prtnum - This needs to be a valid part number that is defined in your system
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - This can be a fabrication, but assumes simple, standard LPN receiving
    * supnum - This needs to be a valid supplier, defined in your system
    * rec_loc - This is the receiving staging lane used for drop

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None


###############################################################
Test Case Name: BASE-YRD-8020 API Close Transport Equipment
Test Case File: BASE-YRD-8020 API Close Transport Equipment.feature
###############################################################

Test Case Description:
    This Test Case creates an Inbound transport equipment using MOCA, then checks it in and closes it via the API

Test Case Author: Tryon Solutions
Test Case Type: regression
Functional Area: Yard

Blue Yonder WMS Version: Consult Bundle Release Notes
Blue Yonder Interfaces Interacted With: API, MOCA

Test Case Dataset setup scripts: "Inbound_Trailer"
Test Case Dataset cleanup scripts: "Inbound_Trailer"

Test Case Input CSV: Test Case Inputs/BASE-YRD-8020.csv

Test Case Required Inputs:
    * trlr_num - This will be used as the transport equipment number when receiving by Transport Equipment. If not, this will be the Receive Truck and Invoice Number
    * inv_num - This will be used as the Invoice Number when receiving by Transport Equipment. If receiving by PO - this will not be used.
    * yard_loc - If receiving by Transport Equipment, this is where your Transport Equipment needs to be checked in
    * invtyp - This need to be a valid Invoice Type, that is defined in your system
    * prtnum - This needs to be a valid part number that is defined in your system
    * rcvsts - Receiving status created on the Invoice Line being loaded
    * expqty - This can be a fabrication, but assumes simple, standard LPN receiving
    * supnum - This needs to be a valid supplier, defined in your system
    * rec_loc - This is the receiving staging lane used for drop

Test Case Optional Inputs:
    * None

Test Case Assumptions:
    * None

Test Case Notes:
    * None

Test Case Examples:
    * None

